@model AbbonamentoUtenteViewModel
@{
    Layout = "_LayoutClienti";
}
<div class="row">
    <div class="col s8 offset-s2 l7 offset-l2 center-align">
        <h6>Abbonamento Utente</h6>
    </div>
</div>
<div class="row">
    <div class="col s10 offset-s2 center-align">
        <vc:user-header model="@(ViewData["Utente"] as UserHeaderViewModel)"></vc:user-header>
    </div>
</div>
<form asp-controller="UtentiCliente" asp-action="SaveAbbonamentoUtente" asp-route-cliente="@ViewBag.UrlRoute"
      asp-route-userId="@Model.UserId" asp-route-id="@Model.Id" method="post" id="formEditAbbonamento">
    <input type="hidden" asp-for="Id" />
    <input type="hidden" asp-for="IdCliente" />
    <input type="hidden" asp-for="UserId" />
    <div class="row">
        <div class="input-field col s7 offset-s2">
            <select asp-for="IdTipoAbbonamento" asp-items="@ViewBag.TipologieAbbonamenti" id="IdTipoAbbonamento" disabled="@(Model.Id.HasValue && Model.Id.Value > 0)">
                <option value="" disabled selected>Selezionare una tipologia di Abbonamento</option>
            </select>
            <label>Tipologia di abbonamento</label>
            <span asp-validation-for="IdTipoAbbonamento"></span>
        </div>
    </div>
    <div class="row">
        <div class="input-field col s8 offset-s2 l3 offset-l2">
            <input id="inputDataInizioValidita" class="datepicker" type="text" asp-for="DataInizioValidita" />
            <label>Inizio Validità:</label>
            <span asp-validation-for="DataInizioValidita"></span>
        </div>
        <div class="input-field col s8 offset-s2 l3 offset-l1">
            <input id="inputScadenza" class="datepicker" type="text" asp-for="Scadenza" />
            <label>Scadenza</label>
            <span asp-validation-for="Scadenza"></span>
        </div>
    </div>
    <div class="row">
        <div class="input-field col s8 offset-s2 l3 offset-l2">
            <input type="number" asp-for="IngressiIniziali" id="IngressiIniziali" />
            <label>Ingressi Iniziali</label>
            <span asp-validation-for="IngressiIniziali"></span>
        </div>
        <div class="input-field col s8 offset-s2 l3 offset-l1">
            <input type="number" asp-for="IngressiResidui" />
            <label>Ingressi Residui</label>
            <span asp-validation-for="IngressiResidui"></span>
        </div>
    </div>
    <div class="row">
        <div class="input-field col s8 offset-s2 l3 offset-l2">
            <input type="number" asp-for="Importo" id="inputImporto" />
            <label>Prezzo Abbonamento</label>
            <span asp-validation-for="Importo"></span>
        </div>
        <div class="input-field col s8 offset-s2 l3 offset-l1">
            <input type="number" asp-for="ImportoPagato" />
            <label>Importo Pagato</label>
            <span asp-validation-for="ImportoPagato"></span>
        </div>
    </div>

    @if ((ViewBag.HasAppuntamentiDaConfermare != null) && ViewBag.HasAppuntamentiDaConfermare)
    {
        <div class="row">
            <div class="input-field col s10">
                <input type="checkbox" class="tooltipped"
                       data-tooltip="L'utente ha uno o più appuntamenti in attesa di conferma. Selezionando questo check gli appuntamenti saranno confermati automaticamente."
                       asp-for="ConfermaAppuntamenti" />
                <label>Conferma Appuntamenti</label>
            </div>
        </div>
    }
    <div class="row">
        <div class="input-field col s10 offset-s1 center">
            <button class="btn waves-effect waves-light" type="submit" name="action">
                Salva Modifiche
                <i class="material-icons left">save</i>
            </button>
        </div>
    </div>
</form>


@section Scripts
    {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment.min.js" integrity="sha256-CutOzxCRucUsn6C6TcEYsauvvYilEniTXldPa6/wu0k=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/locale/it.js" integrity="sha256-D8y560ZGsKY1LoAajKkQCG7y0Vkye361MH4yFv2K5kk=" crossorigin="anonymous"></script>

    <script>
        let elemInizioVal = document.getElementById("inputDataInizioValidita");
        let elemScadenz = document.getElementById("inputScadenza");
        let dtpInizioVal = null;
        let dtpScadenza = null;
        let dataInizioValidita = new Date();
        let dataInizioValiditaChanged = false;
        let numeroMesiAbbonamento = null;
        let minDate = moment().subtract(3, "months").toDate();
        //value: Date => valore selezionato
        //function onDataInizioValChanged(nuovaDataInizioVal) {
        //    dataInizioValidita = nuovaDataInizioVal;
        //    dataInizioValiditaChanged = true;
        //    refreshDataScadenza();
        //}

        function onDataInizioValChanged(picker) {
            dataInizioValidita = dtpInizioVal.date;
            dataInizioValiditaChanged = true;
            refreshDataScadenza();
        }


        function refreshDataScadenza() {
            var m = moment(dataInizioValidita).add(numeroMesiAbbonamento, 'months');
            dtpScadenza.setDate(m.toDate());
            dtpScadenza.setInputValue(dtpScadenza.toString());
        }

        $(document).ready(function () {
            let datetPickerI18n = {
                months: ['Gennaio', 'Febbraio', 'Marzo', 'Aprile', 'Maggio', 'Giugno', 'Luglio', 'Agosto', 'Settembre', 'Ottobre', 'Novembre', 'Dicembre'],
                monthsShort: ['Gen', 'Feb', 'Mar', 'Apr', 'Mag', 'Giu', 'Lug', 'Ago', 'Set', 'Ott', 'Nov', 'Dic'],
                weekdays: ['Domenica', 'Lunedì', 'Martedì', 'Mercoledì', 'Giovedì', 'Venerdì', 'Sabato'],
                weekdaysShort: ['Dom', 'Lun', 'Mar', 'Mer', 'Gio', 'Ven', 'Sab', 'Dom'],
                weekdaysAbbrev: ['D', 'L', 'M', 'M', 'G', 'V', 'S'],
                clear: 'Cancella',
                cancel: 'Annulla',
                today: 'Oggi'
            };

            dtpInizioVal = M.Datepicker.init(elemInizioVal, {
                //format: "dd mmm yyyy",
                format: "dd/mm/yyyy",
                defaultDate: new Date(),
                setDefaultDate: true,
                firstDay: 1,
                minDate: minDate,
                i18n: datetPickerI18n,
                showMonthAfterYear: true,
                //onSelect: onDataInizioValChanged
                onClose: onDataInizioValChanged
            });

            dtpScadenza = M.Datepicker.init(elemScadenz, {
                //format: "dd mmm yyyy",
                format:"dd/mm/yyyy",
                firstDay: 1,
                minDate: minDate,
                i18n: datetPickerI18n,
                showMonthAfterYear: true
            });


            let urlTipoAbb = "/api/@Model.IdCliente/abbonamenti/tipologie/";
            let selTipoAbb = $('#IdTipoAbbonamento');
            selTipoAbb.formSelect();
            selTipoAbb.change(function (event) {
                //Clear Fields
                dtpScadenza.setDate(null)
                //Display loader
                //Load Data From server
                $.ajax({
                    method: "GET",
                    url: urlTipoAbb + event.target.value
                })
                    .done(function (data, textStatus, jqXHR) {
                        if (data.durataMesi) {
                            numeroMesiAbbonamento = data.durataMesi;
                            refreshDataScadenza();
                        }
                        if (data.numIngressi) {
                            $("#IngressiIniziali").val(data.numIngressi);
                        } else {
                            $("#IngressiIniziali").val('');
                        }
                        if (data.costo) {
                            $("#inputImporto").val(data.costo);
                        } else {
                            $("#inputImporto").val('');
                        }
                        M.updateTextFields(); // Refresh fields
                        })
                    .fail(function (jqXHR, textStatus, errorThrown) {
                        alert(textStatus);
                        alert(errorThrown);
                    });
            });


        });
    </script>
}
