@model GalleryEditViewModel;
@{
    Layout = "_LayoutClienti";
}

@section Header{
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/file-uploader/5.16.2/azure.fine-uploader/fine-uploader-new.min.css" integrity="sha256-I65PS+dIV5Bb65cOVYVn3UAbVeTONYAFwkkJPcPXNGI=" crossorigin="anonymous" />
    @*<style type="text/css">
            .spinner {
                position: fixed;
                top: 0;
                left: 0;
                text-align: center;
                z-index: 1234;
                overflow: auto;
                width: 100%;
                height: 100%;
            }

            .img-spinner {
                position: fixed;
                top: 50%;
                left: 50%;
                margin-left: -50px; /* half width of the spinner gif */
                margin-top: -50px; /* half height of the spinner gif */
                text-align: center;
                z-index: 1234;
                overflow: auto;
                width: 100px; /* width of the spinner gif */
                height: 102px; /*hight of the spinner gif +2px to fix IE8 issue */
            }
        </style>*@
}

<section id="galleryEdit">
    <div class="row">
        <div class="col s12 center">
            <span class="r2d-section-title">Gestione galleria immagini</span>
        </div>
    </div>
    <div class="row">
        <div class="col s10 offset-1 right-align">
            <a class="btn waves-effect waves-light btn-floating red tooltipped" data-position="left" data-tooltip="Aggiungi Immagine"
               asp-controller="ProfiloCliente" asp-action="EditImageGallery" asp-route-cliente="@(ViewContext.RouteData.Values["cliente"])" asp-route-id="-1">
                <i class="material-icons">add</i>
            </a>
        </div>
    </div>
    <input id="fileSelect" type="file" accept="image/*" style="display:none" onchange="handleFiles(this.files)" />


    <div class="row">
        <div class="col s12 m10 offset-m1">
            @if ((Model.Images != null) && (Model.Images.Count > 0))
            {
                <div class="r2d-gallery-thumb-container" id="gridGallery">
                    @for (int idx = 0; idx < Model.Images.Count; idx++)
                    {
                        <div class="r2d-gallery-thumb-box">
                            <img class="r2d-gallery-thumb-img" id='@string.Format("galleryImg-{0}", idx)' src='@(Model.Images[idx].Url ?? "/img/no-image-available.png")'
                                 onclick="chooseImage(this, @idx, @(Model.Images[idx].Id ))" alt="Immagine @(@idx)" />
                        </div>
                    }
                </div>
            }
            @*else
                {
                    <div>
                        Caricare almeno un'immagine per abilitare la gallery
                    </div>
                }*@
            <div class="r2d-gallery-thumb-container">

            </div>
        </div>
    </div>
    @*@for (int col = 1; col <= 3; col++)
        {
            int idx = col + (row * 3);
            parms = new Dictionary<string, string> { { "imageOrder", idx.ToString() } };
            <div class="col s4 l3">
                @{
                    var imgCurrent = Model.Images.SingleOrDefault(i => i.Ordinamento == idx);
                    <div class="r2d-gallery-thumb-container">
                        <div class="r2d-gallery-thumb-box"">
                            <span class="valign_helper">
                                <img id='@string.Format("galleryImg-{0}",idx)' class="thumb_image" src='@(imgCurrent?.Url ?? "/img/no-image-available.png")' onclick="chooseImage(this, @idx, @(imgCurrent?.Id ??-1))" alt="Immagine @(@idx)" />
                                <span class="r2g-img-subtitle">Immagine @idx</span>
                            </span>
                        </div>
                        @if (imgCurrent != null)
                        {
                            <a class="inline" onclick="deleteImage(@imgCurrent.Id)">Elimina</a>
                        }
                    </div>
                }
                <div class="col l1 hide-on-med-and-down"></div>
            </div>
        }
        </div>
        }*@
</section>

<div id="spinner" class="spinner" style="display:none;">
    <img class="img-spinner" src="~/img/ajax-loader.gif" alt="Loading" />
</div>

<!-- Dialog Modale per la conferma della cancellazione -->
<div id="modalConfermaCanc" class="modal">
    <div class="modal-content">
        <h4>Conferma cancellazione immagine</h4>
        <p>Confermando la cancellazione l'immagine sarà eliminata in modo definitivo e non potrà essere recuperata.</p>
    </div>
    <div class="modal-footer">
        <a href="#!" class="modal-action modal-close waves-effect waves-green btn-flat">Annulla</a>
        <a href="#!" class="modal-action modal-close waves-effect waves-red btn-flat" onclick="ConfirmImageDelete()">Conferma</a>
    </div>
</div>
<div class="ajax-modal"></div>

@section Scripts{
    @*<script src="https://cdnjs.cloudflare.com/ajax/libs/file-uploader/5.16.2/azure.fine-uploader/azure.fine-uploader.core.min.js" integrity="sha256-ac1yakq7ikaLh6tHHGNOc6x9HtO92LQzQPKX8S1iQf4=" crossorigin="anonymous"></script>*@
    <script src="~/js/Sortable.min.js" asp-append-version="true"></script>
    <script>

        var uploader;
        var modal;
        var btnFileSelect;
        var currentFileIdx; //Indice dell'immagine attualmente in upload
        var currentImageId;
        document.addEventListener("DOMContentLoaded", function (event) {

            var sortable = new Sortable(document.getElementById('gridGallery'), {

            });
           //Init Uploader
            @*uploader = new qq.azure.FineUploaderBasic({
                autoUpload: true, //Carica il file sul server appena aggiunto all'uploader
                debug: true,
                warnBeforeUnload: true,
                multiple: false,
                cors: {
                    allowXdr: false,
                    expected:true,
                    sendCredentials: false
                },
                request: {
                    endpoint: "@Model.ContainerUrl"
                },
                signature: {
                    endpoint: "/api/fileupload",
                    customHeaders: {
                        "@(Constants.CUSTOM_HEADER_CLIENT_ROUTE)": "@(ViewContext.RouteData.Values["cliente"])"
                    }
                },
                uploadSuccess: {
                    endpoint: "/api/fileupload",
                    customHeaders: {
                        "@(Constants.CUSTOM_HEADER_CLIENT_ROUTE)": "@(ViewContext.RouteData.Values["cliente"])"
                    }
                },
                callbacks: {
                    onError: function (id, name, errorReason, xhrOrXdr) {
                        alert(qq.format("Error on file number {} - {}.  Reason: {}", id, name, errorReason));
                    },
                    onComplete: function (id, name, responseJSON, xhr) {
                        if (responseJSON.success) {
                            location.reload();
                        }
                        $("#spinner").hide();
                    }
                }
            });*@
            //Init Modal
            modal = M.Modal.init(document.getElementById('modalConfermaCanc'), {
                //onOpenStart: function (a1, a2, a3) { alert(a1); alert(a2); alert(a3);},
                //onCloseStart: function (a1, a2, a3) { alert(a1); alert(a2); alert(a3); },
                //onCloseEnd: function (a1, a2, a3) { alert(a1); alert(a2); alert(a3); }
            });
            btnFileSelect = document.getElementById('fileSelect');
        });

        function chooseImage(e, imageOrder, imgId) {
            var selectedFile;
            currentFileIdx = imageOrder;
            currentImageId = imgId;
            if (btnFileSelect) {
                btnFileSelect.click()
            }
            return false;
        }

        function handleFiles(files) {
            @*if (files) {
                $("#spinner").show();
                uploader.reset();
                uploader.addFiles(files[0], { fileOrder: currentFileIdx, idCliente: @(ViewBag.IdCliente), imageId: currentImageId });
            }*@
        }

        function deleteImage(imageId) {
            modal.imageId = imageId;
            modal.open(imageId);
        }

        function ConfirmImageDelete() {
            $('body').addClass('modal-loading');
            $.ajax({
                type: "DELETE",
                url: "./gallery/delete/" + modal.imageId,
                success: function (data) {
                    location.reload();
                },
                error: function (request, textStatus, error) {
                    alert("Errore durante la cancellazione dell'immagine. " + error);
                    $('body').removeClass('modal-loading');
                }
            });
        }
    </script>
}