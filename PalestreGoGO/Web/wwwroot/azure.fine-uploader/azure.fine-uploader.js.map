{"version":3,"sources":["?","../client/js/util.js","../client/js/export.js","../client/js/error/error.js","../client/js/version.js","../client/js/features.js","../client/js/promise.js","../client/js/blob-proxy.js","../client/js/button.js","../client/js/upload-data.js","../client/js/uploader.basic.api.js","../client/js/uploader.basic.js","../client/js/ajax.requester.js","../client/js/upload-handler/upload.handler.js","../client/js/upload-handler/upload.handler.controller.js","../client/js/window.receive.message.js","../client/js/upload-handler/form.upload.handler.js","../client/js/upload-handler/xhr.upload.handler.js","../client/js/deletefile.ajax.requester.js","../client/js/image-support/megapix-image.js","../client/js/image-support/image.js","../client/js/image-support/exif.js","../client/js/identify.js","../client/js/image-support/validation.image.js","../client/js/session.js","../client/js/session.ajax.requester.js","../client/js/image-support/scaler.js","../client/js/third-party/ExifRestorer.js","../client/js/total-progress.js","../client/js/paste.js","../client/js/form-support.js","../client/js/azure/util.js","../client/js/non-traditional-common/uploader.basic.api.js","../client/js/azure/uploader.basic.js","../client/js/azure/azure.xhr.upload.handler.js","../client/js/azure/get-sas.js","../client/js/uploadsuccess.ajax.requester.js","../client/js/azure/rest/delete-blob.js","../client/js/azure/rest/put-blob.js","../client/js/azure/rest/put-block.js","../client/js/azure/rest/put-block-list.js","../client/js/dnd.js","../client/js/uploader.api.js","../client/js/uploader.js","../client/js/templating.js","../client/js/ui.handler.events.js","../client/js/ui.handler.click.filebuttons.js","../client/js/ui.handler.click.filename.js","../client/js/ui.handler.focusin.filenameinput.js","../client/js/ui.handler.focus.filenameinput.js","../client/js/ui.handler.edit.filename.js","../client/js/azure/uploader.js"],"names":["global","qq","element","hide","style","display","this","attach","type","fn","addEventListener","attachEvent","detach","removeEventListener","detachEvent","contains","descendant","compareDocumentPosition","insertBefore","elementB","parentNode","remove","removeChild","css","styles","Error","opacity","filter","Math","round","extend","hasClass","name","considerParent","re","RegExp","test","className","addClass","removeClass","replace","getByClass","first","candidates","result","querySelector","querySelectorAll","getElementsByTagName","each","idx","val","push","getFirstByClass","children","child","firstChild","nodeType","nextSibling","setText","text","innerText","textContent","clearText","hasAttribute","attrName","attrVal","exec","getAttribute","undefined","canvasToBlob","canvas","mime","quality","dataUriToBlob","toDataURL","dataUri","arrayBuffer","byteString","createBlob","data","BlobBuilder","window","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","blobBuilder","append","getBlob","Blob","intArray","mimeString","split","indexOf","atob","decodeURI","ArrayBuffer","length","Uint8Array","character","charCodeAt","log","message","level","console","isObject","variable","Object","prototype","toString","call","isFunction","isArray","value","buffer","constructor","isItemList","maybeItemList","isNodeList","maybeNodeList","item","namedItem","isString","maybeString","trimStr","string","String","trim","format","str","args","Array","slice","arguments","newStr","nextIdxToReplace","strBefore","substring","strAfter","isFile","maybeFile","File","isFileList","maybeFileList","FileList","isFileOrInput","maybeFileOrInput","isInput","maybeInput","notFile","evaluateType","normalizedType","toLowerCase","HTMLInputElement","tagName","isBlob","maybeBlob","isXhrUploadSupported","input","document","createElement","multiple","FormData","createXhrInstance","upload","XMLHttpRequest","ActiveXObject","error","isFolderDropSupported","dataTransfer","items","webkitGetAsEntry","isFileChunkingSupported","androidStock","webkitSlice","mozSlice","sliceBlob","fileOrBlob","start","end","slicer","arrayBufferToHex","bytesAsHex","bytes","byt","byteAsHexStr","readBlobToHex","blob","startOffset","initialBlob","fileReader","FileReader","promise","Promise","onload","success","onerror","failure","readAsArrayBuffer","second","extendNested","prop","override","target","sourceFn","super_","source","srcPropName","srcPropVal","arr","elt","from","len","hasOwnProperty","getUniqueId","c","r","random","v","ie","navigator","userAgent","ie7","ie8","ie10","ie11","edge","safari","vendor","chrome","opera","firefox","windows","platform","android","ios6","ios","ios7","ios8","ios800","iosChrome","iosSafari","iosSafariWebView","preventDefault","e","returnValue","toElement","div","html","innerHTML","iterableItem","callback","keyOrIndex","retVal","Storage","key","getItem","charAt","bind","oldFunc","context","newArgs","concat","apply","obj2url","obj","temp","prefixDone","uristrings","prefix","add","nextObj","i","nextTemp","encodeURIComponent","join","obj2FormData","formData","arrayKeyName","obj2Inputs","form","setAttribute","appendChild","parseJson","json","JSON","parse","eval","getExtension","filename","extIdx","lastIndexOf","substr","getFilename","blobOrFileInput","fileName","DisposeSupport","disposers","dispose","disposer","shift","addDisposer","disposeFunction","define","amd","module","exports","version","supportedFeatures","supportsUploading","supportsUploadingBlobs","supportsFileDrop","supportsAjaxFileUploading","supportsFolderDrop","supportsChunking","supportsResume","supportsUploadViaPaste","supportsUploadCors","supportsDeleteFileXdr","supportsDeleteFileCorsXhr","supportsDeleteFileCors","supportsFolderSelection","supportsImagePreviews","supportsUploadProgress","testSupportsFileInputElement","supported","tempInput","disabled","ex","isChrome14OrHigher","match","isCrossOriginXhrSupported","xhr","withCredentials","isXdrSupported","XDomainRequest","isCrossOriginAjaxSupported","isFolderSelectionSupported","webkitdirectory","isLocalStorageSupported","localStorage","setItem","isDragAndDropSupported","span","postMessage","ajaxUploading","blobUploading","canDetermineSize","chunking","deleteFileCors","deleteFileCorsXdr","deleteFileCorsXhr","dialogElement","HTMLDialogElement","fileDrop","folderDrop","folderSelection","imagePreviews","imageValidation","itemSizeValidation","pause","progressBar","resume","scaling","tiffPreviews","unlimitedScaledImageSize","uploading","uploadCors","uploadCustomHeaders","uploadNonMultipart","uploadViaPaste","isGenericPromise","maybePromise","then","successArgs","failureArgs","successCallbacks","failureCallbacks","doneCallbacks","state","onSuccess","onFailure","done","BlobProxy","referenceBlob","onCreate","create","UploadButton","o","self","disposeSupport","options","acceptFiles","focusClass","folders","hoverClass","ios8BrowserCrashWorkaround","onChange","title","buttonId","createInput","BUTTON_ID_ATTR_NAME","setMultiple","position","right","top","fontFamily","fontSize","margin","padding","cursor","height","overflow","direction","getInput","getButtonId","isMultiple","optInput","removeAttribute","setAcceptFiles","reset","UploadData","uploaderProxy","byUuid","byStatus","byProxyGroupId","byBatchId","getDataByIds","idOrIds","entries","id","getDataByUuids","uuids","uuid","getDataByStatus","status","statusResults","statuses","index","statusEnum","statusResultIndexes","dataIndex","addFile","spec","SUBMITTING","originalName","size","file","batchId","proxyGroupId","onBeforeStatusChange","onStatusChange","retrieve","optionalFilter","removeFileRef","record","setStatus","newStatus","oldStatus","byStatusOldStatusIndex","splice","uuidChanged","newUuid","oldUuid","updateName","newName","updateSize","newSize","setParentId","targetId","parentId","getIdsInProxyGroup","getIdsInBatch","SUBMITTED","REJECTED","QUEUED","CANCELED","PAUSED","UPLOADING","UPLOAD_FINALIZING","UPLOAD_RETRYING","UPLOAD_SUCCESSFUL","UPLOAD_FAILED","DELETE_FAILED","DELETING","DELETED","basePublicApi","addBlobs","blobDataOrArray","params","endpoint","addFiles","addInitialFiles","cannedFileList","cannedFile","_addCannedFile","_maybeHandleIos8SafariWorkaround","_storedIds","_currentBatchId","processBlob","_handleNewFile","_options","blobs","defaultName","verifiedFiles","processBlobData","blobData","processCanvas","processCanvasData","canvasData","normalizedQuality","processFileOrInput","fileOrInput","files","normalizeData","fileContainer","_prepareItemsForUpload","cancel","uploadData","_uploadData","getName","_handler","cancelAll","storedIdsCopy","storedFileId","clearStoredFiles","continueUpload","enabled","_uploadFile","deleteFile","_onSubmitDelete","doesExist","fileOrBlobId","isValid","drawThumbnail","fileId","imgOrCanvas","maxSize","fromServer","customResizeFunction","promiseToReturn","fileOrUrl","_imageGenerator","_thumbnailUrls","scale","getFile","container","generate","modifiedContainer","reason","getButton","_getButton","_buttonIdsForFileIds","getEndpoint","_endpointStore","get","uploadDataRecord","getInProgress","getParentId","uploadDataEntry","getUploads","getResumableFilesData","getSize","getNetUploads","_netUploaded","getRemainingAllowedItems","allowedItems","_currentItemLimit","_netUploadedOrQueued","getUuid","isResumable","hasResumeRecord","debug","pauseUpload","expunge","_autoRetries","_retryTimeouts","_preventRetries","_buttons","button","_paramsStore","_pasteHandler","session","refreshOnReset","_refreshSessionData","_succeededSinceLastAllComplete","_failedSinceLastAllComplete","_totalProgress","_customResumeDataStore","retry","_manualRetry","scaleImage","specs","Scaler","setCustomHeaders","headers","_customHeadersStore","set","setCustomResumeData","setDeleteFileCustomHeaders","_deleteFileCustomHeadersStore","setDeleteFileEndpoint","_deleteFileEndpointStore","setDeleteFileParams","_deleteFileParamsStore","setEndpoint","setForm","elementOrId","_updateFormSupportAndParams","setItemLimit","newItemLimit","setName","setParams","setUuid","fileRecord","_onDeleteComplete","errorMessage","uploadStoredFiles","_itemError","_uploadStoredFiles","basePrivateApi","sessionData","deleteFileEndpoint","deleteFileParams","thumbnailUrl","_annotateWithButtonId","associatedInput","qqButtonId","_getButtonId","_batchError","callbacks","onError","_createDeleteHandler","DeleteFileAjaxRequester","method","toUpperCase","maxConnections","uuidParamName","request","uuidName","customHeaders","paramsStore","endpointStore","cors","onDelete","_onDelete","onDeleteComplete","xhrOrXdr","isError","_createPasteHandler","PasteSupport","targetElement","paste","pasteReceived","_handleCheckedCallback","onPasteReceived","_handlePasteSuccess","identifier","_createStore","initialValue","_readOnlyValues_","store","catchall","perIdReadOnlyValues","readOnlyValues","copy","orig","getReadOnlyValues","includeReadOnlyValues","existing","values","addReadOnly","_createUploadDataTracker","_onUploadStatusChange","_maybeAllComplete","setTimeout","_createUploadButton","accept","validation","allowedExtensions","allowMultiple","workarounds","iosEmptyVideos","_isAllowedExtension","classes","buttonFocus","buttonHover","ios8BrowserCrash","inputName","_onInputChange","fileInputTitle","_disposeSupport","_createUploadHandler","additionalOptions","namespace","lastOnProgress","preventRetryParam","preventRetryResponseProperty","onProgress","loaded","total","_onProgress","onComplete","_onComplete","onCancel","cancelFinalizationEffort","_onCancel","onUploadPrep","_onUploadPrep","onUpload","_onUpload","onUploadResult","onUploadChunk","chunkData","_onUploadChunk","onUploadChunkResult","partIndex","onUploadChunkSuccess","_onUploadChunkSuccess","onResume","customResumeData","onAutoRetry","responseJSON","_onAutoRetry","onUuidChanged","setSize","_setSize","getDataByUuid","isQueued","isInProgress","getCustomResumeData","_getCustomResumeData","UploadHandlerController","_fileOrBlobRejected","_formatSize","sizeSymbols","max","toFixed","_generateExtraButtonSpecs","_extraButtonSpecs","extraButtons","extraButtonOptionEntry","extraButtonSpec","_initExtraButton","extraButtonsSpec","_defaultButtonId","buttonOrFileInputOrFile","inputs","fileInput","fileBlobOrInput","_getNotFinished","_getValidationBase","_getValidationDescriptor","fileWrapper","_getValidationDescriptors","fileWrappers","fileDescriptors","_handleCameraAccess","camera","acceptIosCamera","optionRoot","details","callbackRetVal","successParam","newFileWrapperList","actualFile","handler","_customNewFileHandler","_handleNewFileGeneric","addFileToHandler","_trackButton","fileList","extSuppliedName","extension","_handleDeleteSuccess","_handleDeleteFailed","_initFormSupportAndParams","_formSupport","FormSupport","attachedToForm","getFormInputsAsObject","autoUpload","newAutoUpload","newEndpoint","_isDeletePossible","expected","allowXdr","allowed","valid","allowedExt","extRegex","code","maybeNameOrNames","messages","names","validationBase","extensionsForMessage","placeholderMatch","replacement","allowedExtension","formatFileName","sizeLimit","minSizeLimit","placeholder","_onBeforeManualRetry","notFinished","_onAllComplete","ios8SafariUploads","alert","unsupportedBrowserIos8Safari","_maybeParseAndSendUploadError","response","errorReason","defaultResponseError","_maybeProcessNextItemAfterOnValidateCallback","validItem","stopOnFirstInvalidFile","validationDescriptor","onValidate","_onValidateCallbackSuccess","_onValidateCallbackFailure","successful","failed","onAllComplete","_shouldAutoRetry","retryWaitPeriod","autoAttemptDelay","_onBeforeAutoRetry","itemLimit","onManualRetry","clearTimeout","storedItemIndex","fileIndex","onIndividualProgress","_onSubmit","_onSubmitCallbackSuccess","_onSubmitted","onSubmitted","_storeForLater","onSuccessCallback","additionalMandatedParams","adjustedOnSuccessCallback","onSubmitDelete","_deleteHandler","sendDelete","_onTotalProgress","onTotalProgress","enableAuto","_onValidateBatchCallbackFailure","_onValidateBatchCallbackSuccess","validationDescriptors","proposedNetFilesUploadedOrQueued","tooManyItemsError","nextIndex","_validateFileOrBlobData","_upload","onValidateBatch","_preventLeaveInProgress","event","onLeave","Session","_session","addFileRecord","refresh","_sessionRequestComplete","onSessionRequestComplete","onNewSize","maxAutoAttempts","formElementOrId","onSubmit","idToUpload","stillSubmitting","validityChecker","allowEmpty","ImageValidation","validate","image","errorCode","_wrapCallbacks","safeCallback","errorMsg","exception","callbackName","callbackFunc","FineUploaderBasic","disableCancelForFormUploads","warnBeforeUnload","filenameParam","forceMultipart","omitDefaultParams","paramsInBody","requireSuccessJson","totalFileSizeName","maxHeight","maxWidth","minHeight","minWidth","maybeXhr","maybeXhrOrXdr","attemptNumber","fileOrBlobData","typeError","sizeError","minSizeError","emptyError","noFilesError","maxHeightImageError","maxWidthImageError","minHeightImageError","minWidthImageError","retryFailTooManyItems","concurrent","mandatory","paramNames","partByteOffset","chunkSize","totalFileSize","totalParts","partSize","jsonPayload","resetOnStatus","recordsExpireIn","resuming","customKeys","fileOrBlobName","sendCredentials","interceptSubmit","customResizer","sendOriginal","orient","defaultType","defaultQuality","failureText","includeExif","sizes","ImageGenerator","_scaler","handleNewFile","TotalProgress","entry","AjaxRequester","shouldParamsBeInQueryString","queue","requestData","acceptHeader","validMethods","contentType","mandatedParams","allowXRequestedWithAndCacheControl","successfulResponseCodes","DELETE","PATCH","POST","PUT","GET","onSend","isSimpleMethod","containsNonSimpleHeaders","containsNonSimple","header","isXdr","getCorsAjaxTransport","ontimeout","onprogress","getXhrOrXdr","suppliedXhr","dequeue","nextId","sendRequest","xdrError","isResponseSuccessful","getParams","onDemandParams","additionalParams","optXhr","payload","url","createUrl","additionalQueryParams","getXdrLoadHandler","getXdrErrorHandler","onreadystatechange","getXhrReadyStateChangeHandler","registerForUploadProgress","open","setHeaders","send","stringify","addToPath","readyState","lengthComputable","onDemandHeaders","additionalHeaders","allHeaders","setRequestHeader","responseCode","prepareToSend","initTransport","path","cacheBuster","withPath","appendToPath","withParams","withQueryParams","_additionalQueryParams_","withHeaders","withPayload","thePayload","withCacheBuster","qqtimestamp","Date","getTime","canceled","UploadHandler","proxy","fileState","fileItem","onCancelRetVal","getThirdPartyFileId","_getFileState","_setThirdPartyFileId","thirdPartyFileId","_wasCanceled","controller","chunkingPossible","concurrentChunkingPossible","preventRetryResponse","chunked","chunkIdx","_getChunkData","attemptingResume","chunkProgress","_getChunkDataForCallback","finalize","finalizeChunks","normaizedResponse","normalizeResponse","_maybeDeletePersistedChunkData","cleanup","normalizedResponse","handleFailure","clearCachedChunk","responseToReport","inProgressIdx","inProgress","remaining","unshift","ignoreFailure","keys","_getXhrs","ckid","ckXhr","abort","_cancelled","moveInProgressToRemaining","connectionManager","free","hasMoreParts","nextPart","nextIdx","_getTotalChunks","reevaluateChunking","sendNext","inProgressChunks","available","onUploadChunkPromise","requestOverrides","uploadChunkData","overrides","uploadChunk","inProgressChunkIdx","_maybePersistChunkedState","clearXhr","_open","_openChunks","_waiting","openChunkEntriesCount","openChunksCount","openChunkIndexes","dontAllowNext","allowNext","waitingIndex","connectionsIndex","getProxyOrBlob","getWaitingOrConnected","waitingOrConnected","chunks","parseInt","isUsingConnection","pop","openChunksEntry","simple","uploadFile","maybeNewUuid","_clearXhrs","getProxy","initHandler","handlerType","traditional","handlerModuleSubtype","onFinalizing","_removeExpiredChunkingRecords","isDeferredEligibleForUpload","maybeDefer","generatedBlob","updateBlob","maybeSendDeferredFiles","errorResponse","idsInGroup","uploadedThisId","idInGroup","now","originalResponse","_shouldChunkThisFile","blobToUpload","cancelRetVal","isProxied","_getLocalStorageId","isAttemptingResume","WindowReceiveMessage","callbackWrapperDetachers","receiveMessage","onMessageCallbackWrapper","stopReceivingMessages","detacher","FormUploadHandler","formHandlerInstanceId","onloadCallbacks","detachLoadEvents","postMessageCallbackTimers","isCors","corsMessageReceiver","expungeFile","iframe","getElementById","_getIframeName","getFileIdForIframeName","iframeName","initIframeForUpload","body","registerPostMessageCallback","_parseJsonResponse","onloadCallback","_detachLoadEvent","_attachLoadEvent","responseDescriptor","contentDocument","_createIframe","_initFormForUpload","targetName","innerHtmlOrMessage","XhrUploadHandler","getChunkSize","chunkFiles","resumeEnabled","xhrId","ajaxRequester","_getAjaxRequester","blobOrProxy","_initTempState","_maybePrepareForResume","cachedChunks","tempState","xhrs","ajaxRequesters","responseParser","lastChunkIdx","_getXhr","resumableFilesData","_iterateResumeRecords","notResumable","optInProgress","optRemaining","chunkingState","reverse","paused","totalChunks","parts","newBlob","chunkId","_createXhr","optChunkIdx","_registerXhr","chunkIndex","fileSize","startBytes","endBytes","part","count","startByte","endByte","formatVersion","localStorageId","forEach","_getMimeType","_getPersistableData","ceil","_markNotResumable","removeItem","persistedData","lastUpdated","_registerProgressHandler","progressCalculator","totalSuccessfullyLoadedForFile","loadedForRequest","totalForRequest","estActualChunkLoaded","totalLoadedForFile","chunkLoaded","optAjaxRequester","xhrsId","expirationDays","expirationDate","setDate","getDate","requester","getMandatedParams","_method","detectSubsampling","img","iw","naturalWidth","ih","naturalHeight","ctx","width","getContext","drawImage","getImageData","detectVerticalSquash","sy","ey","py","alpha","ratio","renderImageToDataURL","doSquash","renderImageToCanvas","maybeCalculateDownsampledDimensions","maxPixels","origHeight","origWidth","newHeight","sqrt","newWidth","modifiedDimensions","save","resize","renderImageToCanvasWithCustomResizer","imageHeight","imageWidth","orientation","targetHeight","targetWidth","transformCoordinate","d","tmpCanvas","vertSquashRatio","dw","dh","dy","tmpCtx","sx","dx","clearRect","restore","qqImageRendered","resizeInfo","sourceCanvas","sourceCanvasContext","targetCanvas","translate","rotate","PI","MegaPixImage","srcImage","errorCallback","Image","URL","createObjectURL","webkitURL","src","listeners","imageLoadListeners","render","imgWidth","imgHeight","opt","optionsKey","optionsValue","oldTargetSrc","onrender","isImg","el","isCanvas","isImgCorsSupported","crossOrigin","isCanvasSupported","determineMimeOfFileName","nameWithPath","pathSegments","isCrossOrigin","targetAnchor","targetProtocol","targetHostname","targetPort","href","protocol","port","hostname","location","registerImgLoadListeners","registerCanvasDrawImageListener","registerThumbnailRenderedListener","registered","draw","drawPreview","Identify","megapixErrorHandler","isPreviewable","dummyExif","exif","Exif","mpImg","Orientation","failureMsg","drawOnCanvasOrImgFromUrl","canvasOrImg","tempImg","tempImgRender","rendered","drawOnImgFromUrlWithCssScaling","drawFromUrl","fileBlobOrUrl","_testing","TAG_IDS","TAG_INFO","274","parseLittleEndian","hex","pow","seekToApp1","offset","theOffset","thePromise","segmentLength","getApp1Offset","isLittleEndian","app1Start","getDirEntryCount","littleEndian","getIfd","dirEntries","getDirEntries","ifdHex","getTagValues","TAG_VAL_OFFSET","tagsToFind","vals","idHex","tagsToFindIdx","tagValHex","tagValLength","parser","onParseFailure","app1Offset","dirEntryCount","tagValues","isIdentifiable","magicBytes","questionableBytes","identifiable","magicBytesEntries","magicBytesArrayEntry","previewable","isPreviewableSync","PREVIEWABLE_MIME_TYPES","fileMime","isRecognizedImage","image/jpeg","image/gif","image/png","image/bmp","image/tiff","hasNonZeroLimits","limits","atLeastOne","limit","getWidthHeight","sizeDetermination","getFailingLimit","dimensions","failingLimit","limitName","limitValue","limitMatcher","dimensionPropName","actualValue","validationEffort","isJsonResponseValid","handleFileItems","fileItems","someItemsIgnored","err","refreshEffort","refreshCompleteCallback","requesterOptions","SessionAjaxRequester","queryServer","responseText","includeOriginal","failedToScaleText","_getSortedSizes","getFileRecords","originalFileUuid","originalFileName","originalBlobOrBlobData","records","originalBlob","sizeRecord","outputType","_determineOutputType","requestedType","refType","_getName","_generateScaledImage","failedText","api","scaledIds","originalId","blobSize","scaledId","qqparentuuid","qqparentsize","param","scalingEffort","scalingOptions","scaler","referenceType","scaledVersionProperties","startOfExt","versionType","scaledName","scaledExt","nameAppendage","sort","a","b","sourceFile","imageGenerator","scaledImageDataUri","signalSuccess","_insertExifHeader","scaledImageDataUriWithExif","originalImage","reader","insertionEffort","originalImageDataUri","ExifRestorer","readAsDataURL","_dataUriToBlob","_createBlob","KEY_STR","encode64","output","chr1","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","origFileBase64","resizedFileBase64","expectedBase64Header","rawImage","decode64","segments","slice2Segments","exifManipulation","exifArray","getExifArray","newImageArray","insertExif","aBuffer","seg","x","imageData","buf","separatePoint","mae","ato","array","rawImageArray","head","endPoint","base64test","perFileProgress","totalLoaded","totalSize","lastLoadedSent","lastTotalSent","callbackProxy","noRetryableFiles","retryable","none","failedId","updateTotalProgress","onNew","newLoaded","newTotal","oldLoaded","oldTotal","detachPasteHandler","isImage","registerPasteHandler","clipboardData","getAsFile","unregisterPasteHandler","startUpload","formEl","_form2Obj","determineNewEndpoint","validateForm","nativeSubmit","checkValidity","maybeUploadOnSubmit","submit","determineFormEl","notIrrelevantType","irrelevantTypes","radioOrCheckbox","ignoreValue","checked","selectValue","select","selected","elements","azure","util","AZURE_PARAM_PREFIX","_paramNameMatchesAzureParameter","_getPrefixedParamName","getParamsAsHeaders","headerName","parseAzureError","domParser","DOMParser","responseDoc","parseFromString","errorTag","errorDetails","codeTag","messageTag","nonTraditionalBasePublicApi","setUploadSuccessParams","_uploadSuccessParamsStore","setUploadSuccessEndpoint","_uploadSuccessEndpointStore","nonTraditionalBasePrivateApi","onCompleteArgs","successEndpoint","successCustomHeaders","uploadSuccess","successMethod","uploadSuccessParams","fileParams","onSuccessFromServer","successRequestResult","_failedSuccessRequestCallbacks","onFailureFromServer","submitSuccessRequest","successAjaxRequester","UploadSuccessAjaxRequester","_getEndpointSpecificParams","sendSuccessRequest","successRequestCallback","signature","blobProperties","minFileSize","_cannedBlobNames","getBlobName","onGetBlobName","_determineBlobName","deleteBlob","_deleteBlob","blobNameOptionValue","fileExtension","blobNameToUse","blobName","relatedToCancel","deleteBlobSasUri","blobUriStore","deleteFileEndpointStore","getSasSuccess","sasUri","getSasFailure","DeleteBlob","getSas","GetSas","restRequestVerb","minFileSizeForChunking","getBlobMetadata","putBlob","PutBlob","putBlock","PutBlock","putBlockList","PutBlockList","getSasForPutBlobOrBlock","combineChunks","getSignedUrl","mimeType","blockIdEntries","determineBlobUrl","containerUrl","getBlobNameSuccess","getBlobNameFailure","getSasId","getSasXhr","determineBlobUrlSuccess","blobUrl","determineBlobUrlFailure","azureError","blockIdEntry","chunkingData","maybePossible","requestPromises","sasResponseReceived","blobUri","requestPromise","restVerb","bloburi","pendingRequests","handleSuccessResponse","responseJson","successIndicator","failureIndicator","parsedResponse","codes","endpoints","promises","endpointHandler","Content-Type","createBlockId","partNum","digits","zeros","paddedPartNum","btoa","blockId","createRequestBody","doc","implementation","createDocument","latestEl","latestTextEl","createTextNode","XMLSerializer","serializeToString","fileMimeType","registerXhrCallback","blockIdsXml","x-ms-blob-content-type","DragAndDrop","HIDE_ZONES_EVENT_NAME","HIDE_BEFORE_ENTER_ATTR","uploadDropZones","droppedFiles","dropZoneElements","allowMultipleItems","dropActive","uploadDroppedFiles","uploadDropZone","filesAsArray","dropLog","dropDisabled","processingDroppedFilesComplete","getElement","traverseFileTree","parseEntryPromise","qqPath","extractDirectoryPath","fileError","fullPath","isDirectory","getFilesInDirectory","allEntriesRead","entriesLeft","readFailure","indexOfNameInFullPath","accumEntries","existingPromise","dirReader","createReader","readEntries","readSuccess","newEntries","handleDataTransfer","pendingFolderPromises","handleDataTransferPromise","processingDroppedFiles","dropError","setupDropzone","dropArea","dropZone","UploadDropZone","onEnter","stopPropagation","onLeaveNotDescendants","onDrop","isFileDrag","dragEvent","fileDrag","types","leavingDocumentOut","y","setupDragDrop","dropZones","maybeHideDropZones","HTMLElement","setupExtraDropzone","removeDropzone","dzs","targetEl","errorSpecifics","preventDrop","dropOutsideDisabled","dragoverShouldBeCanceled","disableDropOutside","dropEffect","isValidFileDrag","effectTest","dt","isSafari","effectAllowed","includes","isOrSetDropDisabled","isDisabled","triggerHidezonesEvent","hideZonesEvent","triggerUsingOldApi","createEvent","initEvent","CustomEvent","dispatchEvent","attachEvents","effect","relatedTarget","elementFromPoint","clientX","clientY","uiPublicApi","_parent","_templating","addCacheToDom","clearFiles","addExtraDropzone","_dnd","removeExtraDropzone","getItemByFileId","isHiddenForever","getFileContainer","_setupDragAndDrop","_totalFilesInBatch","_filesInBatchAddedToUi","_setupClickAndEditEventHandlers","formattedFilename","updateFilename","uploadPaused","continued","uploadContinued","getId","fileContainerOrChildEl","getFileId","getDropTarget","qqDropTarget","uiPrivateApi","_removeFileItem","removeFile","_fileButtonsClickHandler","FileButtonsClickHandler","_bindFileButtonsClickEvent","_focusinEventSupported","_isEditFilenameEnabled","_filenameClickHandler","_bindFilenameClickEvent","_filenameInputFocusInHandler","_bindFilenameInputFocusInEvent","_filenameInputFocusHandler","_bindFilenameInputFocusEvent","dragAndDrop","extraDropzones","templating","defaultDropZone","getDropZone","showDropProcessing","hideDropProcessing","errorData","lvl","onDeleteFile","onRetry","onPause","onContinue","onGetName","isEditFilenamePossible","FilenameClickHandler","FilenameInputFocusHandler","_filenameEditHandler","onGetUploadStatus","onSetName","onEditingStatusChange","isEditing","qqInput","getEditInput","qqFileContainer","hideFilename","hideEditIcon","showFilename","showEditIcon","markFilenameEditable","hideRetry","setStatusText","_classes","retrying","hidePause","FilenameInputFocusInHandler","hideSpinner","resetTotalProgress","reportDirectoryPaths","qqpath","_addToList","addHandler","updateProgress","hideCancel","hideProgress","waitingForResponse","_displayFileSize","parentRetVal","completeUpload","_markFileAsSuccessful","fail","showCancel","isRetryPossible","showRetry","_controlFailureTextDisplay","newResult","showDeleteButton","_maybeUpdateThumbnail","showSpinner","allowPause","retryNumForDisplay","maxAuto","retryNote","_showCancelLink","showAutoRetryNote","autoRetryNote","resetProgress","_onSubmitDeleteSuccess","forceConfirm","_showDeleteConfirm","_sendDeleteRequest","deletingFailedText","hideDeleteButton","deletingStatusText","confirmMessage","deleteRequestArgs","showConfirm","canned","prependData","prependIndex","dontDisplay","hideScaled","prependFiles","disableCancel","_handledProxyGroup","_clearList","addFileToCache","updateThumbnail","thumbnails","generatePreview","fileSizeOnSubmit","loadedSize","sizeForDisplay","_formatProgress","uploadedSize","formatProgress","mode","responseProperty","failureReason","failedUploadTextDisplay","failUpload","enableTooltip","_showTooltip","showMessage","_setupPastePrompt","namePromptMessage","defaultVal","showPrompt","fileStatus","placeholders","waitUntilResponse","FineUploader","listElement","template","editable","tooManyFilesError","unsupportedBrowser","promptForName","maxCount","notAvailablePath","waitingPath","timeBetweenThumbs","hasDialog","showDialog","confirm","defaultValue","prompt","Templating","templateIdOrEl","containerEl","fileContainerEl","maxThumbs","waitUntilUpdate","thumbnailNotAvailable","waitingForThumbnail","renderFailure","FILE_ID_ATTR","FILE_CLASS_PREFIX","THUMBNAIL_MAX_SIZE_ATTR","THUMBNAIL_SERVER_SCALE_ATTR","HIDE_DROPZONE_ATTR","DROPZPONE_TEXT_ATTR","IN_PROGRESS_CLASS","HIDDEN_FOREVER_CLASS","fileBatch","content","createDocumentFragment","map","isCancelDisabled","generatedThumbnails","thumbnailQueueMonitorRunning","thumbGenerationQueue","thumbnailMaxSize","selectorClasses","alertDialog","dialogCancelButton","confirmDialog","dialogMessage","dialogOkButton","promptDialog","uploader","drop","list","progressBarContainer","totalProgressBarContainer","totalProgressBar","spinner","continueButton","deleteButton","statusText","editFilenameInput","editNameIcon","dropText","dropProcessing","dropProcessingSpinner","thumbnail","previewGeneration","cachedThumbnailNotAvailableImg","cachedWaitingForThumbnailImg","isEditElementsExist","isRetryElementExist","templateDom","showThumbnails","serverScale","cacheThumbnailPlaceholders","notAvailableUrl","waitingUrl","updatedImg","displayWaitingImg","waitingImgPlacement","maybeScalePlaceholderViaCss","show","generateNewPreview","getThumbnail","qqThumbnailId","maybeSetDisplayNotAvailableImg","generateNextQueuedPreview","queuedThumbRequest","update","processUpdateQueuedPreviewRequest","processNewQueuedPreviewRequest","getCancel","getTemplateEl","getContinue","getDialog","getDelete","getDropProcessing","getEditIcon","getPause","getProgress","getRetry","getSpinner","cssClass","previewing","notAvailableImgPlacement","parseAndGetTemplate","scriptEl","scriptHtml","fileListNode","tempTemplateEl","fileListEl","defaultButton","dropTextEl","uploaderEl","cloneNode","fileTemplate","prependFile","parentEl","beforeEl","optFileOrBlob","relatedThumbnailId","useCachedPreview","showWaitingImg","setProgressBarWidth","percent","bar","progressBarSelector","targetThumbnailId","cachedThumbnailId","targetThumbnail","cachedThumbnail","hideTotalProgress","cantRenderEl","prependInfo","hideForever","batch","fileEl","fileNameEl","thumb","waitingImg","currentNode","getFileList","filenameEl","isFileName","icon","isEditIcon","isEditInput","isCancel","allowContinueButton","isPause","isContinueButton","isDeleteButton","isRetry","textEl","dialog","messageEl","inputEl","cancelBtn","okBtn","closeHandler","cancelClickHandler","okClickHandler","close","showModal","UiEventHandler","s","protectedApi","eventType","attachTo","onHandled","srcElement","getFileIdFromItem","qqFileId","getDisposeSupport","inheritedInternalApi","buttonHandlers","examineEvent","buttonType","firstLetterCapButtonType","handleFilenameEdit","FilenameEditHandler","handleInputFocus","getFilenameSansExtension","filenameSansExt","getOriginalExtension","origName","handleNameUpdate","newFilenameInputEl","origExtension","registerInputBlurHandler","registerInputEnterKeyHandler","keyCode","which","focusInput","focus"],"mappings":"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","file":"azure.fine-uploader.js","sourcesContent":[null,"/*globals window, navigator, document, FormData, File, HTMLInputElement, XMLHttpRequest, Blob, Storage, ActiveXObject */\n/* jshint -W079 */\nvar qq = function(element) {\n    \"use strict\";\n\n    return {\n        hide: function() {\n            element.style.display = \"none\";\n            return this;\n        },\n\n        /** Returns the function which detaches attached event */\n        attach: function(type, fn) {\n            if (element.addEventListener) {\n                element.addEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.attachEvent(\"on\" + type, fn);\n            }\n            return function() {\n                qq(element).detach(type, fn);\n            };\n        },\n\n        detach: function(type, fn) {\n            if (element.removeEventListener) {\n                element.removeEventListener(type, fn, false);\n            } else if (element.attachEvent) {\n                element.detachEvent(\"on\" + type, fn);\n            }\n            return this;\n        },\n\n        contains: function(descendant) {\n            // The [W3C spec](http://www.w3.org/TR/domcore/#dom-node-contains)\n            // says a `null` (or ostensibly `undefined`) parameter\n            // passed into `Node.contains` should result in a false return value.\n            // IE7 throws an exception if the parameter is `undefined` though.\n            if (!descendant) {\n                return false;\n            }\n\n            // compareposition returns false in this case\n            if (element === descendant) {\n                return true;\n            }\n\n            if (element.contains) {\n                return element.contains(descendant);\n            } else {\n                /*jslint bitwise: true*/\n                return !!(descendant.compareDocumentPosition(element) & 8);\n            }\n        },\n\n        /**\n         * Insert this element before elementB.\n         */\n        insertBefore: function(elementB) {\n            elementB.parentNode.insertBefore(element, elementB);\n            return this;\n        },\n\n        remove: function() {\n            element.parentNode.removeChild(element);\n            return this;\n        },\n\n        /**\n         * Sets styles for an element.\n         * Fixes opacity in IE6-8.\n         */\n        css: function(styles) {\n            /*jshint eqnull: true*/\n            if (element.style == null) {\n                throw new qq.Error(\"Can't apply style to node as it is not on the HTMLElement prototype chain!\");\n            }\n\n            /*jshint -W116*/\n            if (styles.opacity != null) {\n                if (typeof element.style.opacity !== \"string\" && typeof (element.filters) !== \"undefined\") {\n                    styles.filter = \"alpha(opacity=\" + Math.round(100 * styles.opacity) + \")\";\n                }\n            }\n            qq.extend(element.style, styles);\n\n            return this;\n        },\n\n        hasClass: function(name, considerParent) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            return re.test(element.className) || !!(considerParent && re.test(element.parentNode.className));\n        },\n\n        addClass: function(name) {\n            if (!qq(element).hasClass(name)) {\n                element.className += \" \" + name;\n            }\n            return this;\n        },\n\n        removeClass: function(name) {\n            var re = new RegExp(\"(^| )\" + name + \"( |$)\");\n            element.className = element.className.replace(re, \" \").replace(/^\\s+|\\s+$/g, \"\");\n            return this;\n        },\n\n        getByClass: function(className, first) {\n            var candidates,\n                result = [];\n\n            if (first && element.querySelector) {\n                return element.querySelector(\".\" + className);\n            }\n            else if (element.querySelectorAll) {\n                return element.querySelectorAll(\".\" + className);\n            }\n\n            candidates = element.getElementsByTagName(\"*\");\n\n            qq.each(candidates, function(idx, val) {\n                if (qq(val).hasClass(className)) {\n                    result.push(val);\n                }\n            });\n            return first ? result[0] : result;\n        },\n\n        getFirstByClass: function(className) {\n            return qq(element).getByClass(className, true);\n        },\n\n        children: function() {\n            var children = [],\n                child = element.firstChild;\n\n            while (child) {\n                if (child.nodeType === 1) {\n                    children.push(child);\n                }\n                child = child.nextSibling;\n            }\n\n            return children;\n        },\n\n        setText: function(text) {\n            element.innerText = text;\n            element.textContent = text;\n            return this;\n        },\n\n        clearText: function() {\n            return qq(element).setText(\"\");\n        },\n\n        // Returns true if the attribute exists on the element\n        // AND the value of the attribute is NOT \"false\" (case-insensitive)\n        hasAttribute: function(attrName) {\n            var attrVal;\n\n            if (element.hasAttribute) {\n\n                if (!element.hasAttribute(attrName)) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(element.getAttribute(attrName)) == null;\n            }\n            else {\n                attrVal = element[attrName];\n\n                if (attrVal === undefined) {\n                    return false;\n                }\n\n                /*jshint -W116*/\n                return (/^false$/i).exec(attrVal) == null;\n            }\n        }\n    };\n};\n\n(function() {\n    \"use strict\";\n\n    qq.canvasToBlob = function(canvas, mime, quality) {\n        return qq.dataUriToBlob(canvas.toDataURL(mime, quality));\n    };\n\n    qq.dataUriToBlob = function(dataUri) {\n        var arrayBuffer, byteString,\n            createBlob = function(data, mime) {\n                var BlobBuilder = window.BlobBuilder ||\n                        window.WebKitBlobBuilder ||\n                        window.MozBlobBuilder ||\n                        window.MSBlobBuilder,\n                    blobBuilder = BlobBuilder && new BlobBuilder();\n\n                if (blobBuilder) {\n                    blobBuilder.append(data);\n                    return blobBuilder.getBlob(mime);\n                }\n                else {\n                    return new Blob([data], {type: mime});\n                }\n            },\n            intArray, mimeString;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return createBlob(arrayBuffer, mimeString);\n    };\n\n    qq.log = function(message, level) {\n        if (window.console) {\n            if (!level || level === \"info\") {\n                window.console.log(message);\n            }\n            else\n            {\n                if (window.console[level]) {\n                    window.console[level](message);\n                }\n                else {\n                    window.console.log(\"<\" + level + \"> \" + message);\n                }\n            }\n        }\n    };\n\n    qq.isObject = function(variable) {\n        return variable && !variable.nodeType && Object.prototype.toString.call(variable) === \"[object Object]\";\n    };\n\n    qq.isFunction = function(variable) {\n        return typeof (variable) === \"function\";\n    };\n\n    /**\n     * Check the type of a value.  Is it an \"array\"?\n     *\n     * @param value value to test.\n     * @returns true if the value is an array or associated with an `ArrayBuffer`\n     */\n    qq.isArray = function(value) {\n        return Object.prototype.toString.call(value) === \"[object Array]\" ||\n            (value && window.ArrayBuffer && value.buffer && value.buffer.constructor === ArrayBuffer);\n    };\n\n    // Looks for an object on a `DataTransfer` object that is associated with drop events when utilizing the Filesystem API.\n    qq.isItemList = function(maybeItemList) {\n        return Object.prototype.toString.call(maybeItemList) === \"[object DataTransferItemList]\";\n    };\n\n    // Looks for an object on a `NodeList` or an `HTMLCollection`|`HTMLFormElement`|`HTMLSelectElement`\n    // object that is associated with collections of Nodes.\n    qq.isNodeList = function(maybeNodeList) {\n        return Object.prototype.toString.call(maybeNodeList) === \"[object NodeList]\" ||\n            // If `HTMLCollection` is the actual type of the object, we must determine this\n            // by checking for expected properties/methods on the object\n            (maybeNodeList.item && maybeNodeList.namedItem);\n    };\n\n    qq.isString = function(maybeString) {\n        return Object.prototype.toString.call(maybeString) === \"[object String]\";\n    };\n\n    qq.trimStr = function(string) {\n        if (String.prototype.trim) {\n            return string.trim();\n        }\n\n        return string.replace(/^\\s+|\\s+$/g, \"\");\n    };\n\n    /**\n     * @param str String to format.\n     * @returns {string} A string, swapping argument values with the associated occurrence of {} in the passed string.\n     */\n    qq.format = function(str) {\n\n        var args =  Array.prototype.slice.call(arguments, 1),\n            newStr = str,\n            nextIdxToReplace = newStr.indexOf(\"{}\");\n\n        qq.each(args, function(idx, val) {\n            var strBefore = newStr.substring(0, nextIdxToReplace),\n                strAfter = newStr.substring(nextIdxToReplace + 2);\n\n            newStr = strBefore + val + strAfter;\n            nextIdxToReplace = newStr.indexOf(\"{}\", nextIdxToReplace + val.length);\n\n            // End the loop if we have run out of tokens (when the arguments exceed the # of tokens)\n            if (nextIdxToReplace < 0) {\n                return false;\n            }\n        });\n\n        return newStr;\n    };\n\n    qq.isFile = function(maybeFile) {\n        return window.File && Object.prototype.toString.call(maybeFile) === \"[object File]\";\n    };\n\n    qq.isFileList = function(maybeFileList) {\n        return window.FileList && Object.prototype.toString.call(maybeFileList) === \"[object FileList]\";\n    };\n\n    qq.isFileOrInput = function(maybeFileOrInput) {\n        return qq.isFile(maybeFileOrInput) || qq.isInput(maybeFileOrInput);\n    };\n\n    qq.isInput = function(maybeInput, notFile) {\n        var evaluateType = function(type) {\n            var normalizedType = type.toLowerCase();\n\n            if (notFile) {\n                return normalizedType !== \"file\";\n            }\n\n            return normalizedType === \"file\";\n        };\n\n        if (window.HTMLInputElement) {\n            if (Object.prototype.toString.call(maybeInput) === \"[object HTMLInputElement]\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n        if (maybeInput.tagName) {\n            if (maybeInput.tagName.toLowerCase() === \"input\") {\n                if (maybeInput.type && evaluateType(maybeInput.type)) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    };\n\n    qq.isBlob = function(maybeBlob) {\n        if (window.Blob && Object.prototype.toString.call(maybeBlob) === \"[object Blob]\") {\n            return true;\n        }\n    };\n\n    qq.isXhrUploadSupported = function() {\n        var input = document.createElement(\"input\");\n        input.type = \"file\";\n\n        return (\n            input.multiple !== undefined &&\n                typeof File !== \"undefined\" &&\n                typeof FormData !== \"undefined\" &&\n                typeof (qq.createXhrInstance()).upload !== \"undefined\");\n    };\n\n    // Fall back to ActiveX is native XHR is disabled (possible in any version of IE).\n    qq.createXhrInstance = function() {\n        if (window.XMLHttpRequest) {\n            return new XMLHttpRequest();\n        }\n\n        try {\n            return new ActiveXObject(\"MSXML2.XMLHTTP.3.0\");\n        }\n        catch (error) {\n            qq.log(\"Neither XHR or ActiveX are supported!\", \"error\");\n            return null;\n        }\n    };\n\n    qq.isFolderDropSupported = function(dataTransfer) {\n        return dataTransfer.items &&\n            dataTransfer.items.length > 0 &&\n            dataTransfer.items[0].webkitGetAsEntry;\n    };\n\n    qq.isFileChunkingSupported = function() {\n        return !qq.androidStock() && //Android's stock browser cannot upload Blobs correctly\n            qq.isXhrUploadSupported() &&\n            (File.prototype.slice !== undefined || File.prototype.webkitSlice !== undefined || File.prototype.mozSlice !== undefined);\n    };\n\n    qq.sliceBlob = function(fileOrBlob, start, end) {\n        var slicer = fileOrBlob.slice || fileOrBlob.mozSlice || fileOrBlob.webkitSlice;\n\n        return slicer.call(fileOrBlob, start, end);\n    };\n\n    qq.arrayBufferToHex = function(buffer) {\n        var bytesAsHex = \"\",\n            bytes = new Uint8Array(buffer);\n\n        qq.each(bytes, function(idx, byt) {\n            var byteAsHexStr = byt.toString(16);\n\n            if (byteAsHexStr.length < 2) {\n                byteAsHexStr = \"0\" + byteAsHexStr;\n            }\n\n            bytesAsHex += byteAsHexStr;\n        });\n\n        return bytesAsHex;\n    };\n\n    qq.readBlobToHex = function(blob, startOffset, length) {\n        var initialBlob = qq.sliceBlob(blob, startOffset, startOffset + length),\n            fileReader = new FileReader(),\n            promise = new qq.Promise();\n\n        fileReader.onload = function() {\n            promise.success(qq.arrayBufferToHex(fileReader.result));\n        };\n\n        fileReader.onerror = promise.failure;\n\n        fileReader.readAsArrayBuffer(initialBlob);\n\n        return promise;\n    };\n\n    qq.extend = function(first, second, extendNested) {\n        qq.each(second, function(prop, val) {\n            if (extendNested && qq.isObject(val)) {\n                if (first[prop] === undefined) {\n                    first[prop] = {};\n                }\n                qq.extend(first[prop], val, true);\n            }\n            else {\n                first[prop] = val;\n            }\n        });\n\n        return first;\n    };\n\n    /**\n     * Allow properties in one object to override properties in another,\n     * keeping track of the original values from the target object.\n     *\n     * Note that the pre-overriden properties to be overriden by the source will be passed into the `sourceFn` when it is invoked.\n     *\n     * @param target Update properties in this object from some source\n     * @param sourceFn A function that, when invoked, will return properties that will replace properties with the same name in the target.\n     * @returns {object} The target object\n     */\n    qq.override = function(target, sourceFn) {\n        var super_ = {},\n            source = sourceFn(super_);\n\n        qq.each(source, function(srcPropName, srcPropVal) {\n            if (target[srcPropName] !== undefined) {\n                super_[srcPropName] = target[srcPropName];\n            }\n\n            target[srcPropName] = srcPropVal;\n        });\n\n        return target;\n    };\n\n    /**\n     * Searches for a given element (elt) in the array, returns -1 if it is not present.\n     */\n    qq.indexOf = function(arr, elt, from) {\n        if (arr.indexOf) {\n            return arr.indexOf(elt, from);\n        }\n\n        from = from || 0;\n        var len = arr.length;\n\n        if (from < 0) {\n            from += len;\n        }\n\n        for (; from < len; from += 1) {\n            if (arr.hasOwnProperty(from) && arr[from] === elt) {\n                return from;\n            }\n        }\n        return -1;\n    };\n\n    //this is a version 4 UUID\n    qq.getUniqueId = function() {\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n            /*jslint eqeq: true, bitwise: true*/\n            var r = Math.random() * 16 | 0, v = c == \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    };\n\n    //\n    // Browsers and platforms detection\n    qq.ie = function() {\n        return navigator.userAgent.indexOf(\"MSIE\") !== -1 ||\n            navigator.userAgent.indexOf(\"Trident\") !== -1;\n    };\n\n    qq.ie7 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 7\") !== -1;\n    };\n\n    qq.ie8 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 8\") !== -1;\n    };\n\n    qq.ie10 = function() {\n        return navigator.userAgent.indexOf(\"MSIE 10\") !== -1;\n    };\n\n    qq.ie11 = function() {\n        return qq.ie() && navigator.userAgent.indexOf(\"rv:11\") !== -1;\n    };\n\n    qq.edge = function() {\n        return navigator.userAgent.indexOf(\"Edge\") >= 0;\n    };\n\n    qq.safari = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Apple\") !== -1;\n    };\n\n    qq.chrome = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Google\") !== -1;\n    };\n\n    qq.opera = function() {\n        return navigator.vendor !== undefined && navigator.vendor.indexOf(\"Opera\") !== -1;\n    };\n\n    qq.firefox = function() {\n        return (!qq.edge() && !qq.ie11() && navigator.userAgent.indexOf(\"Mozilla\") !== -1 && navigator.vendor !== undefined && navigator.vendor === \"\");\n    };\n\n    qq.windows = function() {\n        return navigator.platform === \"Win32\";\n    };\n\n    qq.android = function() {\n        return navigator.userAgent.toLowerCase().indexOf(\"android\") !== -1;\n    };\n\n    // We need to identify the Android stock browser via the UA string to work around various bugs in this browser,\n    // such as the one that prevents a `Blob` from being uploaded.\n    qq.androidStock = function() {\n        return qq.android() && navigator.userAgent.toLowerCase().indexOf(\"chrome\") < 0;\n    };\n\n    qq.ios6 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 6_\") !== -1;\n    };\n\n    qq.ios7 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 7_\") !== -1;\n    };\n\n    qq.ios8 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_\") !== -1;\n    };\n\n    // iOS 8.0.0\n    qq.ios800 = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\" OS 8_0 \") !== -1;\n    };\n\n    qq.ios = function() {\n        /*jshint -W014 */\n        return navigator.userAgent.indexOf(\"iPad\") !== -1\n            || navigator.userAgent.indexOf(\"iPod\") !== -1\n            || navigator.userAgent.indexOf(\"iPhone\") !== -1;\n    };\n\n    qq.iosChrome = function() {\n        return qq.ios() && navigator.userAgent.indexOf(\"CriOS\") !== -1;\n    };\n\n    qq.iosSafari = function() {\n        return qq.ios() && !qq.iosChrome() && navigator.userAgent.indexOf(\"Safari\") !== -1;\n    };\n\n    qq.iosSafariWebView = function() {\n        return qq.ios() && !qq.iosChrome() && !qq.iosSafari();\n    };\n\n    //\n    // Events\n\n    qq.preventDefault = function(e) {\n        if (e.preventDefault) {\n            e.preventDefault();\n        } else {\n            e.returnValue = false;\n        }\n    };\n\n    /**\n     * Creates and returns element from html string\n     * Uses innerHTML to create an element\n     */\n    qq.toElement = (function() {\n        var div = document.createElement(\"div\");\n        return function(html) {\n            div.innerHTML = html;\n            var element = div.firstChild;\n            div.removeChild(element);\n            return element;\n        };\n    }());\n\n    //key and value are passed to callback for each entry in the iterable item\n    qq.each = function(iterableItem, callback) {\n        var keyOrIndex, retVal;\n\n        if (iterableItem) {\n            // Iterate through [`Storage`](http://www.w3.org/TR/webstorage/#the-storage-interface) items\n            if (window.Storage && iterableItem.constructor === window.Storage) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(iterableItem.key(keyOrIndex), iterableItem.getItem(iterableItem.key(keyOrIndex)));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            // `DataTransferItemList` & `NodeList` objects are array-like and should be treated as arrays\n            // when iterating over items inside the object.\n            else if (qq.isArray(iterableItem) || qq.isItemList(iterableItem) || qq.isNodeList(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else if (qq.isString(iterableItem)) {\n                for (keyOrIndex = 0; keyOrIndex < iterableItem.length; keyOrIndex++) {\n                    retVal = callback(keyOrIndex, iterableItem.charAt(keyOrIndex));\n                    if (retVal === false) {\n                        break;\n                    }\n                }\n            }\n            else {\n                for (keyOrIndex in iterableItem) {\n                    if (Object.prototype.hasOwnProperty.call(iterableItem, keyOrIndex)) {\n                        retVal = callback(keyOrIndex, iterableItem[keyOrIndex]);\n                        if (retVal === false) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n    };\n\n    //include any args that should be passed to the new function after the context arg\n    qq.bind = function(oldFunc, context) {\n        if (qq.isFunction(oldFunc)) {\n            var args =  Array.prototype.slice.call(arguments, 2);\n\n            return function() {\n                var newArgs = qq.extend([], args);\n                if (arguments.length) {\n                    newArgs = newArgs.concat(Array.prototype.slice.call(arguments));\n                }\n                return oldFunc.apply(context, newArgs);\n            };\n        }\n\n        throw new Error(\"first parameter must be a function!\");\n    };\n\n    /**\n     * obj2url() takes a json-object as argument and generates\n     * a querystring. pretty much like jQuery.param()\n     *\n     * how to use:\n     *\n     *    `qq.obj2url({a:'b',c:'d'},'http://any.url/upload?otherParam=value');`\n     *\n     * will result in:\n     *\n     *    `http://any.url/upload?otherParam=value&a=b&c=d`\n     *\n     * @param  Object JSON-Object\n     * @param  String current querystring-part\n     * @return String encoded querystring\n     */\n    qq.obj2url = function(obj, temp, prefixDone) {\n        /*jshint laxbreak: true*/\n        var uristrings = [],\n            prefix = \"&\",\n            add = function(nextObj, i) {\n                var nextTemp = temp\n                    ? (/\\[\\]$/.test(temp)) // prevent double-encoding\n                    ? temp\n                    : temp + \"[\" + i + \"]\"\n                    : i;\n                if ((nextTemp !== \"undefined\") && (i !== \"undefined\")) {\n                    uristrings.push(\n                        (typeof nextObj === \"object\")\n                            ? qq.obj2url(nextObj, nextTemp, true)\n                            : (Object.prototype.toString.call(nextObj) === \"[object Function]\")\n                            ? encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj())\n                            : encodeURIComponent(nextTemp) + \"=\" + encodeURIComponent(nextObj)\n                    );\n                }\n            };\n\n        if (!prefixDone && temp) {\n            prefix = (/\\?/.test(temp)) ? (/\\?$/.test(temp)) ? \"\" : \"&\" : \"?\";\n            uristrings.push(temp);\n            uristrings.push(qq.obj2url(obj));\n        } else if ((Object.prototype.toString.call(obj) === \"[object Array]\") && (typeof obj !== \"undefined\")) {\n            qq.each(obj, function(idx, val) {\n                add(val, idx);\n            });\n        } else if ((typeof obj !== \"undefined\") && (obj !== null) && (typeof obj === \"object\")) {\n            qq.each(obj, function(prop, val) {\n                add(val, prop);\n            });\n        } else {\n            uristrings.push(encodeURIComponent(temp) + \"=\" + encodeURIComponent(obj));\n        }\n\n        if (temp) {\n            return uristrings.join(prefix);\n        } else {\n            return uristrings.join(prefix)\n                .replace(/^&/, \"\")\n                .replace(/%20/g, \"+\");\n        }\n    };\n\n    qq.obj2FormData = function(obj, formData, arrayKeyName) {\n        if (!formData) {\n            formData = new FormData();\n        }\n\n        qq.each(obj, function(key, val) {\n            key = arrayKeyName ? arrayKeyName + \"[\" + key + \"]\" : key;\n\n            if (qq.isObject(val)) {\n                qq.obj2FormData(val, formData, key);\n            }\n            else if (qq.isFunction(val)) {\n                formData.append(key, val());\n            }\n            else {\n                formData.append(key, val);\n            }\n        });\n\n        return formData;\n    };\n\n    qq.obj2Inputs = function(obj, form) {\n        var input;\n\n        if (!form) {\n            form = document.createElement(\"form\");\n        }\n\n        qq.obj2FormData(obj, {\n            append: function(key, val) {\n                input = document.createElement(\"input\");\n                input.setAttribute(\"name\", key);\n                input.setAttribute(\"value\", val);\n                form.appendChild(input);\n            }\n        });\n\n        return form;\n    };\n\n    /**\n     * Not recommended for use outside of Fine Uploader since this falls back to an unchecked eval if JSON.parse is not\n     * implemented.  For a more secure JSON.parse polyfill, use Douglas Crockford's json2.js.\n     */\n    qq.parseJson = function(json) {\n        /*jshint evil: true*/\n        if (window.JSON && qq.isFunction(JSON.parse)) {\n            return JSON.parse(json);\n        } else {\n            return eval(\"(\" + json + \")\");\n        }\n    };\n\n    /**\n     * Retrieve the extension of a file, if it exists.\n     *\n     * @param filename\n     * @returns {string || undefined}\n     */\n    qq.getExtension = function(filename) {\n        var extIdx = filename.lastIndexOf(\".\") + 1;\n\n        if (extIdx > 0) {\n            return filename.substr(extIdx, filename.length - extIdx);\n        }\n    };\n\n    qq.getFilename = function(blobOrFileInput) {\n        /*jslint regexp: true*/\n\n        if (qq.isInput(blobOrFileInput)) {\n            // get input value and remove path to normalize\n            return blobOrFileInput.value.replace(/.*(\\/|\\\\)/, \"\");\n        }\n        else if (qq.isFile(blobOrFileInput)) {\n            if (blobOrFileInput.fileName !== null && blobOrFileInput.fileName !== undefined) {\n                return blobOrFileInput.fileName;\n            }\n        }\n\n        return blobOrFileInput.name;\n    };\n\n    /**\n     * A generic module which supports object disposing in dispose() method.\n     * */\n    qq.DisposeSupport = function() {\n        var disposers = [];\n\n        return {\n            /** Run all registered disposers */\n            dispose: function() {\n                var disposer;\n                do {\n                    disposer = disposers.shift();\n                    if (disposer) {\n                        disposer();\n                    }\n                }\n                while (disposer);\n            },\n\n            /** Attach event handler and register de-attacher as a disposer */\n            attach: function() {\n                var args = arguments;\n                /*jslint undef:true*/\n                this.addDisposer(qq(args[0]).attach.apply(this, Array.prototype.slice.call(arguments, 1)));\n            },\n\n            /** Add disposer to the collection */\n            addDisposer: function(disposeFunction) {\n                disposers.push(disposeFunction);\n            }\n        };\n    };\n}());\n","/* globals define, module, global, qq */\n(function() {\n    \"use strict\";\n    if (typeof define === \"function\" && define.amd) {\n        define(function() {\n            return qq;\n        });\n    }\n    else if (typeof module !== \"undefined\" && module.exports) {\n        module.exports = qq;\n    }\n    else {\n        global.qq = qq;\n    }\n}());\n","/* globals qq */\n/**\n * Fine Uploader top-level Error container.  Inherits from `Error`.\n */\n(function() {\n    \"use strict\";\n\n    qq.Error = function(message) {\n        this.message = \"[Fine Uploader \" + qq.version + \"] \" + message;\n    };\n\n    qq.Error.prototype = new Error();\n}());\n","/*global qq */\nqq.version = \"5.16.0\";\n","/* globals qq */\nqq.supportedFeatures = (function() {\n    \"use strict\";\n\n    var supportsUploading,\n        supportsUploadingBlobs,\n        supportsFileDrop,\n        supportsAjaxFileUploading,\n        supportsFolderDrop,\n        supportsChunking,\n        supportsResume,\n        supportsUploadViaPaste,\n        supportsUploadCors,\n        supportsDeleteFileXdr,\n        supportsDeleteFileCorsXhr,\n        supportsDeleteFileCors,\n        supportsFolderSelection,\n        supportsImagePreviews,\n        supportsUploadProgress;\n\n    function testSupportsFileInputElement() {\n        var supported = true,\n            tempInput;\n\n        try {\n            tempInput = document.createElement(\"input\");\n            tempInput.type = \"file\";\n            qq(tempInput).hide();\n\n            if (tempInput.disabled) {\n                supported = false;\n            }\n        }\n        catch (ex) {\n            supported = false;\n        }\n\n        return supported;\n    }\n\n    //only way to test for complete Clipboard API support at this time\n    function isChrome14OrHigher() {\n        return (qq.chrome() || qq.opera()) &&\n            navigator.userAgent.match(/Chrome\\/[1][4-9]|Chrome\\/[2-9][0-9]/) !== undefined;\n    }\n\n    //Ensure we can send cross-origin `XMLHttpRequest`s\n    function isCrossOriginXhrSupported() {\n        if (window.XMLHttpRequest) {\n            var xhr = qq.createXhrInstance();\n\n            //Commonly accepted test for XHR CORS support.\n            return xhr.withCredentials !== undefined;\n        }\n\n        return false;\n    }\n\n    //Test for (terrible) cross-origin ajax transport fallback for IE9 and IE8\n    function isXdrSupported() {\n        return window.XDomainRequest !== undefined;\n    }\n\n    // CORS Ajax requests are supported if it is either possible to send credentialed `XMLHttpRequest`s,\n    // or if `XDomainRequest` is an available alternative.\n    function isCrossOriginAjaxSupported() {\n        if (isCrossOriginXhrSupported()) {\n            return true;\n        }\n\n        return isXdrSupported();\n    }\n\n    function isFolderSelectionSupported() {\n        // We know that folder selection is only supported in Chrome via this proprietary attribute for now\n        return document.createElement(\"input\").webkitdirectory !== undefined;\n    }\n\n    function isLocalStorageSupported() {\n        try {\n            return !!window.localStorage &&\n                // unpatched versions of IE10/11 have buggy impls of localStorage where setItem is a string\n                qq.isFunction(window.localStorage.setItem);\n        }\n        catch (error) {\n            // probably caught a security exception, so no localStorage for you\n            return false;\n        }\n    }\n\n    function isDragAndDropSupported() {\n        var span = document.createElement(\"span\");\n\n        return (\"draggable\" in span || (\"ondragstart\" in span && \"ondrop\" in span)) &&\n            !qq.android() && !qq.ios();\n    }\n\n    supportsUploading = testSupportsFileInputElement();\n\n    supportsAjaxFileUploading = supportsUploading && qq.isXhrUploadSupported();\n\n    supportsUploadingBlobs = supportsAjaxFileUploading && !qq.androidStock();\n\n    supportsFileDrop = supportsAjaxFileUploading && isDragAndDropSupported();\n\n    // adapted from https://stackoverflow.com/a/23278460/486979\n    supportsFolderDrop = supportsFileDrop && (function() {\n        var input = document.createElement(\"input\");\n\n        input.type = \"file\";\n        return !!(\"webkitdirectory\" in (input || document.querySelectorAll(\"input[type=file]\")[0]));\n    }());\n\n    supportsChunking = supportsAjaxFileUploading && qq.isFileChunkingSupported();\n\n    supportsResume = supportsAjaxFileUploading && supportsChunking && isLocalStorageSupported();\n\n    supportsUploadViaPaste = supportsAjaxFileUploading && isChrome14OrHigher();\n\n    supportsUploadCors = supportsUploading && (window.postMessage !== undefined || supportsAjaxFileUploading);\n\n    supportsDeleteFileCorsXhr = isCrossOriginXhrSupported();\n\n    supportsDeleteFileXdr = isXdrSupported();\n\n    supportsDeleteFileCors = isCrossOriginAjaxSupported();\n\n    supportsFolderSelection = isFolderSelectionSupported();\n\n    supportsImagePreviews = supportsAjaxFileUploading && window.FileReader !== undefined;\n\n    supportsUploadProgress = (function() {\n        if (supportsAjaxFileUploading) {\n            return !qq.androidStock() && !qq.iosChrome();\n        }\n        return false;\n    }());\n\n    return {\n        ajaxUploading: supportsAjaxFileUploading,\n        blobUploading: supportsUploadingBlobs,\n        canDetermineSize: supportsAjaxFileUploading,\n        chunking: supportsChunking,\n        deleteFileCors: supportsDeleteFileCors,\n        deleteFileCorsXdr: supportsDeleteFileXdr, //NOTE: will also return true in IE10, where XDR is also supported\n        deleteFileCorsXhr: supportsDeleteFileCorsXhr,\n        dialogElement: !!window.HTMLDialogElement,\n        fileDrop: supportsFileDrop,\n        folderDrop: supportsFolderDrop,\n        folderSelection: supportsFolderSelection,\n        imagePreviews: supportsImagePreviews,\n        imageValidation: supportsImagePreviews,\n        itemSizeValidation: supportsAjaxFileUploading,\n        pause: supportsChunking,\n        progressBar: supportsUploadProgress,\n        resume: supportsResume,\n        scaling: supportsImagePreviews && supportsUploadingBlobs,\n        tiffPreviews: qq.safari(), // Not the best solution, but simple and probably accurate enough (for now)\n        unlimitedScaledImageSize: !qq.ios(), // false simply indicates that there is some known limit\n        uploading: supportsUploading,\n        uploadCors: supportsUploadCors,\n        uploadCustomHeaders: supportsAjaxFileUploading,\n        uploadNonMultipart: supportsAjaxFileUploading,\n        uploadViaPaste: supportsUploadViaPaste\n    };\n\n}());\n","/*globals qq*/\n\n// Is the passed object a promise instance?\nqq.isGenericPromise = function(maybePromise) {\n    \"use strict\";\n    return !!(maybePromise && maybePromise.then && qq.isFunction(maybePromise.then));\n};\n\nqq.Promise = function() {\n    \"use strict\";\n\n    var successArgs, failureArgs,\n        successCallbacks = [],\n        failureCallbacks = [],\n        doneCallbacks = [],\n        state = 0;\n\n    qq.extend(this, {\n        then: function(onSuccess, onFailure) {\n            if (state === 0) {\n                if (onSuccess) {\n                    successCallbacks.push(onSuccess);\n                }\n                if (onFailure) {\n                    failureCallbacks.push(onFailure);\n                }\n            }\n            else if (state === -1) {\n                onFailure && onFailure.apply(null, failureArgs);\n            }\n            else if (onSuccess) {\n                onSuccess.apply(null, successArgs);\n            }\n\n            return this;\n        },\n\n        done: function(callback) {\n            if (state === 0) {\n                doneCallbacks.push(callback);\n            }\n            else {\n                callback.apply(null, failureArgs === undefined ? successArgs : failureArgs);\n            }\n\n            return this;\n        },\n\n        success: function() {\n            state = 1;\n            successArgs = arguments;\n\n            if (successCallbacks.length) {\n                qq.each(successCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, successArgs);\n                });\n            }\n\n            return this;\n        },\n\n        failure: function() {\n            state = -1;\n            failureArgs = arguments;\n\n            if (failureCallbacks.length) {\n                qq.each(failureCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            if (doneCallbacks.length) {\n                qq.each(doneCallbacks, function(idx, callback) {\n                    callback.apply(null, failureArgs);\n                });\n            }\n\n            return this;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Placeholder for a Blob that will be generated on-demand.\n *\n * @param referenceBlob Parent of the generated blob\n * @param onCreate Function to invoke when the blob must be created.  Must be promissory.\n * @constructor\n */\nqq.BlobProxy = function(referenceBlob, onCreate) {\n    \"use strict\";\n\n    qq.extend(this, {\n        referenceBlob: referenceBlob,\n\n        create: function() {\n            return onCreate(referenceBlob);\n        }\n    });\n};\n","/*globals qq*/\n\n/**\n * This module represents an upload or \"Select File(s)\" button.  It's job is to embed an opaque `<input type=\"file\">`\n * element as a child of a provided \"container\" element.  This \"container\" element (`options.element`) is used to provide\n * a custom style for the `<input type=\"file\">` element.  The ability to change the style of the container element is also\n * provided here by adding CSS classes to the container on hover/focus.\n *\n * TODO Eliminate the mouseover and mouseout event handlers since the :hover CSS pseudo-class should now be\n * available on all supported browsers.\n *\n * @param o Options to override the default values\n */\nqq.UploadButton = function(o) {\n    \"use strict\";\n\n    var self = this,\n\n        disposeSupport = new qq.DisposeSupport(),\n\n        options = {\n            // Corresponds to the `accept` attribute on the associated `<input type=\"file\">`\n            acceptFiles: null,\n\n            // \"Container\" element\n            element: null,\n\n            focusClass: \"qq-upload-button-focus\",\n\n            // A true value allows folders to be selected, if supported by the UA\n            folders: false,\n\n            // **This option will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n            hoverClass: \"qq-upload-button-hover\",\n\n            ios8BrowserCrashWorkaround: false,\n\n            // If true adds `multiple` attribute to `<input type=\"file\">`\n            multiple: false,\n\n            // `name` attribute of `<input type=\"file\">`\n            name: \"qqfile\",\n\n            // Called when the browser invokes the onchange handler on the `<input type=\"file\">`\n            onChange: function(input) {},\n\n            title: null\n        },\n        input, buttonId;\n\n    // Overrides any of the default option values with any option values passed in during construction.\n    qq.extend(options, o);\n\n    buttonId = qq.getUniqueId();\n\n    // Embed an opaque `<input type=\"file\">` element as a child of `options.element`.\n    function createInput() {\n        var input = document.createElement(\"input\");\n\n        input.setAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME, buttonId);\n        input.setAttribute(\"title\", options.title);\n\n        self.setMultiple(options.multiple, input);\n\n        if (options.folders && qq.supportedFeatures.folderSelection) {\n            // selecting directories is only possible in Chrome now, via a vendor-specific prefixed attribute\n            input.setAttribute(\"webkitdirectory\", \"\");\n        }\n\n        if (options.acceptFiles) {\n            input.setAttribute(\"accept\", options.acceptFiles);\n        }\n\n        input.setAttribute(\"type\", \"file\");\n        input.setAttribute(\"name\", options.name);\n\n        qq(input).css({\n            position: \"absolute\",\n            // in Opera only 'browse' button\n            // is clickable and it is located at\n            // the right side of the input\n            right: 0,\n            top: 0,\n            fontFamily: \"Arial\",\n            // It's especially important to make this an arbitrarily large value\n            // to ensure the rendered input button in IE takes up the entire\n            // space of the container element.  Otherwise, the left side of the\n            // button will require a double-click to invoke the file chooser.\n            // In other browsers, this might cause other issues, so a large font-size\n            // is only used in IE.  There is a bug in IE8 where the opacity style is  ignored\n            // in some cases when the font-size is large.  So, this workaround is not applied\n            // to IE8.\n            fontSize: qq.ie() && !qq.ie8() ? \"3500px\" : \"118px\",\n            margin: 0,\n            padding: 0,\n            cursor: \"pointer\",\n            opacity: 0\n        });\n\n        // Setting the file input's height to 100% in IE7 causes\n        // most of the visible button to be unclickable.\n        !qq.ie7() && qq(input).css({height: \"100%\"});\n\n        options.element.appendChild(input);\n\n        disposeSupport.attach(input, \"change\", function() {\n            options.onChange(input);\n        });\n\n        // **These event handlers will be removed** in the future as the :hover CSS pseudo-class is available on all supported browsers\n        disposeSupport.attach(input, \"mouseover\", function() {\n            qq(options.element).addClass(options.hoverClass);\n        });\n        disposeSupport.attach(input, \"mouseout\", function() {\n            qq(options.element).removeClass(options.hoverClass);\n        });\n\n        disposeSupport.attach(input, \"focus\", function() {\n            qq(options.element).addClass(options.focusClass);\n        });\n        disposeSupport.attach(input, \"blur\", function() {\n            qq(options.element).removeClass(options.focusClass);\n        });\n\n        return input;\n    }\n\n    // Make button suitable container for input\n    qq(options.element).css({\n        position: \"relative\",\n        overflow: \"hidden\",\n        // Make sure browse button is in the right side in Internet Explorer\n        direction: \"ltr\"\n    });\n\n    // Exposed API\n    qq.extend(this, {\n        getInput: function() {\n            return input;\n        },\n\n        getButtonId: function() {\n            return buttonId;\n        },\n\n        setMultiple: function(isMultiple, optInput) {\n            var input = optInput || this.getInput();\n\n            // Temporary workaround for bug in in iOS8 UIWebView that causes the browser to crash\n            // before the file chooser appears if the file input doesn't contain a multiple attribute.\n            // See #1283.\n            if (options.ios8BrowserCrashWorkaround && qq.ios8() && (qq.iosChrome() || qq.iosSafariWebView())) {\n                input.setAttribute(\"multiple\", \"\");\n            }\n\n            else {\n                if (isMultiple) {\n                    input.setAttribute(\"multiple\", \"\");\n                }\n                else {\n                    input.removeAttribute(\"multiple\");\n                }\n            }\n        },\n\n        setAcceptFiles: function(acceptFiles) {\n            if (acceptFiles !== options.acceptFiles) {\n                input.setAttribute(\"accept\", acceptFiles);\n            }\n        },\n\n        reset: function() {\n            if (input.parentNode) {\n                qq(input).remove();\n            }\n\n            qq(options.element).removeClass(options.focusClass);\n            input = null;\n            input = createInput();\n        }\n    });\n\n    input = createInput();\n};\n\nqq.UploadButton.BUTTON_ID_ATTR_NAME = \"qq-button-id\";\n","/*globals qq */\nqq.UploadData = function(uploaderProxy) {\n    \"use strict\";\n\n    var data = [],\n        byUuid = {},\n        byStatus = {},\n        byProxyGroupId = {},\n        byBatchId = {};\n\n    function getDataByIds(idOrIds) {\n        if (qq.isArray(idOrIds)) {\n            var entries = [];\n\n            qq.each(idOrIds, function(idx, id) {\n                entries.push(data[id]);\n            });\n\n            return entries;\n        }\n\n        return data[idOrIds];\n    }\n\n    function getDataByUuids(uuids) {\n        if (qq.isArray(uuids)) {\n            var entries = [];\n\n            qq.each(uuids, function(idx, uuid) {\n                entries.push(data[byUuid[uuid]]);\n            });\n\n            return entries;\n        }\n\n        return data[byUuid[uuids]];\n    }\n\n    function getDataByStatus(status) {\n        var statusResults = [],\n            statuses = [].concat(status);\n\n        qq.each(statuses, function(index, statusEnum) {\n            var statusResultIndexes = byStatus[statusEnum];\n\n            if (statusResultIndexes !== undefined) {\n                qq.each(statusResultIndexes, function(i, dataIndex) {\n                    statusResults.push(data[dataIndex]);\n                });\n            }\n        });\n\n        return statusResults;\n    }\n\n    qq.extend(this, {\n        /**\n         * Adds a new file to the data cache for tracking purposes.\n         *\n         * @param spec Data that describes this file.  Possible properties are:\n         *\n         * - uuid: Initial UUID for this file.\n         * - name: Initial name of this file.\n         * - size: Size of this file, omit if this cannot be determined\n         * - status: Initial `qq.status` for this file.  Omit for `qq.status.SUBMITTING`.\n         * - batchId: ID of the batch this file belongs to\n         * - proxyGroupId: ID of the proxy group associated with this file\n         * - onBeforeStatusChange(fileId): callback that is executed before the status change is broadcast\n         *\n         * @returns {number} Internal ID for this file.\n         */\n        addFile: function(spec) {\n            var status = spec.status || qq.status.SUBMITTING,\n                id = data.push({\n                    name: spec.name,\n                    originalName: spec.name,\n                    uuid: spec.uuid,\n                    size: spec.size == null ? -1 : spec.size,\n                    status: status,\n                    file: spec.file\n                }) - 1;\n\n            if (spec.batchId) {\n                data[id].batchId = spec.batchId;\n\n                if (byBatchId[spec.batchId] === undefined) {\n                    byBatchId[spec.batchId] = [];\n                }\n                byBatchId[spec.batchId].push(id);\n            }\n\n            if (spec.proxyGroupId) {\n                data[id].proxyGroupId = spec.proxyGroupId;\n\n                if (byProxyGroupId[spec.proxyGroupId] === undefined) {\n                    byProxyGroupId[spec.proxyGroupId] = [];\n                }\n                byProxyGroupId[spec.proxyGroupId].push(id);\n            }\n\n            data[id].id = id;\n            byUuid[spec.uuid] = id;\n\n            if (byStatus[status] === undefined) {\n                byStatus[status] = [];\n            }\n            byStatus[status].push(id);\n\n            spec.onBeforeStatusChange && spec.onBeforeStatusChange(id);\n            uploaderProxy.onStatusChange(id, null, status);\n\n            return id;\n        },\n\n        retrieve: function(optionalFilter) {\n            if (qq.isObject(optionalFilter) && data.length)  {\n                if (optionalFilter.id !== undefined) {\n                    return getDataByIds(optionalFilter.id);\n                }\n\n                else if (optionalFilter.uuid !== undefined) {\n                    return getDataByUuids(optionalFilter.uuid);\n                }\n\n                else if (optionalFilter.status) {\n                    return getDataByStatus(optionalFilter.status);\n                }\n            }\n            else {\n                return qq.extend([], data, true);\n            }\n        },\n\n        removeFileRef: function(id) {\n            var record = getDataByIds(id);\n\n            if (record) {\n                delete record.file;\n            }\n        },\n\n        reset: function() {\n            data = [];\n            byUuid = {};\n            byStatus = {};\n            byBatchId = {};\n        },\n\n        setStatus: function(id, newStatus) {\n            var oldStatus = data[id].status,\n                byStatusOldStatusIndex = qq.indexOf(byStatus[oldStatus], id);\n\n            byStatus[oldStatus].splice(byStatusOldStatusIndex, 1);\n\n            data[id].status = newStatus;\n\n            if (byStatus[newStatus] === undefined) {\n                byStatus[newStatus] = [];\n            }\n            byStatus[newStatus].push(id);\n\n            uploaderProxy.onStatusChange(id, oldStatus, newStatus);\n        },\n\n        uuidChanged: function(id, newUuid) {\n            var oldUuid = data[id].uuid;\n\n            data[id].uuid = newUuid;\n            byUuid[newUuid] = id;\n            delete byUuid[oldUuid];\n        },\n\n        updateName: function(id, newName) {\n            data[id].name = newName;\n        },\n\n        updateSize: function(id, newSize) {\n            data[id].size = newSize;\n        },\n\n        // Only applicable if this file has a parent that we may want to reference later.\n        setParentId: function(targetId, parentId) {\n            data[targetId].parentId = parentId;\n        },\n\n        getIdsInProxyGroup: function(id) {\n            var proxyGroupId = data[id].proxyGroupId;\n\n            if (proxyGroupId) {\n                return byProxyGroupId[proxyGroupId];\n            }\n            return [];\n        },\n\n        getIdsInBatch: function(id) {\n            var batchId = data[id].batchId;\n\n            return byBatchId[batchId];\n        }\n    });\n};\n\nqq.status = {\n    SUBMITTING: \"submitting\",\n    SUBMITTED: \"submitted\",\n    REJECTED: \"rejected\",\n    QUEUED: \"queued\",\n    CANCELED: \"canceled\",\n    PAUSED: \"paused\",\n    UPLOADING: \"uploading\",\n    UPLOAD_FINALIZING: \"upload finalizing\",\n    UPLOAD_RETRYING: \"retrying upload\",\n    UPLOAD_SUCCESSFUL: \"upload successful\",\n    UPLOAD_FAILED: \"upload failed\",\n    DELETE_FAILED: \"delete failed\",\n    DELETING: \"deleting\",\n    DELETED: \"deleted\"\n};\n","/*globals qq*/\n/**\n * Defines the public API for FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.basePublicApi = {\n        // DEPRECATED - TODO REMOVE IN NEXT MAJOR RELEASE (replaced by addFiles)\n        addBlobs: function(blobDataOrArray, params, endpoint) {\n            this.addFiles(blobDataOrArray, params, endpoint);\n        },\n\n        addInitialFiles: function(cannedFileList) {\n            var self = this;\n\n            qq.each(cannedFileList, function(index, cannedFile) {\n                self._addCannedFile(cannedFile);\n            });\n        },\n\n        addFiles: function(data, params, endpoint) {\n            this._maybeHandleIos8SafariWorkaround();\n\n            var batchId = this._storedIds.length === 0 ? qq.getUniqueId() : this._currentBatchId,\n\n                processBlob = qq.bind(function(blob) {\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processBlobData = qq.bind(function(blobData) {\n                    this._handleNewFile(blobData, batchId, verifiedFiles);\n                }, this),\n\n                processCanvas = qq.bind(function(canvas) {\n                    var blob = qq.canvasToBlob(canvas);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: this._options.blobs.defaultName + \".png\"\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processCanvasData = qq.bind(function(canvasData) {\n                    var normalizedQuality = canvasData.quality && canvasData.quality / 100,\n                        blob = qq.canvasToBlob(canvasData.canvas, canvasData.type, normalizedQuality);\n\n                    this._handleNewFile({\n                        blob: blob,\n                        name: canvasData.name\n                    }, batchId, verifiedFiles);\n                }, this),\n\n                processFileOrInput = qq.bind(function(fileOrInput) {\n                    if (qq.isInput(fileOrInput) && qq.supportedFeatures.ajaxUploading) {\n                        var files = Array.prototype.slice.call(fileOrInput.files),\n                            self = this;\n\n                        qq.each(files, function(idx, file) {\n                            self._handleNewFile(file, batchId, verifiedFiles);\n                        });\n                    }\n                    else {\n                        this._handleNewFile(fileOrInput, batchId, verifiedFiles);\n                    }\n                }, this),\n\n                normalizeData = function() {\n                    if (qq.isFileList(data)) {\n                        data = Array.prototype.slice.call(data);\n                    }\n                    data = [].concat(data);\n                },\n\n                self = this,\n                verifiedFiles = [];\n\n            this._currentBatchId = batchId;\n\n            if (data) {\n                normalizeData();\n\n                qq.each(data, function(idx, fileContainer) {\n                    if (qq.isFileOrInput(fileContainer)) {\n                        processFileOrInput(fileContainer);\n                    }\n                    else if (qq.isBlob(fileContainer)) {\n                        processBlob(fileContainer);\n                    }\n                    else if (qq.isObject(fileContainer)) {\n                        if (fileContainer.blob && fileContainer.name) {\n                            processBlobData(fileContainer);\n                        }\n                        else if (fileContainer.canvas && fileContainer.name) {\n                            processCanvasData(fileContainer);\n                        }\n                    }\n                    else if (fileContainer.tagName && fileContainer.tagName.toLowerCase() === \"canvas\") {\n                        processCanvas(fileContainer);\n                    }\n                    else {\n                        self.log(fileContainer + \" is not a valid file container!  Ignoring!\", \"warn\");\n                    }\n                });\n\n                this.log(\"Received \" + verifiedFiles.length + \" files.\");\n                this._prepareItemsForUpload(verifiedFiles, params, endpoint);\n            }\n        },\n\n        cancel: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (uploadData && uploadData.status === qq.status.UPLOAD_FINALIZING) {\n              this.log(qq.format(\"Ignoring cancel for file ID {} ({}).  Finalizing upload.\", id, this.getName(id)), \"error\");\n            }\n            else {\n                this._handler.cancel(id);\n            }\n        },\n\n        cancelAll: function() {\n            var storedIdsCopy = [],\n                self = this;\n\n            qq.extend(storedIdsCopy, this._storedIds);\n            qq.each(storedIdsCopy, function(idx, storedFileId) {\n                self.cancel(storedFileId);\n            });\n\n            this._handler.cancelAll();\n        },\n\n        clearStoredFiles: function() {\n            this._storedIds = [];\n        },\n\n        continueUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            if (uploadData.status === qq.status.PAUSED) {\n                this.log(qq.format(\"Paused file ID {} ({}) will be continued.  Not paused.\", id, this.getName(id)));\n                this._uploadFile(id);\n                return true;\n            }\n            else {\n                this.log(qq.format(\"Ignoring continue for file ID {} ({}).  Not paused.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        deleteFile: function(id) {\n            return this._onSubmitDelete(id);\n        },\n\n        // TODO document?\n        doesExist: function(fileOrBlobId) {\n            return this._handler.isValid(fileOrBlobId);\n        },\n\n        // Generate a variable size thumbnail on an img or canvas,\n        // returning a promise that is fulfilled when the attempt completes.\n        // Thumbnail can either be based off of a URL for an image returned\n        // by the server in the upload response, or the associated `Blob`.\n        drawThumbnail: function(fileId, imgOrCanvas, maxSize, fromServer, customResizeFunction) {\n            var promiseToReturn = new qq.Promise(),\n                fileOrUrl, options;\n\n            if (this._imageGenerator) {\n                fileOrUrl = this._thumbnailUrls[fileId];\n                options = {\n                    customResizeFunction: customResizeFunction,\n                    maxSize: maxSize > 0 ? maxSize : null,\n                    scale: maxSize > 0\n                };\n\n                // If client-side preview generation is possible\n                // and we are not specifically looking for the image URl returned by the server...\n                if (!fromServer && qq.supportedFeatures.imagePreviews) {\n                    fileOrUrl = this.getFile(fileId);\n                }\n\n                /* jshint eqeqeq:false,eqnull:true */\n                if (fileOrUrl == null) {\n                    promiseToReturn.failure({container: imgOrCanvas, error: \"File or URL not found.\"});\n                }\n                else {\n                    this._imageGenerator.generate(fileOrUrl, imgOrCanvas, options).then(\n                        function success(modifiedContainer) {\n                            promiseToReturn.success(modifiedContainer);\n                        },\n\n                        function failure(container, reason) {\n                            promiseToReturn.failure({container: container, error: reason || \"Problem generating thumbnail\"});\n                        }\n                    );\n                }\n            }\n            else {\n                promiseToReturn.failure({container: imgOrCanvas, error: \"Missing image generator module\"});\n            }\n\n            return promiseToReturn;\n        },\n\n        getButton: function(fileId) {\n            return this._getButton(this._buttonIdsForFileIds[fileId]);\n        },\n\n        getEndpoint: function(fileId) {\n            return this._endpointStore.get(fileId);\n        },\n\n        getFile: function(fileOrBlobId) {\n            var file = this._handler.getFile(fileOrBlobId);\n            var uploadDataRecord;\n\n            if (!file) {\n                uploadDataRecord = this._uploadData.retrieve({id: fileOrBlobId});\n\n                if (uploadDataRecord) {\n                    file = uploadDataRecord.file;\n                }\n            }\n\n            return file || null;\n        },\n\n        getInProgress: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED\n                ]\n            }).length;\n        },\n\n        getName: function(id) {\n            return this._uploadData.retrieve({id: id}).name;\n        },\n\n        // Parent ID for a specific file, or null if this is the parent, or if it has no parent.\n        getParentId: function(id) {\n            var uploadDataEntry = this.getUploads({id: id}),\n                parentId = null;\n\n            if (uploadDataEntry) {\n                if (uploadDataEntry.parentId !== undefined) {\n                    parentId = uploadDataEntry.parentId;\n                }\n            }\n\n            return parentId;\n        },\n\n        getResumableFilesData: function() {\n            return this._handler.getResumableFilesData();\n        },\n\n        getSize: function(id) {\n            return this._uploadData.retrieve({id: id}).size;\n        },\n\n        getNetUploads: function() {\n            return this._netUploaded;\n        },\n\n        getRemainingAllowedItems: function() {\n            var allowedItems = this._currentItemLimit;\n\n            if (allowedItems > 0) {\n                return allowedItems - this._netUploadedOrQueued;\n            }\n\n            return null;\n        },\n\n        getUploads: function(optionalFilter) {\n            return this._uploadData.retrieve(optionalFilter);\n        },\n\n        getUuid: function(id) {\n            return this._uploadData.retrieve({id: id}).uuid;\n        },\n\n        isResumable: function(id) {\n            return this._handler.hasResumeRecord(id);\n        },\n\n        log: function(str, level) {\n            if (this._options.debug && (!level || level === \"info\")) {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str);\n            }\n            else if (level && level !== \"info\") {\n                qq.log(\"[Fine Uploader \" + qq.version + \"] \" + str, level);\n\n            }\n        },\n\n        pauseUpload: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            if (!qq.supportedFeatures.pause || !this._options.chunking.enabled) {\n                return false;\n            }\n\n            // Pause only really makes sense if the file is uploading or retrying\n            if (qq.indexOf([qq.status.UPLOADING, qq.status.UPLOAD_RETRYING], uploadData.status) >= 0) {\n                if (this._handler.pause(id)) {\n                    this._uploadData.setStatus(id, qq.status.PAUSED);\n                    return true;\n                }\n                else {\n                    this.log(qq.format(\"Unable to pause file ID {} ({}).\", id, this.getName(id)), \"error\");\n                }\n            }\n            else {\n                this.log(qq.format(\"Ignoring pause for file ID {} ({}).  Not in progress.\", id, this.getName(id)), \"error\");\n            }\n\n            return false;\n        },\n\n        removeFileRef: function(id) {\n            this._handler.expunge(id);\n            this._uploadData.removeFileRef(id);\n        },\n\n        reset: function() {\n            this.log(\"Resetting uploader...\");\n\n            this._handler.reset();\n            this._storedIds = [];\n            this._autoRetries = [];\n            this._retryTimeouts = [];\n            this._preventRetries = [];\n            this._thumbnailUrls = [];\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n\n            this._paramsStore.reset();\n            this._endpointStore.reset();\n            this._netUploadedOrQueued = 0;\n            this._netUploaded = 0;\n            this._uploadData.reset();\n            this._buttonIdsForFileIds = [];\n\n            this._pasteHandler && this._pasteHandler.reset();\n            this._options.session.refreshOnReset && this._refreshSessionData();\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n\n            this._totalProgress && this._totalProgress.reset();\n\n            this._customResumeDataStore.reset();\n        },\n\n        retry: function(id) {\n            return this._manualRetry(id);\n        },\n\n        scaleImage: function(id, specs) {\n            var self = this;\n\n            return qq.Scaler.prototype.scaleImage(id, specs, {\n                log: qq.bind(self.log, self),\n                getFile: qq.bind(self.getFile, self),\n                uploadData: self._uploadData\n            });\n        },\n\n        setCustomHeaders: function(headers, id) {\n            this._customHeadersStore.set(headers, id);\n        },\n\n        setCustomResumeData: function(id, data) {\n            this._customResumeDataStore.set(data, id);\n        },\n\n        setDeleteFileCustomHeaders: function(headers, id) {\n            this._deleteFileCustomHeadersStore.set(headers, id);\n        },\n\n        setDeleteFileEndpoint: function(endpoint, id) {\n            this._deleteFileEndpointStore.set(endpoint, id);\n        },\n\n        setDeleteFileParams: function(params, id) {\n            this._deleteFileParamsStore.set(params, id);\n        },\n\n        // Re-sets the default endpoint, an endpoint for a specific file, or an endpoint for a specific button\n        setEndpoint: function(endpoint, id) {\n            this._endpointStore.set(endpoint, id);\n        },\n\n        setForm: function(elementOrId) {\n            this._updateFormSupportAndParams(elementOrId);\n        },\n\n        setItemLimit: function(newItemLimit) {\n            this._currentItemLimit = newItemLimit;\n        },\n\n        setName: function(id, newName) {\n            this._uploadData.updateName(id, newName);\n        },\n\n        setParams: function(params, id) {\n            this._paramsStore.set(params, id);\n        },\n\n        setUuid: function(id, newUuid) {\n            return this._uploadData.uuidChanged(id, newUuid);\n        },\n\n        /**\n         * Expose the internal status of a file id to the public api for manual state changes\n         * @public\n         *\n         * @param {Number} id,\n         * @param {String} newStatus\n         *\n         * @todo Implement the remaining methods\n         */\n        setStatus: function(id, newStatus) {\n            var fileRecord = this.getUploads({id: id});\n            if (!fileRecord) {\n                throw new qq.Error(id + \" is not a valid file ID.\");\n            }\n\n            switch (newStatus) {\n                case qq.status.DELETED:\n                    this._onDeleteComplete(id, null, false);\n                    break;\n                case qq.status.DELETE_FAILED:\n                    this._onDeleteComplete(id, null, true);\n                    break;\n                default:\n                    var errorMessage = \"Method setStatus called on '\" + name + \"' not implemented yet for \" + newStatus;\n                    this.log(errorMessage);\n                    throw new qq.Error(errorMessage);\n            }\n        },\n\n        uploadStoredFiles: function() {\n            if (this._storedIds.length === 0) {\n                this._itemError(\"noFilesError\");\n            }\n            else {\n                this._uploadStoredFiles();\n            }\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploaderBasic mode.\n     */\n    qq.basePrivateApi = {\n        // Updates internal state with a file record (not backed by a live file).  Returns the assigned ID.\n        _addCannedFile: function(sessionData) {\n            var self = this;\n\n            return this._uploadData.addFile({\n                uuid: sessionData.uuid,\n                name: sessionData.name,\n                size: sessionData.size,\n                status: qq.status.UPLOAD_SUCCESSFUL,\n                onBeforeStatusChange: function(id) {\n                    sessionData.deleteFileEndpoint && self.setDeleteFileEndpoint(sessionData.deleteFileEndpoint, id);\n                    sessionData.deleteFileParams && self.setDeleteFileParams(sessionData.deleteFileParams, id);\n\n                    if (sessionData.thumbnailUrl) {\n                        self._thumbnailUrls[id] = sessionData.thumbnailUrl;\n                    }\n\n                    self._netUploaded++;\n                    self._netUploadedOrQueued++;\n                }\n            });\n        },\n\n        _annotateWithButtonId: function(file, associatedInput) {\n            if (qq.isFile(file)) {\n                file.qqButtonId = this._getButtonId(associatedInput);\n            }\n        },\n\n        _batchError: function(message) {\n            this._options.callbacks.onError(null, null, message, undefined);\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return new qq.DeleteFileAjaxRequester({\n                method: this._options.deleteFile.method.toUpperCase(),\n                maxConnections: this._options.maxConnections,\n                uuidParamName: this._options.request.uuidName,\n                customHeaders: this._deleteFileCustomHeadersStore,\n                paramsStore: this._deleteFileParamsStore,\n                endpointStore: this._deleteFileEndpointStore,\n                cors: this._options.cors,\n                log: qq.bind(self.log, self),\n                onDelete: function(id) {\n                    self._onDelete(id);\n                    self._options.callbacks.onDelete(id);\n                },\n                onDeleteComplete: function(id, xhrOrXdr, isError) {\n                    self._onDeleteComplete(id, xhrOrXdr, isError);\n                    self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                }\n\n            });\n        },\n\n        _createPasteHandler: function() {\n            var self = this;\n\n            return new qq.PasteSupport({\n                targetElement: this._options.paste.targetElement,\n                callbacks: {\n                    log: qq.bind(self.log, self),\n                    pasteReceived: function(blob) {\n                        self._handleCheckedCallback({\n                            name: \"onPasteReceived\",\n                            callback: qq.bind(self._options.callbacks.onPasteReceived, self, blob),\n                            onSuccess: qq.bind(self._handlePasteSuccess, self, blob),\n                            identifier: \"pasted image\"\n                        });\n                    }\n                }\n            });\n        },\n\n        _createStore: function(initialValue, _readOnlyValues_) {\n            var store = {},\n                catchall = initialValue,\n                perIdReadOnlyValues = {},\n                readOnlyValues = _readOnlyValues_,\n                copy = function(orig) {\n                    if (qq.isObject(orig)) {\n                        return qq.extend({}, orig);\n                    }\n                    return orig;\n                },\n                getReadOnlyValues = function() {\n                    if (qq.isFunction(readOnlyValues)) {\n                        return readOnlyValues();\n                    }\n                    return readOnlyValues;\n                },\n                includeReadOnlyValues = function(id, existing) {\n                    if (readOnlyValues && qq.isObject(existing)) {\n                        qq.extend(existing, getReadOnlyValues());\n                    }\n\n                    if (perIdReadOnlyValues[id]) {\n                        qq.extend(existing, perIdReadOnlyValues[id]);\n                    }\n                };\n\n            return {\n                set: function(val, id) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id == null) {\n                        store = {};\n                        catchall = copy(val);\n                    }\n                    else {\n                        store[id] = copy(val);\n                    }\n                },\n\n                get: function(id) {\n                    var values;\n\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    if (id != null && store[id]) {\n                        values = store[id];\n                    }\n                    else {\n                        values = copy(catchall);\n                    }\n\n                    includeReadOnlyValues(id, values);\n\n                    return copy(values);\n                },\n\n                addReadOnly: function(id, values) {\n                    // Only applicable to Object stores\n                    if (qq.isObject(store)) {\n                        // If null ID, apply readonly values to all files\n                        if (id === null) {\n                            if (qq.isFunction(values)) {\n                                readOnlyValues = values;\n                            }\n                            else {\n                                readOnlyValues = readOnlyValues || {};\n                                qq.extend(readOnlyValues, values);\n                            }\n                        }\n                        else {\n                            perIdReadOnlyValues[id] = perIdReadOnlyValues[id] || {};\n                            qq.extend(perIdReadOnlyValues[id], values);\n                        }\n                    }\n                },\n\n                remove: function(fileId) {\n                    return delete store[fileId];\n                },\n\n                reset: function() {\n                    store = {};\n                    perIdReadOnlyValues = {};\n                    catchall = initialValue;\n                }\n            };\n        },\n\n        _createUploadDataTracker: function() {\n            var self = this;\n\n            return new qq.UploadData({\n                getName: function(id) {\n                    return self.getName(id);\n                },\n                getUuid: function(id) {\n                    return self.getUuid(id);\n                },\n                getSize: function(id) {\n                    return self.getSize(id);\n                },\n                onStatusChange: function(id, oldStatus, newStatus) {\n                    self._onUploadStatusChange(id, oldStatus, newStatus);\n                    self._options.callbacks.onStatusChange(id, oldStatus, newStatus);\n                    self._maybeAllComplete(id, newStatus);\n\n                    if (self._totalProgress) {\n                        setTimeout(function() {\n                            self._totalProgress.onStatusChange(id, oldStatus, newStatus);\n                        }, 0);\n                    }\n                }\n            });\n        },\n\n        /**\n         * Generate a tracked upload button.\n         *\n         * @param spec Object containing a required `element` property\n         * along with optional `multiple`, `accept`, and `folders`.\n         * @returns {qq.UploadButton}\n         * @private\n         */\n        _createUploadButton: function(spec) {\n            var self = this,\n                acceptFiles = spec.accept || this._options.validation.acceptFiles,\n                allowedExtensions = spec.allowedExtensions || this._options.validation.allowedExtensions,\n                button;\n\n            function allowMultiple() {\n                if (qq.supportedFeatures.ajaxUploading) {\n                    // Workaround for bug in iOS7+ (see #1039)\n                    if (self._options.workarounds.iosEmptyVideos &&\n                        qq.ios() &&\n                        !qq.ios6() &&\n                        self._isAllowedExtension(allowedExtensions, \".mov\")) {\n\n                        return false;\n                    }\n\n                    if (spec.multiple === undefined) {\n                        return self._options.multiple;\n                    }\n\n                    return spec.multiple;\n                }\n\n                return false;\n            }\n\n            button = new qq.UploadButton({\n                acceptFiles: acceptFiles,\n                element: spec.element,\n                focusClass: this._options.classes.buttonFocus,\n                folders: spec.folders,\n                hoverClass: this._options.classes.buttonHover,\n                ios8BrowserCrashWorkaround: this._options.workarounds.ios8BrowserCrash,\n                multiple: allowMultiple(),\n                name: this._options.request.inputName,\n                onChange: function(input) {\n                    self._onInputChange(input);\n                },\n                title: spec.title == null ? this._options.text.fileInputTitle : spec.title\n            });\n\n            this._disposeSupport.addDisposer(function() {\n                button.dispose();\n            });\n\n            self._buttons.push(button);\n\n            return button;\n        },\n\n        _createUploadHandler: function(additionalOptions, namespace) {\n            var self = this,\n                lastOnProgress = {},\n                options = {\n                    debug: this._options.debug,\n                    maxConnections: this._options.maxConnections,\n                    cors: this._options.cors,\n                    paramsStore: this._paramsStore,\n                    endpointStore: this._endpointStore,\n                    chunking: this._options.chunking,\n                    resume: this._options.resume,\n                    blobs: this._options.blobs,\n                    log: qq.bind(self.log, self),\n                    preventRetryParam: this._options.retry.preventRetryResponseProperty,\n                    onProgress: function(id, name, loaded, total) {\n                        if (loaded < 0 || total < 0) {\n                            return;\n                        }\n\n                        if (lastOnProgress[id]) {\n                            if (lastOnProgress[id].loaded !== loaded || lastOnProgress[id].total !== total) {\n                                self._onProgress(id, name, loaded, total);\n                                self._options.callbacks.onProgress(id, name, loaded, total);\n                            }\n                        }\n                        else {\n                            self._onProgress(id, name, loaded, total);\n                            self._options.callbacks.onProgress(id, name, loaded, total);\n                        }\n\n                        lastOnProgress[id] = {loaded: loaded, total: total};\n\n                    },\n                    onComplete: function(id, name, result, xhr) {\n                        delete lastOnProgress[id];\n\n                        var status = self.getUploads({id: id}).status,\n                            retVal;\n\n                        // This is to deal with some observed cases where the XHR readyStateChange handler is\n                        // invoked by the browser multiple times for the same XHR instance with the same state\n                        // readyState value.  Higher level: don't invoke complete-related code if we've already\n                        // done this.\n                        if (status === qq.status.UPLOAD_SUCCESSFUL || status === qq.status.UPLOAD_FAILED) {\n                            return;\n                        }\n\n                        retVal = self._onComplete(id, name, result, xhr);\n\n                        // If the internal `_onComplete` handler returns a promise, don't invoke the `onComplete` callback\n                        // until the promise has been fulfilled.\n                        if (retVal instanceof  qq.Promise) {\n                            retVal.done(function() {\n                                self._options.callbacks.onComplete(id, name, result, xhr);\n                            });\n                        }\n                        else {\n                            self._options.callbacks.onComplete(id, name, result, xhr);\n                        }\n                    },\n                    onCancel: function(id, name, cancelFinalizationEffort) {\n                        var promise = new qq.Promise();\n\n                        self._handleCheckedCallback({\n                            name: \"onCancel\",\n                            callback: qq.bind(self._options.callbacks.onCancel, self, id, name),\n                            onFailure: promise.failure,\n                            onSuccess: function() {\n                                cancelFinalizationEffort.then(function() {\n                                    self._onCancel(id, name);\n                                });\n\n                                promise.success();\n                            },\n                            identifier: id\n                        });\n\n                        return promise;\n                    },\n                    onUploadPrep: qq.bind(this._onUploadPrep, this),\n                    onUpload: function(id, name) {\n                        self._onUpload(id, name);\n                        var onUploadResult = self._options.callbacks.onUpload(id, name);\n\n                        if (qq.isGenericPromise(onUploadResult)) {\n                            self.log(qq.format(\"onUpload for {} returned a Promise - waiting for resolution.\", id));\n                            return onUploadResult;\n                        }\n\n                        return new qq.Promise().success();\n                    },\n                    onUploadChunk: function(id, name, chunkData) {\n                        self._onUploadChunk(id, chunkData);\n                        var onUploadChunkResult = self._options.callbacks.onUploadChunk(id, name, chunkData);\n\n                        if (qq.isGenericPromise(onUploadChunkResult)) {\n                            self.log(qq.format(\"onUploadChunk for {}.{} returned a Promise - waiting for resolution.\", id, chunkData.partIndex));\n                            return onUploadChunkResult;\n                        }\n\n                        return new qq.Promise().success();\n                    },\n                    onUploadChunkSuccess: function(id, chunkData, result, xhr) {\n                        self._onUploadChunkSuccess(id, chunkData);\n                        self._options.callbacks.onUploadChunkSuccess.apply(self, arguments);\n                    },\n                    onResume: function(id, name, chunkData, customResumeData) {\n                        return self._options.callbacks.onResume(id, name, chunkData, customResumeData);\n                    },\n                    onAutoRetry: function(id, name, responseJSON, xhr) {\n                        return self._onAutoRetry.apply(self, arguments);\n                    },\n                    onUuidChanged: function(id, newUuid) {\n                        self.log(\"Server requested UUID change from '\" + self.getUuid(id) + \"' to '\" + newUuid + \"'\");\n                        self.setUuid(id, newUuid);\n                    },\n                    getName: qq.bind(self.getName, self),\n                    getUuid: qq.bind(self.getUuid, self),\n                    getSize: qq.bind(self.getSize, self),\n                    setSize: qq.bind(self._setSize, self),\n                    getDataByUuid: function(uuid) {\n                        return self.getUploads({uuid: uuid});\n                    },\n                    isQueued: function(id) {\n                        var status = self.getUploads({id: id}).status;\n                        return status === qq.status.QUEUED ||\n                            status === qq.status.SUBMITTED ||\n                            status === qq.status.UPLOAD_RETRYING ||\n                            status === qq.status.PAUSED;\n                    },\n                    getIdsInProxyGroup: self._uploadData.getIdsInProxyGroup,\n                    getIdsInBatch: self._uploadData.getIdsInBatch,\n                    isInProgress: function(id) {\n                        return self.getUploads({id: id}).status === qq.status.UPLOADING;\n                    },\n                    getCustomResumeData: qq.bind(self._getCustomResumeData, self),\n                    setStatus: function(id, status) {\n                        self._uploadData.setStatus(id, status);\n                    }\n                };\n\n            qq.each(this._options.request, function(prop, val) {\n                options[prop] = val;\n            });\n\n            options.customHeaders = this._customHeadersStore;\n\n            if (additionalOptions) {\n                qq.each(additionalOptions, function(key, val) {\n                    options[key] = val;\n                });\n            }\n\n            return new qq.UploadHandlerController(options, namespace);\n        },\n\n        _fileOrBlobRejected: function(id) {\n            this._netUploadedOrQueued--;\n            this._uploadData.setStatus(id, qq.status.REJECTED);\n        },\n\n        _formatSize: function(bytes) {\n            if (bytes === 0) {\n                return bytes + this._options.text.sizeSymbols[0];\n            }\n            var i = -1;\n            do {\n                bytes = bytes / 1000;\n                i++;\n            } while (bytes > 999);\n\n            return Math.max(bytes, 0.1).toFixed(1) + this._options.text.sizeSymbols[i];\n        },\n\n        // Creates an internal object that tracks various properties of each extra button,\n        // and then actually creates the extra button.\n        _generateExtraButtonSpecs: function() {\n            var self = this;\n\n            this._extraButtonSpecs = {};\n\n            qq.each(this._options.extraButtons, function(idx, extraButtonOptionEntry) {\n                var multiple = extraButtonOptionEntry.multiple,\n                    validation = qq.extend({}, self._options.validation, true),\n                    extraButtonSpec = qq.extend({}, extraButtonOptionEntry);\n\n                if (multiple === undefined) {\n                    multiple = self._options.multiple;\n                }\n\n                if (extraButtonSpec.validation) {\n                    qq.extend(validation, extraButtonOptionEntry.validation, true);\n                }\n\n                qq.extend(extraButtonSpec, {\n                    multiple: multiple,\n                    validation: validation\n                }, true);\n\n                self._initExtraButton(extraButtonSpec);\n            });\n        },\n\n        _getButton: function(buttonId) {\n            var extraButtonsSpec = this._extraButtonSpecs[buttonId];\n\n            if (extraButtonsSpec) {\n                return extraButtonsSpec.element;\n            }\n            else if (buttonId === this._defaultButtonId) {\n                return this._options.button;\n            }\n        },\n\n        /**\n         * Gets the internally used tracking ID for a button.\n         *\n         * @param buttonOrFileInputOrFile `File`, `<input type=\"file\">`, or a button container element\n         * @returns {*} The button's ID, or undefined if no ID is recoverable\n         * @private\n         */\n        _getButtonId: function(buttonOrFileInputOrFile) {\n            var inputs, fileInput,\n                fileBlobOrInput = buttonOrFileInputOrFile;\n\n            // We want the reference file/blob here if this is a proxy (a file that will be generated on-demand later)\n            if (fileBlobOrInput instanceof qq.BlobProxy) {\n                fileBlobOrInput = fileBlobOrInput.referenceBlob;\n            }\n\n            // If the item is a `Blob` it will never be associated with a button or drop zone.\n            if (fileBlobOrInput && !qq.isBlob(fileBlobOrInput)) {\n                if (qq.isFile(fileBlobOrInput)) {\n                    return fileBlobOrInput.qqButtonId;\n                }\n                else if (fileBlobOrInput.tagName.toLowerCase() === \"input\" &&\n                    fileBlobOrInput.type.toLowerCase() === \"file\") {\n\n                    return fileBlobOrInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n\n                inputs = fileBlobOrInput.getElementsByTagName(\"input\");\n\n                qq.each(inputs, function(idx, input) {\n                    if (input.getAttribute(\"type\") === \"file\") {\n                        fileInput = input;\n                        return false;\n                    }\n                });\n\n                if (fileInput) {\n                    return fileInput.getAttribute(qq.UploadButton.BUTTON_ID_ATTR_NAME);\n                }\n            }\n        },\n\n        _getCustomResumeData: function(fileId) {\n            return this._customResumeDataStore.get(fileId);\n        },\n\n        _getNotFinished: function() {\n            return this._uploadData.retrieve({\n                status: [\n                    qq.status.UPLOADING,\n                    qq.status.UPLOAD_RETRYING,\n                    qq.status.QUEUED,\n                    qq.status.SUBMITTING,\n                    qq.status.SUBMITTED,\n                    qq.status.PAUSED\n                ]\n            }).length;\n        },\n\n        // Get the validation options for this button.  Could be the default validation option\n        // or a specific one assigned to this particular button.\n        _getValidationBase: function(buttonId) {\n            var extraButtonSpec = this._extraButtonSpecs[buttonId];\n\n            return extraButtonSpec ? extraButtonSpec.validation : this._options.validation;\n        },\n\n        _getValidationDescriptor: function(fileWrapper) {\n            if (fileWrapper.file instanceof qq.BlobProxy) {\n                return {\n                    name: qq.getFilename(fileWrapper.file.referenceBlob),\n                    size: fileWrapper.file.referenceBlob.size\n                };\n            }\n\n            return {\n                name: this.getUploads({id: fileWrapper.id}).name,\n                size: this.getUploads({id: fileWrapper.id}).size\n            };\n        },\n\n        _getValidationDescriptors: function(fileWrappers) {\n            var self = this,\n                fileDescriptors = [];\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                fileDescriptors.push(self._getValidationDescriptor(fileWrapper));\n            });\n\n            return fileDescriptors;\n        },\n\n        // Allows camera access on either the default or an extra button for iOS devices.\n        _handleCameraAccess: function() {\n            if (this._options.camera.ios && qq.ios()) {\n                var acceptIosCamera = \"image/*;capture=camera\",\n                    button = this._options.camera.button,\n                    buttonId = button ? this._getButtonId(button) : this._defaultButtonId,\n                    optionRoot = this._options;\n\n                // If we are not targeting the default button, it is an \"extra\" button\n                if (buttonId && buttonId !== this._defaultButtonId) {\n                    optionRoot = this._extraButtonSpecs[buttonId];\n                }\n\n                // Camera access won't work in iOS if the `multiple` attribute is present on the file input\n                optionRoot.multiple = false;\n\n                // update the options\n                if (optionRoot.validation.acceptFiles === null) {\n                    optionRoot.validation.acceptFiles = acceptIosCamera;\n                }\n                else {\n                    optionRoot.validation.acceptFiles += \",\" + acceptIosCamera;\n                }\n\n                // update the already-created button\n                qq.each(this._buttons, function(idx, button) {\n                    if (button.getButtonId() === buttonId) {\n                        button.setMultiple(optionRoot.multiple);\n                        button.setAcceptFiles(optionRoot.acceptFiles);\n\n                        return false;\n                    }\n                });\n            }\n        },\n\n        _handleCheckedCallback: function(details) {\n            var self = this,\n                callbackRetVal = details.callback();\n\n            if (qq.isGenericPromise(callbackRetVal)) {\n                this.log(details.name + \" - waiting for \" + details.name + \" promise to be fulfilled for \" + details.identifier);\n                return callbackRetVal.then(\n                    function(successParam) {\n                        self.log(details.name + \" promise success for \" + details.identifier);\n                        details.onSuccess(successParam);\n                    },\n                    function() {\n                        if (details.onFailure) {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                            details.onFailure();\n                        }\n                        else {\n                            self.log(details.name + \" promise failure for \" + details.identifier);\n                        }\n                    });\n            }\n\n            if (callbackRetVal !== false) {\n                details.onSuccess(callbackRetVal);\n            }\n            else {\n                if (details.onFailure) {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Invoking failure callback.\");\n                    details.onFailure();\n                }\n                else {\n                    this.log(details.name + \" - return value was 'false' for \" + details.identifier + \".  Will not proceed.\");\n                }\n            }\n\n            return callbackRetVal;\n        },\n\n        // Updates internal state when a new file has been received, and adds it along with its ID to a passed array.\n        _handleNewFile: function(file, batchId, newFileWrapperList) {\n            var self = this,\n                uuid = qq.getUniqueId(),\n                size = -1,\n                name = qq.getFilename(file),\n                actualFile = file.blob || file,\n                handler = this._customNewFileHandler ?\n                    this._customNewFileHandler :\n                    qq.bind(self._handleNewFileGeneric, self);\n\n            if (!qq.isInput(actualFile) && actualFile.size >= 0) {\n                size = actualFile.size;\n            }\n\n            handler(actualFile, name, uuid, size, newFileWrapperList, batchId, this._options.request.uuidName, {\n                uploadData: self._uploadData,\n                paramsStore: self._paramsStore,\n                addFileToHandler: function(id, file) {\n                    self._handler.add(id, file);\n                    self._netUploadedOrQueued++;\n                    self._trackButton(id);\n                }\n            });\n        },\n\n        _handleNewFileGeneric: function(file, name, uuid, size, fileList, batchId) {\n            var id = this._uploadData.addFile({\n                uuid: uuid,\n                name: name,\n                size: size,\n                batchId: batchId,\n                file: file\n            });\n\n            this._handler.add(id, file);\n\n            this._trackButton(id);\n\n            this._netUploadedOrQueued++;\n\n            fileList.push({id: id, file: file});\n        },\n\n        _handlePasteSuccess: function(blob, extSuppliedName) {\n            var extension = blob.type.split(\"/\")[1],\n                name = extSuppliedName;\n\n            /*jshint eqeqeq: true, eqnull: true*/\n            if (name == null) {\n                name = this._options.paste.defaultName;\n            }\n\n            name += \".\" + extension;\n\n            this.addFiles({\n                name: name,\n                blob: blob\n            });\n        },\n\n        _handleDeleteSuccess: function(id) {\n            if (this.getUploads({id: id}).status !== qq.status.DELETED) {\n                var name = this.getName(id);\n\n                this._netUploadedOrQueued--;\n                this._netUploaded--;\n                this._handler.expunge(id);\n                this._uploadData.setStatus(id, qq.status.DELETED);\n                this.log(\"Delete request for '\" + name + \"' has succeeded.\");\n            }\n        },\n\n        _handleDeleteFailed: function(id, xhrOrXdr) {\n            var name = this.getName(id);\n\n            this._uploadData.setStatus(id, qq.status.DELETE_FAILED);\n            this.log(\"Delete request for '\" + name + \"' has failed.\", \"error\");\n\n            // Check first if xhrOrXdr is actually passed or valid\n            // For error reporting, we only have access to the response status if this is not\n            // an `XDomainRequest`.\n            if (!xhrOrXdr || xhrOrXdr.withCredentials === undefined) {\n                this._options.callbacks.onError(id, name, \"Delete request failed\", xhrOrXdr);\n            }\n            else {\n                this._options.callbacks.onError(id, name, \"Delete request failed with response code \" + xhrOrXdr.status, xhrOrXdr);\n            }\n        },\n\n        // Creates an extra button element\n        _initExtraButton: function(spec) {\n            var button = this._createUploadButton({\n                accept: spec.validation.acceptFiles,\n                allowedExtensions: spec.validation.allowedExtensions,\n                element: spec.element,\n                folders: spec.folders,\n                multiple: spec.multiple,\n                title: spec.fileInputTitle\n            });\n\n            this._extraButtonSpecs[button.getButtonId()] = spec;\n        },\n\n        _initFormSupportAndParams: function() {\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n            );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore = this._createStore(\n                    this._options.request.params,  this._formSupport.getFormInputsAsObject\n                );\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this._options.request.endpoint = this._formSupport.newEndpoint;\n                }\n            }\n            else {\n                this._paramsStore = this._createStore(this._options.request.params);\n            }\n        },\n\n        _isDeletePossible: function() {\n            if (!qq.DeleteFileAjaxRequester || !this._options.deleteFile.enabled) {\n                return false;\n            }\n\n            if (this._options.cors.expected) {\n                if (qq.supportedFeatures.deleteFileCorsXhr) {\n                    return true;\n                }\n\n                if (qq.supportedFeatures.deleteFileCorsXdr && this._options.cors.allowXdr) {\n                    return true;\n                }\n\n                return false;\n            }\n\n            return true;\n        },\n\n        _isAllowedExtension: function(allowed, fileName) {\n            var valid = false;\n\n            if (!allowed.length) {\n                return true;\n            }\n\n            qq.each(allowed, function(idx, allowedExt) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExt)) {\n                    /*jshint eqeqeq: true, eqnull: true*/\n                    var extRegex = new RegExp(\"\\\\.\" + allowedExt + \"$\", \"i\");\n\n                    if (fileName.match(extRegex) != null) {\n                        valid = true;\n                        return false;\n                    }\n                }\n            });\n\n            return valid;\n        },\n\n        /**\n         * Constructs and returns a message that describes an item/file error.  Also calls `onError` callback.\n         *\n         * @param code REQUIRED - a code that corresponds to a stock message describing this type of error\n         * @param maybeNameOrNames names of the items that have failed, if applicable\n         * @param item `File`, `Blob`, or `<input type=\"file\">`\n         * @private\n         */\n        _itemError: function(code, maybeNameOrNames, item) {\n            var message = this._options.messages[code],\n                allowedExtensions = [],\n                names = [].concat(maybeNameOrNames),\n                name = names[0],\n                buttonId = this._getButtonId(item),\n                validationBase = this._getValidationBase(buttonId),\n                extensionsForMessage, placeholderMatch;\n\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            qq.each(validationBase.allowedExtensions, function(idx, allowedExtension) {\n                /**\n                 * If an argument is not a string, ignore it.  Added when a possible issue with MooTools hijacking the\n                 * `allowedExtensions` array was discovered.  See case #735 in the issue tracker for more details.\n                 */\n                if (qq.isString(allowedExtension)) {\n                    allowedExtensions.push(allowedExtension);\n                }\n            });\n\n            extensionsForMessage = allowedExtensions.join(\", \").toLowerCase();\n\n            r(\"{file}\", this._options.formatFileName(name));\n            r(\"{extensions}\", extensionsForMessage);\n            r(\"{sizeLimit}\", this._formatSize(validationBase.sizeLimit));\n            r(\"{minSizeLimit}\", this._formatSize(validationBase.minSizeLimit));\n\n            placeholderMatch = message.match(/(\\{\\w+\\})/g);\n            if (placeholderMatch !== null) {\n                qq.each(placeholderMatch, function(idx, placeholder) {\n                    r(placeholder, names[idx]);\n                });\n            }\n\n            this._options.callbacks.onError(null, name, message, undefined);\n\n            return message;\n        },\n\n        /**\n         * Conditionally orders a manual retry of a failed upload.\n         *\n         * @param id File ID of the failed upload\n         * @param callback Optional callback to invoke if a retry is prudent.\n         * In lieu of asking the upload handler to retry.\n         * @returns {boolean} true if a manual retry will occur\n         * @private\n         */\n        _manualRetry: function(id, callback) {\n            if (this._onBeforeManualRetry(id)) {\n                this._netUploadedOrQueued++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n\n                if (callback) {\n                    callback(id);\n                }\n                else {\n                    this._handler.retry(id);\n                }\n\n                return true;\n            }\n        },\n\n        _maybeAllComplete: function(id, status) {\n            var self = this,\n                notFinished = this._getNotFinished();\n\n            if (status === qq.status.UPLOAD_SUCCESSFUL) {\n                this._succeededSinceLastAllComplete.push(id);\n            }\n            else if (status === qq.status.UPLOAD_FAILED) {\n                this._failedSinceLastAllComplete.push(id);\n            }\n\n            if (notFinished === 0 &&\n                (this._succeededSinceLastAllComplete.length || this._failedSinceLastAllComplete.length)) {\n                // Attempt to ensure onAllComplete is not invoked before other callbacks, such as onCancel & onComplete\n                setTimeout(function() {\n                    self._onAllComplete(self._succeededSinceLastAllComplete, self._failedSinceLastAllComplete);\n                }, 0);\n            }\n        },\n\n        _maybeHandleIos8SafariWorkaround: function() {\n            var self = this;\n\n            if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n                setTimeout(function() {\n                    window.alert(self._options.messages.unsupportedBrowserIos8Safari);\n                }, 0);\n                throw new qq.Error(this._options.messages.unsupportedBrowserIos8Safari);\n            }\n        },\n\n        _maybeParseAndSendUploadError: function(id, name, response, xhr) {\n            // Assuming no one will actually set the response code to something other than 200\n            // and still set 'success' to true...\n            if (!response.success) {\n                if (xhr && xhr.status !== 200 && !response.error) {\n                    this._options.callbacks.onError(id, name, \"XHR returned response code \" + xhr.status, xhr);\n                }\n                else {\n                    var errorReason = response.error ? response.error : this._options.text.defaultResponseError;\n                    this._options.callbacks.onError(id, name, errorReason, xhr);\n                }\n            }\n        },\n\n        _maybeProcessNextItemAfterOnValidateCallback: function(validItem, items, index, params, endpoint) {\n            var self = this;\n\n            if (items.length > index) {\n                if (validItem || !this._options.validation.stopOnFirstInvalidFile) {\n                    //use setTimeout to prevent a stack overflow with a large number of files in the batch & non-promissory callbacks\n                    setTimeout(function() {\n                        var validationDescriptor = self._getValidationDescriptor(items[index]),\n                            buttonId = self._getButtonId(items[index].file),\n                            button = self._getButton(buttonId);\n\n                        self._handleCheckedCallback({\n                            name: \"onValidate\",\n                            callback: qq.bind(self._options.callbacks.onValidate, self, validationDescriptor, button),\n                            onSuccess: qq.bind(self._onValidateCallbackSuccess, self, items, index, params, endpoint),\n                            onFailure: qq.bind(self._onValidateCallbackFailure, self, items, index, params, endpoint),\n                            identifier: \"Item '\" + validationDescriptor.name + \"', size: \" + validationDescriptor.size\n                        });\n                    }, 0);\n                }\n                else if (!validItem) {\n                    for (; index < items.length; index++) {\n                        self._fileOrBlobRejected(items[index].id);\n                    }\n                }\n            }\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._totalProgress && this._totalProgress.onAllComplete(successful, failed, this._preventRetries);\n\n            this._options.callbacks.onAllComplete(qq.extend([], successful), qq.extend([], failed));\n\n            this._succeededSinceLastAllComplete = [];\n            this._failedSinceLastAllComplete = [];\n        },\n\n        /**\n         * Attempt to automatically retry a failed upload.\n         *\n         * @param id The file ID of the failed upload\n         * @param name The name of the file associated with the failed upload\n         * @param responseJSON Response from the server, parsed into a javascript object\n         * @param xhr Ajax transport used to send the failed request\n         * @param callback Optional callback to be invoked if a retry is prudent.\n         * Invoked in lieu of asking the upload handler to retry.\n         * @returns {boolean} true if an auto-retry will occur\n         * @private\n         */\n        _onAutoRetry: function(id, name, responseJSON, xhr, callback) {\n            var self = this;\n\n            self._preventRetries[id] = responseJSON[self._options.retry.preventRetryResponseProperty];\n\n            if (self._shouldAutoRetry(id)) {\n                var retryWaitPeriod = self._options.retry.autoAttemptDelay * 1000;\n\n                self._maybeParseAndSendUploadError.apply(self, arguments);\n                self._options.callbacks.onAutoRetry(id, name, self._autoRetries[id]);\n                self._onBeforeAutoRetry(id, name);\n\n                self._uploadData.setStatus(id, qq.status.UPLOAD_RETRYING);\n                self._retryTimeouts[id] = setTimeout(function() {\n                    self.log(\"Starting retry for \" + name + \"...\");\n\n                    if (callback) {\n                        callback(id);\n                    }\n                    else {\n                        self._handler.retry(id);\n                    }\n                }, retryWaitPeriod);\n\n                return true;\n            }\n        },\n\n        _onBeforeAutoRetry: function(id, name) {\n            this.log(\"Waiting \" + this._options.retry.autoAttemptDelay + \" seconds before retrying \" + name + \"...\");\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            var itemLimit = this._currentItemLimit,\n                fileName;\n\n            if (this._preventRetries[id]) {\n                this.log(\"Retries are forbidden for id \" + id, \"warn\");\n                return false;\n            }\n            else if (this._handler.isValid(id)) {\n                fileName = this.getName(id);\n\n                if (this._options.callbacks.onManualRetry(id, fileName) === false) {\n                    return false;\n                }\n\n                if (itemLimit > 0 && this._netUploadedOrQueued + 1 > itemLimit) {\n                    this._itemError(\"retryFailTooManyItems\");\n                    return false;\n                }\n\n                this.log(\"Retrying upload for '\" + fileName + \"' (id: \" + id + \")...\");\n                return true;\n            }\n            else {\n                this.log(\"'\" + id + \"' is not a valid file ID\", \"error\");\n                return false;\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._netUploadedOrQueued--;\n\n            clearTimeout(this._retryTimeouts[id]);\n\n            var storedItemIndex = qq.indexOf(this._storedIds, id);\n            if (!this._options.autoUpload && storedItemIndex >= 0) {\n                this._storedIds.splice(storedItemIndex, 1);\n            }\n\n            this._uploadData.setStatus(id, qq.status.CANCELED);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            if (!result.success) {\n                this._netUploadedOrQueued--;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_FAILED);\n\n                if (result[this._options.retry.preventRetryResponseProperty] === true) {\n                    this._preventRetries[id] = true;\n                }\n            }\n            else {\n                if (result.thumbnailUrl) {\n                    this._thumbnailUrls[id] = result.thumbnailUrl;\n                }\n\n                this._netUploaded++;\n                this._uploadData.setStatus(id, qq.status.UPLOAD_SUCCESSFUL);\n            }\n\n            this._maybeParseAndSendUploadError(id, name, result, xhr);\n\n            return result.success ? true : false;\n        },\n\n        _onDelete: function(id) {\n            this._uploadData.setStatus(id, qq.status.DELETING);\n        },\n\n        _onDeleteComplete: function(id, xhrOrXdr, isError) {\n            var name = this.getName(id);\n\n            if (isError) {\n                this._handleDeleteFailed(id, xhrOrXdr);\n            }\n            else {\n                this._handleDeleteSuccess(id);\n            }\n        },\n\n        _onInputChange: function(input) {\n            var fileIndex;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                for (fileIndex = 0; fileIndex < input.files.length; fileIndex++) {\n                    this._annotateWithButtonId(input.files[fileIndex], input);\n                }\n\n                this.addFiles(input.files);\n            }\n            // Android 2.3.x will fire `onchange` even if no file has been selected\n            else if (input.value.length > 0) {\n                this.addFiles(input);\n            }\n\n            qq.each(this._buttons, function(idx, button) {\n                button.reset();\n            });\n        },\n\n        _onProgress: function(id, name, loaded, total) {\n            this._totalProgress && this._totalProgress.onIndividualProgress(id, loaded, total);\n        },\n\n        _onSubmit: function(id, name) {\n            //nothing to do yet in core uploader\n        },\n\n        _onSubmitCallbackSuccess: function(id, name) {\n            this._onSubmit.apply(this, arguments);\n            this._uploadData.setStatus(id, qq.status.SUBMITTED);\n            this._onSubmitted.apply(this, arguments);\n\n            if (this._options.autoUpload) {\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n                this._uploadFile(id);\n            }\n            else {\n                this._storeForLater(id);\n                this._options.callbacks.onSubmitted.apply(this, arguments);\n            }\n        },\n\n        _onSubmitDelete: function(id, onSuccessCallback, additionalMandatedParams) {\n            var uuid = this.getUuid(id),\n                adjustedOnSuccessCallback;\n\n            if (onSuccessCallback) {\n                adjustedOnSuccessCallback = qq.bind(onSuccessCallback, this, id, uuid, additionalMandatedParams);\n            }\n\n            if (this._isDeletePossible()) {\n                this._handleCheckedCallback({\n                    name: \"onSubmitDelete\",\n                    callback: qq.bind(this._options.callbacks.onSubmitDelete, this, id),\n                    onSuccess: adjustedOnSuccessCallback ||\n                        qq.bind(this._deleteHandler.sendDelete, this, id, uuid, additionalMandatedParams),\n                    identifier: id\n                });\n                return true;\n            }\n            else {\n                this.log(\"Delete request ignored for ID \" + id + \", delete feature is disabled or request not possible \" +\n                    \"due to CORS on a user agent that does not support pre-flighting.\", \"warn\");\n                return false;\n            }\n        },\n\n        _onSubmitted: function(id) {\n            //nothing to do in the base uploader\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._options.callbacks.onTotalProgress(loaded, total);\n        },\n\n        _onUploadPrep: function(id) {\n            // nothing to do in the core uploader for now\n        },\n\n        _onUpload: function(id, name) {\n            this._uploadData.setStatus(id, qq.status.UPLOADING);\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            //nothing to do in the base uploader\n        },\n\n        _onUploadChunkSuccess: function(id, chunkData) {\n            if (!this._preventRetries[id] && this._options.retry.enableAuto) {\n                this._autoRetries[id] = 0;\n            }\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            // Make sure a \"queued\" retry attempt is canceled if the upload has been paused\n            if (newStatus === qq.status.PAUSED) {\n                clearTimeout(this._retryTimeouts[id]);\n            }\n        },\n\n        _onValidateBatchCallbackFailure: function(fileWrappers) {\n            var self = this;\n\n            qq.each(fileWrappers, function(idx, fileWrapper) {\n                self._fileOrBlobRejected(fileWrapper.id);\n            });\n        },\n\n        _onValidateBatchCallbackSuccess: function(validationDescriptors, items, params, endpoint, button) {\n            var errorMessage,\n                itemLimit = this._currentItemLimit,\n                proposedNetFilesUploadedOrQueued = this._netUploadedOrQueued;\n\n            if (itemLimit === 0 || proposedNetFilesUploadedOrQueued <= itemLimit) {\n                if (items.length > 0) {\n                    this._handleCheckedCallback({\n                        name: \"onValidate\",\n                        callback: qq.bind(this._options.callbacks.onValidate, this, validationDescriptors[0], button),\n                        onSuccess: qq.bind(this._onValidateCallbackSuccess, this, items, 0, params, endpoint),\n                        onFailure: qq.bind(this._onValidateCallbackFailure, this, items, 0, params, endpoint),\n                        identifier: \"Item '\" + items[0].file.name + \"', size: \" + items[0].file.size\n                    });\n                }\n                else {\n                    this._itemError(\"noFilesError\");\n                }\n            }\n            else {\n                this._onValidateBatchCallbackFailure(items);\n                errorMessage = this._options.messages.tooManyItemsError\n                    .replace(/\\{netItems\\}/g, proposedNetFilesUploadedOrQueued)\n                    .replace(/\\{itemLimit\\}/g, itemLimit);\n                this._batchError(errorMessage);\n            }\n        },\n\n        _onValidateCallbackFailure: function(items, index, params, endpoint) {\n            var nextIndex = index + 1;\n\n            this._fileOrBlobRejected(items[index].id, items[index].file.name);\n\n            this._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n        },\n\n        _onValidateCallbackSuccess: function(items, index, params, endpoint) {\n            var self = this,\n                nextIndex = index + 1,\n                validationDescriptor = this._getValidationDescriptor(items[index]);\n\n            this._validateFileOrBlobData(items[index], validationDescriptor)\n                .then(\n                function() {\n                    self._upload(items[index].id, params, endpoint);\n                    self._maybeProcessNextItemAfterOnValidateCallback(true, items, nextIndex, params, endpoint);\n                },\n                function() {\n                    self._maybeProcessNextItemAfterOnValidateCallback(false, items, nextIndex, params, endpoint);\n                }\n            );\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            if (items.length === 0) {\n                this._itemError(\"noFilesError\");\n                return;\n            }\n\n            var validationDescriptors = this._getValidationDescriptors(items),\n                buttonId = this._getButtonId(items[0].file),\n                button = this._getButton(buttonId);\n\n            this._handleCheckedCallback({\n                name: \"onValidateBatch\",\n                callback: qq.bind(this._options.callbacks.onValidateBatch, this, validationDescriptors, button),\n                onSuccess: qq.bind(this._onValidateBatchCallbackSuccess, this, validationDescriptors, items, params, endpoint, button),\n                onFailure: qq.bind(this._onValidateBatchCallbackFailure, this, items),\n                identifier: \"batch validation\"\n            });\n        },\n\n        _preventLeaveInProgress: function() {\n            var self = this;\n\n            this._disposeSupport.attach(window, \"beforeunload\", function(e) {\n                if (self.getInProgress()) {\n                    e = e || window.event;\n                    // for ie, ff\n                    e.returnValue = self._options.messages.onLeave;\n                    // for webkit\n                    return self._options.messages.onLeave;\n                }\n            });\n        },\n\n        // Attempts to refresh session data only if the `qq.Session` module exists\n        // and a session endpoint has been specified.  The `onSessionRequestComplete`\n        // callback will be invoked once the refresh is complete.\n        _refreshSessionData: function() {\n            var self = this,\n                options = this._options.session;\n\n            /* jshint eqnull:true */\n            if (qq.Session && this._options.session.endpoint != null) {\n                if (!this._session) {\n                    qq.extend(options, {cors: this._options.cors});\n\n                    options.log = qq.bind(this.log, this);\n                    options.addFileRecord = qq.bind(this._addCannedFile, this);\n\n                    this._session = new qq.Session(options);\n                }\n\n                setTimeout(function() {\n                    self._session.refresh().then(function(response, xhrOrXdr) {\n                        self._sessionRequestComplete();\n                        self._options.callbacks.onSessionRequestComplete(response, true, xhrOrXdr);\n\n                    }, function(response, xhrOrXdr) {\n\n                        self._options.callbacks.onSessionRequestComplete(response, false, xhrOrXdr);\n                    });\n                }, 0);\n            }\n        },\n\n        _sessionRequestComplete: function() {},\n\n        _setSize: function(id, newSize) {\n            this._uploadData.updateSize(id, newSize);\n            this._totalProgress && this._totalProgress.onNewSize(id);\n        },\n\n        _shouldAutoRetry: function(id) {\n            var uploadData = this._uploadData.retrieve({id: id});\n\n            /*jshint laxbreak: true */\n            if (!this._preventRetries[id]\n                && this._options.retry.enableAuto\n                && uploadData.status !== qq.status.PAUSED) {\n\n                if (this._autoRetries[id] === undefined) {\n                    this._autoRetries[id] = 0;\n                }\n\n                if (this._autoRetries[id] < this._options.retry.maxAutoAttempts) {\n                    this._autoRetries[id] += 1;\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        _storeForLater: function(id) {\n            this._storedIds.push(id);\n        },\n\n        // Maps a file with the button that was used to select it.\n        _trackButton: function(id) {\n            var buttonId;\n\n            if (qq.supportedFeatures.ajaxUploading) {\n                buttonId = this._handler.getFile(id).qqButtonId;\n            }\n            else {\n                buttonId = this._getButtonId(this._handler.getInput(id));\n            }\n\n            if (buttonId) {\n                this._buttonIdsForFileIds[id] = buttonId;\n            }\n        },\n\n        _updateFormSupportAndParams: function(formElementOrId) {\n            this._options.form.element = formElementOrId;\n\n            this._formSupport = qq.FormSupport && new qq.FormSupport(\n                    this._options.form, qq.bind(this.uploadStoredFiles, this), qq.bind(this.log, this)\n                );\n\n            if (this._formSupport && this._formSupport.attachedToForm) {\n                this._paramsStore.addReadOnly(null, this._formSupport.getFormInputsAsObject);\n\n                this._options.autoUpload = this._formSupport.newAutoUpload;\n                if (this._formSupport.newEndpoint) {\n                    this.setEndpoint(this._formSupport.newEndpoint);\n                }\n            }\n        },\n\n        _upload: function(id, params, endpoint) {\n            var name = this.getName(id);\n\n            if (params) {\n                this.setParams(params, id);\n            }\n\n            if (endpoint) {\n                this.setEndpoint(endpoint, id);\n            }\n\n            this._handleCheckedCallback({\n                name: \"onSubmit\",\n                callback: qq.bind(this._options.callbacks.onSubmit, this, id, name),\n                onSuccess: qq.bind(this._onSubmitCallbackSuccess, this, id, name),\n                onFailure: qq.bind(this._fileOrBlobRejected, this, id, name),\n                identifier: id\n            });\n        },\n\n        _uploadFile: function(id) {\n            if (!this._handler.upload(id)) {\n                this._uploadData.setStatus(id, qq.status.QUEUED);\n            }\n        },\n\n        _uploadStoredFiles: function() {\n            var idToUpload, stillSubmitting,\n                self = this;\n\n            while (this._storedIds.length) {\n                idToUpload = this._storedIds.shift();\n                this._uploadFile(idToUpload);\n            }\n\n            // If we are still waiting for some files to clear validation, attempt to upload these again in a bit\n            stillSubmitting = this.getUploads({status: qq.status.SUBMITTING}).length;\n            if (stillSubmitting) {\n                qq.log(\"Still waiting for \" + stillSubmitting + \" files to clear submit queue. Will re-parse stored IDs array shortly.\");\n                setTimeout(function() {\n                    self._uploadStoredFiles();\n                }, 1000);\n            }\n        },\n\n        /**\n         * Performs some internal validation checks on an item, defined in the `validation` option.\n         *\n         * @param fileWrapper Wrapper containing a `file` along with an `id`\n         * @param validationDescriptor Normalized information about the item (`size`, `name`).\n         * @returns qq.Promise with appropriate callbacks invoked depending on the validity of the file\n         * @private\n         */\n        _validateFileOrBlobData: function(fileWrapper, validationDescriptor) {\n            var self = this,\n                file = (function() {\n                    if (fileWrapper.file instanceof qq.BlobProxy) {\n                        return fileWrapper.file.referenceBlob;\n                    }\n                    return fileWrapper.file;\n                }()),\n                name = validationDescriptor.name,\n                size = validationDescriptor.size,\n                buttonId = this._getButtonId(fileWrapper.file),\n                validationBase = this._getValidationBase(buttonId),\n                validityChecker = new qq.Promise();\n\n            validityChecker.then(\n                function() {},\n                function() {\n                    self._fileOrBlobRejected(fileWrapper.id, name);\n                });\n\n            if (qq.isFileOrInput(file) && !this._isAllowedExtension(validationBase.allowedExtensions, name)) {\n                this._itemError(\"typeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (!this._options.validation.allowEmpty && size === 0) {\n                this._itemError(\"emptyError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && validationBase.sizeLimit && size > validationBase.sizeLimit) {\n                this._itemError(\"sizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (size > 0 && size < validationBase.minSizeLimit) {\n                this._itemError(\"minSizeError\", name, file);\n                return validityChecker.failure();\n            }\n\n            if (qq.ImageValidation && qq.supportedFeatures.imagePreviews && qq.isFile(file)) {\n                new qq.ImageValidation(file, qq.bind(self.log, self)).validate(validationBase.image).then(\n                    validityChecker.success,\n                    function(errorCode) {\n                        self._itemError(errorCode + \"ImageError\", name, file);\n                        validityChecker.failure();\n                    }\n                );\n            }\n            else {\n                validityChecker.success();\n            }\n\n            return validityChecker;\n        },\n\n        _wrapCallbacks: function() {\n            var self, safeCallback, prop;\n\n            self = this;\n\n            safeCallback = function(name, callback, args) {\n                var errorMsg;\n\n                try {\n                    return callback.apply(self, args);\n                }\n                catch (exception) {\n                    errorMsg = exception.message || exception.toString();\n                    self.log(\"Caught exception in '\" + name + \"' callback - \" + errorMsg, \"error\");\n                }\n            };\n\n            /* jshint forin: false, loopfunc: true */\n            for (prop in this._options.callbacks) {\n                (function() {\n                    var callbackName, callbackFunc;\n                    callbackName = prop;\n                    callbackFunc = self._options.callbacks[callbackName];\n                    self._options.callbacks[callbackName] = function() {\n                        return safeCallback(callbackName, callbackFunc, arguments);\n                    };\n                }());\n            }\n        }\n    };\n}());\n","/*globals qq*/\n(function() {\n    \"use strict\";\n\n    qq.FineUploaderBasic = function(o) {\n        var self = this;\n\n        // These options define FineUploaderBasic mode.\n        this._options = {\n            debug: false,\n            button: null,\n            multiple: true,\n            maxConnections: 3,\n            disableCancelForFormUploads: false,\n            autoUpload: true,\n            warnBeforeUnload: true,\n\n            request: {\n                customHeaders: {},\n                endpoint: \"/server/upload\",\n                filenameParam: \"qqfilename\",\n                forceMultipart: true,\n                inputName: \"qqfile\",\n                method: \"POST\",\n                omitDefaultParams: false,\n                params: {},\n                paramsInBody: true,\n                requireSuccessJson: true,\n                totalFileSizeName: \"qqtotalfilesize\",\n                uuidName: \"qquuid\"\n            },\n\n            validation: {\n                allowedExtensions: [],\n                sizeLimit: 0,\n                minSizeLimit: 0,\n                itemLimit: 0,\n                stopOnFirstInvalidFile: true,\n                acceptFiles: null,\n                image: {\n                    maxHeight: 0,\n                    maxWidth: 0,\n                    minHeight: 0,\n                    minWidth: 0\n                },\n                allowEmpty: false\n            },\n\n            callbacks: {\n                onSubmit: function(id, name) {},\n                onSubmitted: function(id, name) {},\n                onComplete: function(id, name, responseJSON, maybeXhr) {},\n                onAllComplete: function(successful, failed) {},\n                onCancel: function(id, name) {},\n                onUpload: function(id, name) {},\n                onUploadChunk: function(id, name, chunkData) {},\n                onUploadChunkSuccess: function(id, chunkData, responseJSON, xhr) {},\n                onResume: function(id, fileName, chunkData, customResumeData) {},\n                onProgress: function(id, name, loaded, total) {},\n                onTotalProgress: function(loaded, total) {},\n                onError: function(id, name, reason, maybeXhrOrXdr) {},\n                onAutoRetry: function(id, name, attemptNumber) {},\n                onManualRetry: function(id, name) {},\n                onValidateBatch: function(fileOrBlobData) {},\n                onValidate: function(fileOrBlobData) {},\n                onSubmitDelete: function(id) {},\n                onDelete: function(id) {},\n                onDeleteComplete: function(id, xhrOrXdr, isError) {},\n                onPasteReceived: function(blob) {},\n                onStatusChange: function(id, oldStatus, newStatus) {},\n                onSessionRequestComplete: function(response, success, xhrOrXdr) {}\n            },\n\n            messages: {\n                typeError: \"{file} has an invalid extension. Valid extension(s): {extensions}.\",\n                sizeError: \"{file} is too large, maximum file size is {sizeLimit}.\",\n                minSizeError: \"{file} is too small, minimum file size is {minSizeLimit}.\",\n                emptyError: \"{file} is empty, please select files again without it.\",\n                noFilesError: \"No files to upload.\",\n                tooManyItemsError: \"Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.\",\n                maxHeightImageError: \"Image is too tall.\",\n                maxWidthImageError: \"Image is too wide.\",\n                minHeightImageError: \"Image is not tall enough.\",\n                minWidthImageError: \"Image is not wide enough.\",\n                retryFailTooManyItems: \"Retry failed - you have reached your file limit.\",\n                onLeave: \"The files are being uploaded, if you leave now the upload will be canceled.\",\n                unsupportedBrowserIos8Safari: \"Unrecoverable error - this browser does not permit file uploading of any kind due to serious bugs in iOS8 Safari.  Please use iOS8 Chrome until Apple fixes these issues.\"\n            },\n\n            retry: {\n                enableAuto: false,\n                maxAutoAttempts: 3,\n                autoAttemptDelay: 5,\n                preventRetryResponseProperty: \"preventRetry\"\n            },\n\n            classes: {\n                buttonHover: \"qq-upload-button-hover\",\n                buttonFocus: \"qq-upload-button-focus\"\n            },\n\n            chunking: {\n                enabled: false,\n                concurrent: {\n                    enabled: false\n                },\n                mandatory: false,\n                paramNames: {\n                    partIndex: \"qqpartindex\",\n                    partByteOffset: \"qqpartbyteoffset\",\n                    chunkSize: \"qqchunksize\",\n                    totalFileSize: \"qqtotalfilesize\",\n                    totalParts: \"qqtotalparts\"\n                },\n                partSize: function(id) {\n                    return 2000000;\n                },\n                // only relevant for traditional endpoints, only required when concurrent.enabled === true\n                success: {\n                    endpoint: null,\n\n                    headers: function(id) {\n                        return null;\n                    },\n\n                    jsonPayload: false,\n\n                    method: \"POST\",\n\n                    params: function(id) {\n                        return null;\n                    },\n\n                    resetOnStatus: []\n                }\n            },\n\n            resume: {\n                enabled: false,\n                recordsExpireIn: 7, //days\n                paramNames: {\n                    resuming: \"qqresume\"\n                },\n                customKeys: function(fileId) {\n                    return [];\n                }\n            },\n\n            formatFileName: function(fileOrBlobName) {\n                return fileOrBlobName;\n            },\n\n            text: {\n                defaultResponseError: \"Upload failure reason unknown\",\n                fileInputTitle: \"file input\",\n                sizeSymbols: [\"kB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\"]\n            },\n\n            deleteFile: {\n                enabled: false,\n                method: \"DELETE\",\n                endpoint: \"/server/upload\",\n                customHeaders: {},\n                params: {}\n            },\n\n            cors: {\n                expected: false,\n                sendCredentials: false,\n                allowXdr: false\n            },\n\n            blobs: {\n                defaultName: \"misc_data\"\n            },\n\n            paste: {\n                targetElement: null,\n                defaultName: \"pasted_image\"\n            },\n\n            camera: {\n                ios: false,\n\n                // if ios is true: button is null means target the default button, otherwise target the button specified\n                button: null\n            },\n\n            // This refers to additional upload buttons to be handled by Fine Uploader.\n            // Each element is an object, containing `element` as the only required\n            // property.  The `element` must be a container that will ultimately\n            // contain an invisible `<input type=\"file\">` created by Fine Uploader.\n            // Optional properties of each object include `multiple`, `validation`,\n            // and `folders`.\n            extraButtons: [],\n\n            // Depends on the session module.  Used to query the server for an initial file list\n            // during initialization and optionally after a `reset`.\n            session: {\n                endpoint: null,\n                params: {},\n                customHeaders: {},\n                refreshOnReset: true\n            },\n\n            // Send parameters associated with an existing form along with the files\n            form: {\n                // Element ID, HTMLElement, or null\n                element: \"qq-form\",\n\n                // Overrides the base `autoUpload`, unless `element` is null.\n                autoUpload: false,\n\n                // true = upload files on form submission (and squelch submit event)\n                interceptSubmit: true\n            },\n\n            // scale images client side, upload a new file for each scaled version\n            scaling: {\n                customResizer: null,\n\n                // send the original file as well\n                sendOriginal: true,\n\n                // fox orientation for scaled images\n                orient: true,\n\n                // If null, scaled image type will match reference image type.  This value will be referred to\n                // for any size record that does not specific a type.\n                defaultType: null,\n\n                defaultQuality: 80,\n\n                failureText: \"Failed to scale\",\n\n                includeExif: false,\n\n                // metadata about each requested scaled version\n                sizes: []\n            },\n\n            workarounds: {\n                iosEmptyVideos: true,\n                ios8SafariUploads: true,\n                ios8BrowserCrash: false\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(this._options, o, true);\n\n        this._buttons = [];\n        this._extraButtonSpecs = {};\n        this._buttonIdsForFileIds = [];\n\n        this._wrapCallbacks();\n        this._disposeSupport =  new qq.DisposeSupport();\n\n        this._storedIds = [];\n        this._autoRetries = [];\n        this._retryTimeouts = [];\n        this._preventRetries = [];\n        this._thumbnailUrls = [];\n\n        this._netUploadedOrQueued = 0;\n        this._netUploaded = 0;\n        this._uploadData = this._createUploadDataTracker();\n\n        this._initFormSupportAndParams();\n\n        this._customHeadersStore = this._createStore(this._options.request.customHeaders);\n        this._deleteFileCustomHeadersStore = this._createStore(this._options.deleteFile.customHeaders);\n\n        this._deleteFileParamsStore = this._createStore(this._options.deleteFile.params);\n\n        this._endpointStore = this._createStore(this._options.request.endpoint);\n        this._deleteFileEndpointStore = this._createStore(this._options.deleteFile.endpoint);\n\n        this._handler = this._createUploadHandler();\n\n        this._deleteHandler = qq.DeleteFileAjaxRequester && this._createDeleteHandler();\n\n        if (this._options.button) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._options.button,\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._generateExtraButtonSpecs();\n\n        this._handleCameraAccess();\n\n        if (this._options.paste.targetElement) {\n            if (qq.PasteSupport) {\n                this._pasteHandler = this._createPasteHandler();\n            }\n            else {\n                this.log(\"Paste support module not found\", \"error\");\n            }\n        }\n\n        this._options.warnBeforeUnload && this._preventLeaveInProgress();\n\n        this._imageGenerator = qq.ImageGenerator && new qq.ImageGenerator(qq.bind(this.log, this));\n        this._refreshSessionData();\n\n        this._succeededSinceLastAllComplete = [];\n        this._failedSinceLastAllComplete = [];\n\n        this._scaler = (qq.Scaler && new qq.Scaler(this._options.scaling, qq.bind(this.log, this))) || {};\n        if (this._scaler.enabled) {\n            this._customNewFileHandler = qq.bind(this._scaler.handleNewFile, this._scaler);\n        }\n\n        if (qq.TotalProgress && qq.supportedFeatures.progressBar) {\n            this._totalProgress = new qq.TotalProgress(\n                qq.bind(this._onTotalProgress, this),\n\n                function(id) {\n                    var entry = self._uploadData.retrieve({id: id});\n                    return (entry && entry.size) || 0;\n                }\n            );\n        }\n\n        this._currentItemLimit = this._options.validation.itemLimit;\n\n        this._customResumeDataStore = this._createStore();\n    };\n\n    // Define the private & public API methods.\n    qq.FineUploaderBasic.prototype = qq.basePublicApi;\n    qq.extend(qq.FineUploaderBasic.prototype, qq.basePrivateApi);\n}());\n","/*globals qq, XDomainRequest*/\n/** Generic class for sending non-upload ajax requests and handling the associated responses **/\nqq.AjaxRequester = function(o) {\n    \"use strict\";\n\n    var log, shouldParamsBeInQueryString,\n        queue = [],\n        requestData = {},\n        options = {\n            acceptHeader: null,\n            validMethods: [\"PATCH\", \"POST\", \"PUT\"],\n            method: \"POST\",\n            contentType: \"application/x-www-form-urlencoded\",\n            maxConnections: 3,\n            customHeaders: {},\n            endpointStore: {},\n            paramsStore: {},\n            mandatedParams: {},\n            allowXRequestedWithAndCacheControl: true,\n            successfulResponseCodes: {\n                DELETE: [200, 202, 204],\n                PATCH: [200, 201, 202, 203, 204],\n                POST: [200, 201, 202, 203, 204],\n                PUT: [200, 201, 202, 203, 204],\n                GET: [200]\n            },\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onSend: function(id) {},\n            onComplete: function(id, xhrOrXdr, isError) {},\n            onProgress: null\n        };\n\n    qq.extend(options, o);\n    log = options.log;\n\n    if (qq.indexOf(options.validMethods, options.method) < 0) {\n        throw new Error(\"'\" + options.method + \"' is not a supported method for this type of request!\");\n    }\n\n    // [Simple methods](http://www.w3.org/TR/cors/#simple-method)\n    // are defined by the W3C in the CORS spec as a list of methods that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function isSimpleMethod() {\n        return qq.indexOf([\"GET\", \"POST\", \"HEAD\"], options.method) >= 0;\n    }\n\n    // [Simple headers](http://www.w3.org/TR/cors/#simple-header)\n    // are defined by the W3C in the CORS spec as a list of headers that, in part,\n    // make a CORS request eligible to be exempt from preflighting.\n    function containsNonSimpleHeaders(headers) {\n        var containsNonSimple = false;\n\n        qq.each(containsNonSimple, function(idx, header) {\n            if (qq.indexOf([\"Accept\", \"Accept-Language\", \"Content-Language\", \"Content-Type\"], header) < 0) {\n                containsNonSimple = true;\n                return false;\n            }\n        });\n\n        return containsNonSimple;\n    }\n\n    function isXdr(xhr) {\n        //The `withCredentials` test is a commonly accepted way to determine if XHR supports CORS.\n        return options.cors.expected && xhr.withCredentials === undefined;\n    }\n\n    // Returns either a new `XMLHttpRequest` or `XDomainRequest` instance.\n    function getCorsAjaxTransport() {\n        var xhrOrXdr;\n\n        if (window.XMLHttpRequest || window.ActiveXObject) {\n            xhrOrXdr = qq.createXhrInstance();\n\n            if (xhrOrXdr.withCredentials === undefined) {\n                xhrOrXdr = new XDomainRequest();\n                // Workaround for XDR bug in IE9 - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n                xhrOrXdr.onload = function() {};\n                xhrOrXdr.onerror = function() {};\n                xhrOrXdr.ontimeout = function() {};\n                xhrOrXdr.onprogress = function() {};\n            }\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Returns either a new XHR/XDR instance, or an existing one for the associated `File` or `Blob`.\n    function getXhrOrXdr(id, suppliedXhr) {\n        var xhrOrXdr = requestData[id].xhr;\n\n        if (!xhrOrXdr) {\n            if (suppliedXhr) {\n                xhrOrXdr = suppliedXhr;\n            }\n            else {\n                if (options.cors.expected) {\n                    xhrOrXdr = getCorsAjaxTransport();\n                }\n                else {\n                    xhrOrXdr = qq.createXhrInstance();\n                }\n            }\n\n            requestData[id].xhr = xhrOrXdr;\n        }\n\n        return xhrOrXdr;\n    }\n\n    // Removes element from queue, sends next request\n    function dequeue(id) {\n        var i = qq.indexOf(queue, id),\n            max = options.maxConnections,\n            nextId;\n\n        delete requestData[id];\n        queue.splice(i, 1);\n\n        if (queue.length >= max && i < max) {\n            nextId = queue[max - 1];\n            sendRequest(nextId);\n        }\n    }\n\n    function onComplete(id, xdrError) {\n        var xhr = getXhrOrXdr(id),\n            method = options.method,\n            isError = xdrError === true;\n\n        dequeue(id);\n\n        if (isError) {\n            log(method + \" request for \" + id + \" has failed\", \"error\");\n        }\n        else if (!isXdr(xhr) && !isResponseSuccessful(xhr.status)) {\n            isError = true;\n            log(method + \" request for \" + id + \" has failed - response code \" + xhr.status, \"error\");\n        }\n\n        options.onComplete(id, xhr, isError);\n    }\n\n    function getParams(id) {\n        var onDemandParams = requestData[id].additionalParams,\n            mandatedParams = options.mandatedParams,\n            params;\n\n        if (options.paramsStore.get) {\n            params = options.paramsStore.get(id);\n        }\n\n        if (onDemandParams) {\n            qq.each(onDemandParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        if (mandatedParams) {\n            qq.each(mandatedParams, function(name, val) {\n                params = params || {};\n                params[name] = val;\n            });\n        }\n\n        return params;\n    }\n\n    function sendRequest(id, optXhr) {\n        var xhr = getXhrOrXdr(id, optXhr),\n            method = options.method,\n            params = getParams(id),\n            payload = requestData[id].payload,\n            url;\n\n        options.onSend(id);\n\n        url = createUrl(id, params, requestData[id].additionalQueryParams);\n\n        // XDR and XHR status detection APIs differ a bit.\n        if (isXdr(xhr)) {\n            xhr.onload = getXdrLoadHandler(id);\n            xhr.onerror = getXdrErrorHandler(id);\n        }\n        else {\n            xhr.onreadystatechange = getXhrReadyStateChangeHandler(id);\n        }\n\n        registerForUploadProgress(id);\n\n        // The last parameter is assumed to be ignored if we are actually using `XDomainRequest`.\n        xhr.open(method, url, true);\n\n        // Instruct the transport to send cookies along with the CORS request,\n        // unless we are using `XDomainRequest`, which is not capable of this.\n        if (options.cors.expected && options.cors.sendCredentials && !isXdr(xhr)) {\n            xhr.withCredentials = true;\n        }\n\n        setHeaders(id);\n\n        log(\"Sending \" + method + \" request for \" + id);\n\n        if (payload) {\n            xhr.send(payload);\n        }\n        else if (shouldParamsBeInQueryString || !params) {\n            xhr.send();\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/x-www-form-urlencoded\") >= 0) {\n            xhr.send(qq.obj2url(params, \"\"));\n        }\n        else if (params && options.contentType && options.contentType.toLowerCase().indexOf(\"application/json\") >= 0) {\n            xhr.send(JSON.stringify(params));\n        }\n        else {\n            xhr.send(params);\n        }\n\n        return xhr;\n    }\n\n    function createUrl(id, params, additionalQueryParams) {\n        var endpoint = options.endpointStore.get(id),\n            addToPath = requestData[id].addToPath;\n\n        /*jshint -W116,-W041 */\n        if (addToPath != undefined) {\n            endpoint += \"/\" + addToPath;\n        }\n\n        if (shouldParamsBeInQueryString && params) {\n            endpoint = qq.obj2url(params, endpoint);\n        }\n\n        if (additionalQueryParams) {\n            endpoint = qq.obj2url(additionalQueryParams, endpoint);\n        }\n\n        return endpoint;\n    }\n\n    // Invoked by the UA to indicate a number of possible states that describe\n    // a live `XMLHttpRequest` transport.\n    function getXhrReadyStateChangeHandler(id) {\n        return function() {\n            if (getXhrOrXdr(id).readyState === 4) {\n                onComplete(id);\n            }\n        };\n    }\n\n    function registerForUploadProgress(id) {\n        var onProgress = options.onProgress;\n\n        if (onProgress) {\n            getXhrOrXdr(id).upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    onProgress(id, e.loaded, e.total);\n                }\n            };\n        }\n    }\n\n    // This will be called by IE to indicate **success** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrLoadHandler(id) {\n        return function() {\n            onComplete(id);\n        };\n    }\n\n    // This will be called by IE to indicate **failure** for an associated\n    // `XDomainRequest` transported request.\n    function getXdrErrorHandler(id) {\n        return function() {\n            onComplete(id, true);\n        };\n    }\n\n    function setHeaders(id) {\n        var xhr = getXhrOrXdr(id),\n            customHeaders = options.customHeaders,\n            onDemandHeaders = requestData[id].additionalHeaders || {},\n            method = options.method,\n            allHeaders = {};\n\n        // If XDomainRequest is being used, we can't set headers, so just ignore this block.\n        if (!isXdr(xhr)) {\n            options.acceptHeader && xhr.setRequestHeader(\"Accept\", options.acceptHeader);\n\n            // Only attempt to add X-Requested-With & Cache-Control if permitted\n            if (options.allowXRequestedWithAndCacheControl) {\n                // Do not add X-Requested-With & Cache-Control if this is a cross-origin request\n                // OR the cross-origin request contains a non-simple method or header.\n                // This is done to ensure a preflight is not triggered exclusively based on the\n                // addition of these 2 non-simple headers.\n                if (!options.cors.expected || (!isSimpleMethod() || containsNonSimpleHeaders(customHeaders))) {\n                    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n                    xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n                }\n            }\n\n            if (options.contentType && (method === \"POST\" || method === \"PUT\")) {\n                xhr.setRequestHeader(\"Content-Type\", options.contentType);\n            }\n\n            qq.extend(allHeaders, qq.isFunction(customHeaders) ? customHeaders(id) : customHeaders);\n            qq.extend(allHeaders, onDemandHeaders);\n\n            qq.each(allHeaders, function(name, val) {\n                xhr.setRequestHeader(name, val);\n            });\n        }\n    }\n\n    function isResponseSuccessful(responseCode) {\n        return qq.indexOf(options.successfulResponseCodes[options.method], responseCode) >= 0;\n    }\n\n    function prepareToSend(id, optXhr, addToPath, additionalParams, additionalQueryParams, additionalHeaders, payload) {\n        requestData[id] = {\n            addToPath: addToPath,\n            additionalParams: additionalParams,\n            additionalQueryParams: additionalQueryParams,\n            additionalHeaders: additionalHeaders,\n            payload: payload\n        };\n\n        var len = queue.push(id);\n\n        // if too many active connections, wait...\n        if (len <= options.maxConnections) {\n            return sendRequest(id, optXhr);\n        }\n    }\n\n    shouldParamsBeInQueryString = options.method === \"GET\" || options.method === \"DELETE\";\n\n    qq.extend(this, {\n        // Start the process of sending the request.  The ID refers to the file associated with the request.\n        initTransport: function(id) {\n            var path, params, headers, payload, cacheBuster, additionalQueryParams;\n\n            return {\n                // Optionally specify the end of the endpoint path for the request.\n                withPath: function(appendToPath) {\n                    path = appendToPath;\n                    return this;\n                },\n\n                // Optionally specify additional parameters to send along with the request.\n                // These will be added to the query string for GET/DELETE requests or the payload\n                // for POST/PUT requests.  The Content-Type of the request will be used to determine\n                // how these parameters should be formatted as well.\n                withParams: function(additionalParams) {\n                    params = additionalParams;\n                    return this;\n                },\n\n                withQueryParams: function(_additionalQueryParams_) {\n                    additionalQueryParams = _additionalQueryParams_;\n                    return this;\n                },\n\n                // Optionally specify additional headers to send along with the request.\n                withHeaders: function(additionalHeaders) {\n                    headers = additionalHeaders;\n                    return this;\n                },\n\n                // Optionally specify a payload/body for the request.\n                withPayload: function(thePayload) {\n                    payload = thePayload;\n                    return this;\n                },\n\n                // Appends a cache buster (timestamp) to the request URL as a query parameter (only if GET or DELETE)\n                withCacheBuster: function() {\n                    cacheBuster = true;\n                    return this;\n                },\n\n                // Send the constructed request.\n                send: function(optXhr) {\n                    if (cacheBuster && qq.indexOf([\"GET\", \"DELETE\"], options.method) >= 0) {\n                        params.qqtimestamp = new Date().getTime();\n                    }\n\n                    return prepareToSend(id, optXhr, path, params, additionalQueryParams, headers, payload);\n                }\n            };\n        },\n\n        canceled: function(id) {\n            dequeue(id);\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common upload handler functions.\n *\n * @constructor\n */\nqq.UploadHandler = function(spec) {\n    \"use strict\";\n\n    var proxy = spec.proxy,\n        fileState = {},\n        onCancel = proxy.onCancel,\n        getName = proxy.getName;\n\n    qq.extend(this, {\n        add: function(id, fileItem) {\n            fileState[id] = fileItem;\n            fileState[id].temp = {};\n        },\n\n        cancel: function(id) {\n            var self = this,\n                cancelFinalizationEffort = new qq.Promise(),\n                onCancelRetVal = onCancel(id, getName(id), cancelFinalizationEffort);\n\n            onCancelRetVal.then(function() {\n                if (self.isValid(id)) {\n                    fileState[id].canceled = true;\n                    self.expunge(id);\n                }\n                cancelFinalizationEffort.success();\n            });\n        },\n\n        expunge: function(id) {\n            delete fileState[id];\n        },\n\n        getThirdPartyFileId: function(id) {\n            return fileState[id].key;\n        },\n\n        isValid: function(id) {\n            return fileState[id] !== undefined;\n        },\n\n        reset: function() {\n            fileState = {};\n        },\n\n        _getFileState: function(id) {\n            return fileState[id];\n        },\n\n        _setThirdPartyFileId: function(id, thirdPartyFileId) {\n            fileState[id].key = thirdPartyFileId;\n        },\n\n        _wasCanceled: function(id) {\n            return !!fileState[id].canceled;\n        }\n    });\n};\n","/*globals qq*/\n/**\n * Base upload handler module.  Controls more specific handlers.\n *\n * @param o Options.  Passed along to the specific handler submodule as well.\n * @param namespace [optional] Namespace for the specific handler.\n */\nqq.UploadHandlerController = function(o, namespace) {\n    \"use strict\";\n\n    var controller = this,\n        chunkingPossible = false,\n        concurrentChunkingPossible = false,\n        chunking, preventRetryResponse, log, handler,\n\n    options = {\n        paramsStore: {},\n        maxConnections: 3, // maximum number of concurrent uploads\n        chunking: {\n            enabled: false,\n            multiple: {\n                enabled: false\n            }\n        },\n        log: function(str, level) {},\n        onProgress: function(id, fileName, loaded, total) {},\n        onComplete: function(id, fileName, response, xhr) {},\n        onCancel: function(id, fileName) {},\n        onUploadPrep: function(id) {}, // Called if non-trivial operations will be performed before onUpload\n        onUpload: function(id, fileName) {},\n        onUploadChunk: function(id, fileName, chunkData) {},\n        onUploadChunkSuccess: function(id, chunkData, response, xhr) {},\n        onAutoRetry: function(id, fileName, response, xhr) {},\n        onResume: function(id, fileName, chunkData, customResumeData) {},\n        onUuidChanged: function(id, newUuid) {},\n        getName: function(id) {},\n        setSize: function(id, newSize) {},\n        isQueued: function(id) {},\n        getIdsInProxyGroup: function(id) {},\n        getIdsInBatch: function(id) {},\n        isInProgress: function(id) {}\n    },\n\n    chunked = {\n        // Called when each chunk has uploaded successfully\n        done: function(id, chunkIdx, response, xhr) {\n            var chunkData = handler._getChunkData(id, chunkIdx);\n\n            handler._getFileState(id).attemptingResume = false;\n\n            delete handler._getFileState(id).temp.chunkProgress[chunkIdx];\n            handler._getFileState(id).loaded += chunkData.size;\n\n            options.onUploadChunkSuccess(id, handler._getChunkDataForCallback(chunkData), response, xhr);\n        },\n\n        // Called when all chunks have been successfully uploaded and we want to ask the handler to perform any\n        // logic associated with closing out the file, such as combining the chunks.\n        finalize: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id);\n\n            log(\"All chunks have been uploaded for \" + id + \" - finalizing....\");\n            handler.finalizeChunks(id).then(\n                function(response, xhr) {\n                    log(\"Finalize successful for \" + id);\n\n                    var normaizedResponse = upload.normalizeResponse(response, true);\n\n                    options.onProgress(id, name, size, size);\n                    handler._maybeDeletePersistedChunkData(id);\n                    upload.cleanup(id, normaizedResponse, xhr);\n                },\n                function(response, xhr) {\n                    var normalizedResponse = upload.normalizeResponse(response, false);\n\n                    log(\"Problem finalizing chunks for file ID \" + id + \" - \" + normalizedResponse.error, \"error\");\n\n                    if (\n                        normalizedResponse.reset ||\n                        (xhr && options.chunking.success.resetOnStatus.indexOf(xhr.status) >= 0)\n                    ) {\n                        chunked.reset(id);\n                    }\n\n                    if (!options.onAutoRetry(id, name, normalizedResponse, xhr)) {\n                        upload.cleanup(id, normalizedResponse, xhr);\n                    }\n                }\n            );\n        },\n\n        handleFailure: function(chunkIdx, id, response, xhr) {\n            var name = options.getName(id);\n\n            log(\"Chunked upload request failed for \" + id + \", chunk \" + chunkIdx);\n\n            handler.clearCachedChunk(id, chunkIdx);\n\n            var responseToReport = upload.normalizeResponse(response, false),\n                inProgressIdx;\n\n            if (responseToReport.reset) {\n                chunked.reset(id);\n            }\n            else {\n                inProgressIdx = qq.indexOf(handler._getFileState(id).chunking.inProgress, chunkIdx);\n                if (inProgressIdx >= 0) {\n                    handler._getFileState(id).chunking.inProgress.splice(inProgressIdx, 1);\n                    handler._getFileState(id).chunking.remaining.unshift(chunkIdx);\n                }\n            }\n\n            // We may have aborted all other in-progress chunks for this file due to a failure.\n            // If so, ignore the failures associated with those aborts.\n            if (!handler._getFileState(id).temp.ignoreFailure) {\n                // If this chunk has failed, we want to ignore all other failures of currently in-progress\n                // chunks since they will be explicitly aborted\n                if (concurrentChunkingPossible) {\n                    handler._getFileState(id).temp.ignoreFailure = true;\n\n                    log(qq.format(\"Going to attempt to abort these chunks: {}. These are currently in-progress: {}.\", JSON.stringify(Object.keys(handler._getXhrs(id))), JSON.stringify(handler._getFileState(id).chunking.inProgress)));\n                    qq.each(handler._getXhrs(id), function(ckid, ckXhr) {\n                        log(qq.format(\"Attempting to abort file {}.{}. XHR readyState {}. \", id, ckid, ckXhr.readyState));\n                        ckXhr.abort();\n                        // Flag the transport, in case we are waiting for some other async operation\n                        // to complete before attempting to upload the chunk\n                        ckXhr._cancelled = true;\n                    });\n\n                    // We must indicate that all aborted chunks are no longer in progress\n                    handler.moveInProgressToRemaining(id);\n\n                    // Free up any connections used by these chunks, but don't allow any\n                    // other files to take up the connections (until we have exhausted all auto-retries)\n                    connectionManager.free(id, true);\n                }\n\n                if (!options.onAutoRetry(id, name, responseToReport, xhr)) {\n                    // If one chunk fails, abort all of the others to avoid odd race conditions that occur\n                    // if a chunk succeeds immediately after one fails before we have determined if the upload\n                    // is a failure or not.\n                    upload.cleanup(id, responseToReport, xhr);\n                }\n            }\n        },\n\n        hasMoreParts: function(id) {\n            return !!handler._getFileState(id).chunking.remaining.length;\n        },\n\n        nextPart: function(id) {\n            var nextIdx = handler._getFileState(id).chunking.remaining.shift();\n\n            if (nextIdx >= handler._getTotalChunks(id)) {\n                nextIdx = null;\n            }\n\n            return nextIdx;\n        },\n\n        reset: function(id) {\n            log(\"Server or callback has ordered chunking effort to be restarted on next attempt for item ID \" + id, \"error\");\n\n            handler._maybeDeletePersistedChunkData(id);\n            handler.reevaluateChunking(id);\n            handler._getFileState(id).loaded = 0;\n            handler._getFileState(id).attemptingResume = false;\n        },\n\n        sendNext: function(id) {\n            var size = options.getSize(id),\n                name = options.getName(id),\n                chunkIdx = chunked.nextPart(id),\n                chunkData = handler._getChunkData(id, chunkIdx),\n                fileState = handler._getFileState(id),\n                resuming = fileState.attemptingResume,\n                inProgressChunks = fileState.chunking.inProgress || [];\n\n            if (fileState.loaded == null) {\n                fileState.loaded = 0;\n            }\n\n            // Don't follow-through with the resume attempt if the integrator returns false from onResume\n            if (resuming && options.onResume(id, name, chunkData, fileState.customResumeData) === false) {\n                chunked.reset(id);\n                chunkIdx = chunked.nextPart(id);\n                chunkData = handler._getChunkData(id, chunkIdx);\n                resuming = false;\n            }\n\n            // If all chunks have already uploaded successfully, we must be re-attempting the finalize step.\n            if (chunkIdx == null && inProgressChunks.length === 0) {\n                chunked.finalize(id);\n            }\n\n            // Send the next chunk\n            else {\n                inProgressChunks.push(chunkIdx);\n                handler._getFileState(id).chunking.inProgress = inProgressChunks;\n\n                if (concurrentChunkingPossible) {\n                    connectionManager.open(id, chunkIdx);\n                }\n\n                if (concurrentChunkingPossible && connectionManager.available() && handler._getFileState(id).chunking.remaining.length) {\n                    chunked.sendNext(id);\n                }\n\n                if (chunkData.blob.size === 0) {\n                    log(qq.format(\"Chunk {} for file {} will not be uploaded, zero sized chunk.\", chunkIdx, id), \"error\");\n                    chunked.handleFailure(chunkIdx, id, \"File is no longer available\", null);\n                }\n\n                var onUploadChunkPromise = options.onUploadChunk(id, name, handler._getChunkDataForCallback(chunkData));\n\n                onUploadChunkPromise.then(\n                    function(requestOverrides) {\n                        if (!options.isInProgress(id)) {\n                            log(qq.format(\"Not sending chunked upload request for item {}.{} - no longer in progress.\", id, chunkIdx));\n                        }\n                        else {\n                            log(qq.format(\"Sending chunked upload request for item {}.{}, bytes {}-{} of {}.\", id, chunkIdx, chunkData.start + 1, chunkData.end, size));\n\n                            var uploadChunkData = {\n                                chunkIdx: chunkIdx,\n                                id: id,\n                                overrides: requestOverrides,\n                                resuming: resuming\n                            };\n\n                            handler.uploadChunk(uploadChunkData).then(\n                                // upload chunk success\n                                function success(response, xhr) {\n                                    log(\"Chunked upload request succeeded for \" + id + \", chunk \" + chunkIdx);\n\n                                    handler.clearCachedChunk(id, chunkIdx);\n\n                                    var inProgressChunks = handler._getFileState(id).chunking.inProgress || [],\n                                        responseToReport = upload.normalizeResponse(response, true),\n                                        inProgressChunkIdx = qq.indexOf(inProgressChunks, chunkIdx);\n\n                                    log(qq.format(\"Chunk {} for file {} uploaded successfully.\", chunkIdx, id));\n\n                                    chunked.done(id, chunkIdx, responseToReport, xhr);\n\n                                    if (inProgressChunkIdx >= 0) {\n                                        inProgressChunks.splice(inProgressChunkIdx, 1);\n                                    }\n\n                                    handler._maybePersistChunkedState(id);\n\n                                    if (!chunked.hasMoreParts(id) && inProgressChunks.length === 0) {\n                                        chunked.finalize(id);\n                                    }\n                                    else if (chunked.hasMoreParts(id)) {\n                                        chunked.sendNext(id);\n                                    }\n                                    else {\n                                        log(qq.format(\"File ID {} has no more chunks to send and these chunk indexes are still marked as in-progress: {}\", id, JSON.stringify(inProgressChunks)));\n                                    }\n                                },\n\n                                // upload chunk failure\n                                function failure(response, xhr) {\n                                    chunked.handleFailure(chunkIdx, id, response, xhr);\n                                }\n                            )\n                                .done(function () {\n                                    handler.clearXhr(id, chunkIdx);\n                                });\n                        }\n                    },\n\n                    function(error) {\n                        chunked.handleFailure(chunkIdx, id, error, null);\n                    }\n                );\n            }\n        }\n    },\n\n    connectionManager = {\n        _open: [],\n        _openChunks: {},\n        _waiting: [],\n\n        available: function() {\n            var max = options.maxConnections,\n                openChunkEntriesCount = 0,\n                openChunksCount = 0;\n\n            qq.each(connectionManager._openChunks, function(fileId, openChunkIndexes) {\n                openChunkEntriesCount++;\n                openChunksCount += openChunkIndexes.length;\n            });\n\n            return max - (connectionManager._open.length - openChunkEntriesCount + openChunksCount);\n        },\n\n        /**\n         * Removes element from queue, starts upload of next\n         */\n        free: function(id, dontAllowNext) {\n            var allowNext = !dontAllowNext,\n                waitingIndex = qq.indexOf(connectionManager._waiting, id),\n                connectionsIndex = qq.indexOf(connectionManager._open, id),\n                nextId;\n\n            delete connectionManager._openChunks[id];\n\n            if (upload.getProxyOrBlob(id) instanceof qq.BlobProxy) {\n                log(\"Generated blob upload has ended for \" + id + \", disposing generated blob.\");\n                delete handler._getFileState(id).file;\n            }\n\n            // If this file was not consuming a connection, it was just waiting, so remove it from the waiting array\n            if (waitingIndex >= 0) {\n                connectionManager._waiting.splice(waitingIndex, 1);\n            }\n            // If this file was consuming a connection, allow the next file to be uploaded\n            else if (allowNext && connectionsIndex >= 0) {\n                connectionManager._open.splice(connectionsIndex, 1);\n\n                nextId = connectionManager._waiting.shift();\n                if (nextId >= 0) {\n                    connectionManager._open.push(nextId);\n                    upload.start(nextId);\n                }\n            }\n        },\n\n        getWaitingOrConnected: function() {\n            var waitingOrConnected = [];\n\n            // Chunked files may have multiple connections open per chunk (if concurrent chunking is enabled)\n            // We need to grab the file ID of any file that has at least one chunk consuming a connection.\n            qq.each(connectionManager._openChunks, function(fileId, chunks) {\n                if (chunks && chunks.length) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // For non-chunked files, only one connection will be consumed per file.\n            // This is where we aggregate those file IDs.\n            qq.each(connectionManager._open, function(idx, fileId) {\n                if (!connectionManager._openChunks[fileId]) {\n                    waitingOrConnected.push(parseInt(fileId));\n                }\n            });\n\n            // There may be files waiting for a connection.\n            waitingOrConnected = waitingOrConnected.concat(connectionManager._waiting);\n\n            return waitingOrConnected;\n        },\n\n        isUsingConnection: function(id) {\n            return qq.indexOf(connectionManager._open, id) >= 0;\n        },\n\n        open: function(id, chunkIdx) {\n            if (chunkIdx == null) {\n                connectionManager._waiting.push(id);\n            }\n\n            if (connectionManager.available()) {\n                if (chunkIdx == null) {\n                    connectionManager._waiting.pop();\n                    connectionManager._open.push(id);\n                }\n                else {\n                    (function() {\n                        var openChunksEntry = connectionManager._openChunks[id] || [];\n                        openChunksEntry.push(chunkIdx);\n                        connectionManager._openChunks[id] = openChunksEntry;\n                    }());\n                }\n\n                return true;\n            }\n\n            return false;\n        },\n\n        reset: function() {\n            connectionManager._waiting = [];\n            connectionManager._open = [];\n        }\n    },\n\n    simple = {\n        send: function(id, name) {\n            handler._getFileState(id).loaded = 0;\n\n            log(\"Sending simple upload request for \" + id);\n            handler.uploadFile(id).then(\n                function(response, optXhr) {\n                    log(\"Simple upload request succeeded for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, true),\n                        size = options.getSize(id);\n\n                    options.onProgress(id, name, size, size);\n                    upload.maybeNewUuid(id, responseToReport);\n                    upload.cleanup(id, responseToReport, optXhr);\n                },\n\n                function(response, optXhr) {\n                    log(\"Simple upload request failed for \" + id);\n\n                    var responseToReport = upload.normalizeResponse(response, false);\n\n                    if (!options.onAutoRetry(id, name, responseToReport, optXhr)) {\n                        upload.cleanup(id, responseToReport, optXhr);\n                    }\n                }\n            );\n        }\n    },\n\n    upload = {\n        cancel: function(id) {\n            log(\"Cancelling \" + id);\n            options.paramsStore.remove(id);\n            connectionManager.free(id);\n        },\n\n        cleanup: function(id, response, optXhr) {\n            var name = options.getName(id);\n\n            options.onComplete(id, name, response, optXhr);\n\n            if (handler._getFileState(id)) {\n                handler._clearXhrs && handler._clearXhrs(id);\n            }\n\n            connectionManager.free(id);\n        },\n\n        // Returns a qq.BlobProxy, or an actual File/Blob if no proxy is involved, or undefined\n        // if none of these are available for the ID\n        getProxyOrBlob: function(id) {\n            return (handler.getProxy && handler.getProxy(id)) ||\n                (handler.getFile && handler.getFile(id));\n        },\n\n        initHandler: function() {\n            var handlerType = namespace ? qq[namespace] : qq.traditional,\n                handlerModuleSubtype = qq.supportedFeatures.ajaxUploading ? \"Xhr\" : \"Form\";\n\n            handler = new handlerType[handlerModuleSubtype + \"UploadHandler\"](\n                options,\n                {\n                    getCustomResumeData: options.getCustomResumeData,\n                    getDataByUuid: options.getDataByUuid,\n                    getName: options.getName,\n                    getSize: options.getSize,\n                    getUuid: options.getUuid,\n                    log: log,\n                    onCancel: options.onCancel,\n                    onProgress: options.onProgress,\n                    onUuidChanged: options.onUuidChanged,\n                    onFinalizing: function(id) {\n                        options.setStatus(id, qq.status.UPLOAD_FINALIZING);\n                    }\n                }\n            );\n\n            if (handler._removeExpiredChunkingRecords) {\n                handler._removeExpiredChunkingRecords();\n            }\n        },\n\n        isDeferredEligibleForUpload: function(id) {\n            return options.isQueued(id);\n        },\n\n        // For Blobs that are part of a group of generated images, along with a reference image,\n        // this will ensure the blobs in the group are uploaded in the order they were triggered,\n        // even if some async processing must be completed on one or more Blobs first.\n        maybeDefer: function(id, blob) {\n            // If we don't have a file/blob yet & no file/blob exists for this item, request it,\n            // and then submit the upload to the specific handler once the blob is available.\n            // ASSUMPTION: This condition will only ever be true if XHR uploading is supported.\n            if (blob && !handler.getFile(id) && blob instanceof qq.BlobProxy) {\n\n                // Blob creation may take some time, so the caller may want to update the\n                // UI to indicate that an operation is in progress, even before the actual\n                // upload begins and an onUpload callback is invoked.\n                options.onUploadPrep(id);\n\n                log(\"Attempting to generate a blob on-demand for \" + id);\n                blob.create().then(function(generatedBlob) {\n                    log(\"Generated an on-demand blob for \" + id);\n\n                    // Update record associated with this file by providing the generated Blob\n                    handler.updateBlob(id, generatedBlob);\n\n                    // Propagate the size for this generated Blob\n                    options.setSize(id, generatedBlob.size);\n\n                    // Order handler to recalculate chunking possibility, if applicable\n                    handler.reevaluateChunking(id);\n\n                    upload.maybeSendDeferredFiles(id);\n                },\n\n                // Blob could not be generated.  Fail the upload & attempt to prevent retries.  Also bubble error message.\n                function(errorMessage) {\n                    var errorResponse = {};\n\n                    if (errorMessage) {\n                        errorResponse.error = errorMessage;\n                    }\n\n                    log(qq.format(\"Failed to generate blob for ID {}.  Error message: {}.\", id, errorMessage), \"error\");\n\n                    options.onComplete(id, options.getName(id), qq.extend(errorResponse, preventRetryResponse), null);\n                    upload.maybeSendDeferredFiles(id);\n                    connectionManager.free(id);\n                });\n            }\n            else {\n                return upload.maybeSendDeferredFiles(id);\n            }\n\n            return false;\n        },\n\n        // Upload any grouped blobs, in the proper order, that are ready to be uploaded\n        maybeSendDeferredFiles: function(id) {\n            var idsInGroup = options.getIdsInProxyGroup(id),\n                uploadedThisId = false;\n\n            if (idsInGroup && idsInGroup.length) {\n                log(\"Maybe ready to upload proxy group file \" + id);\n\n                qq.each(idsInGroup, function(idx, idInGroup) {\n                    if (upload.isDeferredEligibleForUpload(idInGroup) && !!handler.getFile(idInGroup)) {\n                        uploadedThisId = idInGroup === id;\n                        upload.now(idInGroup);\n                    }\n                    else if (upload.isDeferredEligibleForUpload(idInGroup)) {\n                        return false;\n                    }\n                });\n            }\n            else {\n                uploadedThisId = true;\n                upload.now(id);\n            }\n\n            return uploadedThisId;\n        },\n\n        maybeNewUuid: function(id, response) {\n            if (response.newUuid !== undefined) {\n                options.onUuidChanged(id, response.newUuid);\n            }\n        },\n\n        // The response coming from handler implementations may be in various formats.\n        // Instead of hoping a promise nested 5 levels deep will always return an object\n        // as its first param, let's just normalize the response here.\n        normalizeResponse: function(originalResponse, successful) {\n            var response = originalResponse;\n\n            // The passed \"response\" param may not be a response at all.\n            // It could be a string, detailing the error, for example.\n            if (!qq.isObject(originalResponse)) {\n                response = {};\n\n                if (qq.isString(originalResponse) && !successful) {\n                    response.error = originalResponse;\n                }\n            }\n\n            response.success = successful;\n\n            return response;\n        },\n\n        now: function(id) {\n            var name = options.getName(id);\n\n            if (!controller.isValid(id)) {\n                throw new qq.Error(id + \" is not a valid file ID to upload!\");\n            }\n\n            options.onUpload(id, name).then(\n                function(response) {\n                    if (response && response.pause) {\n                        options.setStatus(id, qq.status.PAUSED);\n                        handler.pause(id);\n                        connectionManager.free(id);\n                    }\n                    else {\n                        if (chunkingPossible && handler._shouldChunkThisFile(id)) {\n                            chunked.sendNext(id);\n                        }\n                        else {\n                            simple.send(id, name);\n                        }\n                    }\n                },\n\n                function(error) {\n                    error = error || {};\n\n                    log(id + \" upload start aborted due to rejected onUpload Promise - details: \" + error, \"error\");\n\n                    if (!options.onAutoRetry(id, name, error.responseJSON || {})) {\n                        var response = upload.normalizeResponse(error.responseJSON, false);\n                        upload.cleanup(id, response);\n                    }\n                }\n            );\n        },\n\n        start: function(id) {\n            var blobToUpload = upload.getProxyOrBlob(id);\n\n            if (blobToUpload) {\n                return upload.maybeDefer(id, blobToUpload);\n            }\n            else {\n                upload.now(id);\n                return true;\n            }\n        }\n    };\n\n    qq.extend(this, {\n        /**\n         * Adds file or file input to the queue\n         **/\n        add: function(id, file) {\n            handler.add.apply(this, arguments);\n        },\n\n        /**\n         * Sends the file identified by id\n         */\n        upload: function(id) {\n            if (connectionManager.open(id)) {\n                return upload.start(id);\n            }\n            return false;\n        },\n\n        retry: function(id) {\n            // On retry, if concurrent chunking has been enabled, we may have aborted all other in-progress chunks\n            // for a file when encountering a failed chunk upload.  We then signaled the controller to ignore\n            // all failures associated with these aborts.  We are now retrying, so we don't want to ignore\n            // any more failures at this point.\n            if (concurrentChunkingPossible) {\n                handler._getFileState(id).temp.ignoreFailure = false;\n            }\n\n            // If we are attempting to retry a file that is already consuming a connection, this is likely an auto-retry.\n            // Just go ahead and ask the handler to upload again.\n            if (connectionManager.isUsingConnection(id)) {\n                return upload.start(id);\n            }\n\n            // If we are attempting to retry a file that is not currently consuming a connection,\n            // this is likely a manual retry attempt.  We will need to ensure a connection is available\n            // before the retry commences.\n            else {\n                return controller.upload(id);\n            }\n        },\n\n        /**\n         * Cancels file upload by id\n         */\n        cancel: function(id) {\n            var cancelRetVal = handler.cancel(id);\n\n            if (qq.isGenericPromise(cancelRetVal)) {\n                cancelRetVal.then(function() {\n                    upload.cancel(id);\n                });\n            }\n            else if (cancelRetVal !== false) {\n                upload.cancel(id);\n            }\n        },\n\n        /**\n         * Cancels all queued or in-progress uploads\n         */\n        cancelAll: function() {\n            var waitingOrConnected = connectionManager.getWaitingOrConnected(),\n                i;\n\n            // ensure files are cancelled in reverse order which they were added\n            // to avoid a flash of time where a queued file begins to upload before it is canceled\n            if (waitingOrConnected.length) {\n                for (i = waitingOrConnected.length - 1; i >= 0; i--) {\n                    controller.cancel(waitingOrConnected[i]);\n                }\n            }\n\n            connectionManager.reset();\n        },\n\n        // Returns a File, Blob, or the Blob/File for the reference/parent file if the targeted blob is a proxy.\n        // Undefined if no file record is available.\n        getFile: function(id) {\n            if (handler.getProxy && handler.getProxy(id)) {\n                return handler.getProxy(id).referenceBlob;\n            }\n\n            return handler.getFile && handler.getFile(id);\n        },\n\n        // Returns true if the Blob associated with the ID is related to a proxy s\n        isProxied: function(id) {\n            return !!(handler.getProxy && handler.getProxy(id));\n        },\n\n        getInput: function(id) {\n            if (handler.getInput) {\n                return handler.getInput(id);\n            }\n        },\n\n        reset: function() {\n            log(\"Resetting upload handler\");\n            controller.cancelAll();\n            connectionManager.reset();\n            handler.reset();\n        },\n\n        expunge: function(id) {\n            if (controller.isValid(id)) {\n                return handler.expunge(id);\n            }\n        },\n\n        /**\n         * Determine if the file exists.\n         */\n        isValid: function(id) {\n            return handler.isValid(id);\n        },\n\n        hasResumeRecord: function(id) {\n            var key = handler.isValid(id) &&\n                handler._getLocalStorageId &&\n                handler._getLocalStorageId(id);\n\n            if (key) {\n                return !!localStorage.getItem(key);\n            }\n\n            return false;\n        },\n\n        getResumableFilesData: function() {\n            if (handler.getResumableFilesData) {\n                return handler.getResumableFilesData();\n            }\n            return [];\n        },\n\n        /**\n         * This may or may not be implemented, depending on the handler.  For handlers where a third-party ID is\n         * available (such as the \"key\" for Amazon S3), this will return that value.  Otherwise, the return value\n         * will be undefined.\n         *\n         * @param id Internal file ID\n         * @returns {*} Some identifier used by a 3rd-party service involved in the upload process\n         */\n        getThirdPartyFileId: function(id) {\n            if (controller.isValid(id)) {\n                return handler.getThirdPartyFileId(id);\n            }\n        },\n\n        /**\n         * Attempts to pause the associated upload if the specific handler supports this and the file is \"valid\".\n         * @param id ID of the upload/file to pause\n         * @returns {boolean} true if the upload was paused\n         */\n        pause: function(id) {\n            if (controller.isResumable(id) && handler.pause && controller.isValid(id) && handler.pause(id)) {\n                connectionManager.free(id);\n                handler.moveInProgressToRemaining(id);\n                return true;\n            }\n            return false;\n        },\n\n        isAttemptingResume: function(id) {\n            return !!handler.isAttemptingResume && handler.isAttemptingResume(id);\n        },\n\n        // True if the file is eligible for pause/resume.\n        isResumable: function(id) {\n            return !!handler.isResumable && handler.isResumable(id);\n        }\n    });\n\n    qq.extend(options, o);\n    log = options.log;\n    chunkingPossible = options.chunking.enabled && qq.supportedFeatures.chunking;\n    concurrentChunkingPossible = chunkingPossible && options.chunking.concurrent.enabled;\n\n    preventRetryResponse = (function() {\n        var response = {};\n\n        response[options.preventRetryParam] = true;\n\n        return response;\n    }());\n\n    upload.initHandler();\n};\n","/*globals qq */\n/*jshint -W117 */\nqq.WindowReceiveMessage = function(o) {\n    \"use strict\";\n\n    var options = {\n            log: function(message, level) {}\n        },\n        callbackWrapperDetachers = {};\n\n    qq.extend(options, o);\n\n    qq.extend(this, {\n        receiveMessage: function(id, callback) {\n            var onMessageCallbackWrapper = function(event) {\n                    callback(event.data);\n                };\n\n            if (window.postMessage) {\n                callbackWrapperDetachers[id] = qq(window).attach(\"message\", onMessageCallbackWrapper);\n            }\n            else {\n                log(\"iframe message passing not supported in this browser!\", \"error\");\n            }\n        },\n\n        stopReceivingMessages: function(id) {\n            if (window.postMessage) {\n                var detacher = callbackWrapperDetachers[id];\n                if (detacher) {\n                    detacher();\n                }\n            }\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common APIs exposed to creators of upload via form/iframe handlers.  This is reused and possibly overridden\n * in some cases by specific form upload handlers.\n *\n * @constructor\n */\nqq.FormUploadHandler = function(spec) {\n    \"use strict\";\n\n    var options = spec.options,\n        handler = this,\n        proxy = spec.proxy,\n        formHandlerInstanceId = qq.getUniqueId(),\n        onloadCallbacks = {},\n        detachLoadEvents = {},\n        postMessageCallbackTimers = {},\n        isCors = options.isCors,\n        inputName = options.inputName,\n        getUuid = proxy.getUuid,\n        log = proxy.log,\n        corsMessageReceiver = new qq.WindowReceiveMessage({log: log});\n\n    /**\n     * Remove any trace of the file from the handler.\n     *\n     * @param id ID of the associated file\n     */\n    function expungeFile(id) {\n        delete detachLoadEvents[id];\n\n        // If we are dealing with CORS, we might still be waiting for a response from a loaded iframe.\n        // In that case, terminate the timer waiting for a message from the loaded iframe\n        // and stop listening for any more messages coming from this iframe.\n        if (isCors) {\n            clearTimeout(postMessageCallbackTimers[id]);\n            delete postMessageCallbackTimers[id];\n            corsMessageReceiver.stopReceivingMessages(id);\n        }\n\n        var iframe = document.getElementById(handler._getIframeName(id));\n        if (iframe) {\n            // To cancel request set src to something else.  We use src=\"javascript:false;\"\n            // because it doesn't trigger ie6 prompt on https\n            /* jshint scripturl:true */\n            iframe.setAttribute(\"src\", \"javascript:false;\");\n\n            qq(iframe).remove();\n        }\n    }\n\n    /**\n     * @param iframeName `document`-unique Name of the associated iframe\n     * @returns {*} ID of the associated file\n     */\n    function getFileIdForIframeName(iframeName) {\n        return iframeName.split(\"_\")[0];\n    }\n\n    /**\n     * Generates an iframe to be used as a target for upload-related form submits.  This also adds the iframe\n     * to the current `document`.  Note that the iframe is hidden from view.\n     *\n     * @param name Name of the iframe.\n     * @returns {HTMLIFrameElement} The created iframe\n     */\n    function initIframeForUpload(name) {\n        var iframe = qq.toElement(\"<iframe src='javascript:false;' name='\" + name + \"' />\");\n\n        iframe.setAttribute(\"id\", name);\n\n        iframe.style.display = \"none\";\n        document.body.appendChild(iframe);\n\n        return iframe;\n    }\n\n    /**\n     * If we are in CORS mode, we must listen for messages (containing the server response) from the associated\n     * iframe, since we cannot directly parse the content of the iframe due to cross-origin restrictions.\n     *\n     * @param iframe Listen for messages on this iframe.\n     * @param callback Invoke this callback with the message from the iframe.\n     */\n    function registerPostMessageCallback(iframe, callback) {\n        var iframeName = iframe.id,\n            fileId = getFileIdForIframeName(iframeName),\n            uuid = getUuid(fileId);\n\n        onloadCallbacks[uuid] = callback;\n\n        // When the iframe has loaded (after the server responds to an upload request)\n        // declare the attempt a failure if we don't receive a valid message shortly after the response comes in.\n        detachLoadEvents[fileId] = qq(iframe).attach(\"load\", function() {\n            if (handler.getInput(fileId)) {\n                log(\"Received iframe load event for CORS upload request (iframe name \" + iframeName + \")\");\n\n                postMessageCallbackTimers[iframeName] = setTimeout(function() {\n                    var errorMessage = \"No valid message received from loaded iframe for iframe name \" + iframeName;\n                    log(errorMessage, \"error\");\n                    callback({\n                        error: errorMessage\n                    });\n                }, 1000);\n            }\n        });\n\n        // Listen for messages coming from this iframe.  When a message has been received, cancel the timer\n        // that declares the upload a failure if a message is not received within a reasonable amount of time.\n        corsMessageReceiver.receiveMessage(iframeName, function(message) {\n            log(\"Received the following window message: '\" + message + \"'\");\n            var fileId = getFileIdForIframeName(iframeName),\n                response = handler._parseJsonResponse(message),\n                uuid = response.uuid,\n                onloadCallback;\n\n            if (uuid && onloadCallbacks[uuid]) {\n                log(\"Handling response for iframe name \" + iframeName);\n                clearTimeout(postMessageCallbackTimers[iframeName]);\n                delete postMessageCallbackTimers[iframeName];\n\n                handler._detachLoadEvent(iframeName);\n\n                onloadCallback = onloadCallbacks[uuid];\n\n                delete onloadCallbacks[uuid];\n                corsMessageReceiver.stopReceivingMessages(iframeName);\n                onloadCallback(response);\n            }\n            else if (!uuid) {\n                log(\"'\" + message + \"' does not contain a UUID - ignoring.\");\n            }\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, fileInput) {\n                super_.add(id, {input: fileInput});\n\n                fileInput.setAttribute(\"name\", inputName);\n\n                // remove file input from DOM\n                if (fileInput.parentNode) {\n                    qq(fileInput).remove();\n                }\n            },\n\n            expunge: function(id) {\n                expungeFile(id);\n                super_.expunge(id);\n            },\n\n            isValid: function(id) {\n                return super_.isValid(id) &&\n                    handler._getFileState(id).input !== undefined;\n            }\n        };\n    });\n\n    qq.extend(this, {\n        getInput: function(id) {\n            return handler._getFileState(id).input;\n        },\n\n        /**\n         * This function either delegates to a more specific message handler if CORS is involved,\n         * or simply registers a callback when the iframe has been loaded that invokes the passed callback\n         * after determining if the content of the iframe is accessible.\n         *\n         * @param iframe Associated iframe\n         * @param callback Callback to invoke after we have determined if the iframe content is accessible.\n         */\n        _attachLoadEvent: function(iframe, callback) {\n            /*jslint eqeq: true*/\n            var responseDescriptor;\n\n            if (isCors) {\n                registerPostMessageCallback(iframe, callback);\n            }\n            else {\n                detachLoadEvents[iframe.id] = qq(iframe).attach(\"load\", function() {\n                    log(\"Received response for \" + iframe.id);\n\n                    // when we remove iframe from dom\n                    // the request stops, but in IE load\n                    // event fires\n                    if (!iframe.parentNode) {\n                        return;\n                    }\n\n                    try {\n                        // fixing Opera 10.53\n                        if (iframe.contentDocument &&\n                            iframe.contentDocument.body &&\n                            iframe.contentDocument.body.innerHTML == \"false\") {\n                            // In Opera event is fired second time\n                            // when body.innerHTML changed from false\n                            // to server response approx. after 1 sec\n                            // when we upload file with iframe\n                            return;\n                        }\n                    }\n                    catch (error) {\n                        //IE may throw an \"access is denied\" error when attempting to access contentDocument on the iframe in some cases\n                        log(\"Error when attempting to access iframe during handling of upload response (\" + error.message + \")\", \"error\");\n                        responseDescriptor = {success: false};\n                    }\n\n                    callback(responseDescriptor);\n                });\n            }\n        },\n\n        /**\n         * Creates an iframe with a specific document-unique name.\n         *\n         * @param id ID of the associated file\n         * @returns {HTMLIFrameElement}\n         */\n        _createIframe: function(id) {\n            var iframeName = handler._getIframeName(id);\n\n            return initIframeForUpload(iframeName);\n        },\n\n        /**\n         * Called when we are no longer interested in being notified when an iframe has loaded.\n         *\n         * @param id Associated file ID\n         */\n        _detachLoadEvent: function(id) {\n            if (detachLoadEvents[id] !== undefined) {\n                detachLoadEvents[id]();\n                delete detachLoadEvents[id];\n            }\n        },\n\n        /**\n         * @param fileId ID of the associated file\n         * @returns {string} The `document`-unique name of the iframe\n         */\n        _getIframeName: function(fileId) {\n            return fileId + \"_\" + formHandlerInstanceId;\n        },\n\n        /**\n         * Generates a form element and appends it to the `document`.  When the form is submitted, a specific iframe is targeted.\n         * The name of the iframe is passed in as a property of the spec parameter, and must be unique in the `document`.  Note\n         * that the form is hidden from view.\n         *\n         * @param spec An object containing various properties to be used when constructing the form.  Required properties are\n         * currently: `method`, `endpoint`, `params`, `paramsInBody`, and `targetName`.\n         * @returns {HTMLFormElement} The created form\n         */\n        _initFormForUpload: function(spec) {\n            var method = spec.method,\n                endpoint = spec.endpoint,\n                params = spec.params,\n                paramsInBody = spec.paramsInBody,\n                targetName = spec.targetName,\n                form = qq.toElement(\"<form method='\" + method + \"' enctype='multipart/form-data'></form>\"),\n                url = endpoint;\n\n            if (paramsInBody) {\n                qq.obj2Inputs(params, form);\n            }\n            else {\n                url = qq.obj2url(params, endpoint);\n            }\n\n            form.setAttribute(\"action\", url);\n            form.setAttribute(\"target\", targetName);\n            form.style.display = \"none\";\n            document.body.appendChild(form);\n\n            return form;\n        },\n\n        /**\n         * @param innerHtmlOrMessage JSON message\n         * @returns {*} The parsed response, or an empty object if the response could not be parsed\n         */\n        _parseJsonResponse: function(innerHtmlOrMessage) {\n            var response = {};\n\n            try {\n                response = qq.parseJson(innerHtmlOrMessage);\n            }\n            catch (error) {\n                log(\"Error when attempting to parse iframe upload response (\" + error.message + \")\", \"error\");\n            }\n\n            return response;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Common API exposed to creators of XHR handlers.  This is reused and possibly overriding in some cases by specific\n * XHR upload handlers.\n *\n * @constructor\n */\nqq.XhrUploadHandler = function(spec) {\n    \"use strict\";\n\n    var handler = this,\n        namespace = spec.options.namespace,\n        proxy = spec.proxy,\n        chunking = spec.options.chunking,\n        getChunkSize = function(id) {\n            var fileState = handler._getFileState(id);\n\n            if (fileState.chunkSize) {\n                return fileState.chunkSize;\n            }\n\n            else {\n                var chunkSize = chunking.partSize;\n\n                if (qq.isFunction(chunkSize)) {\n                    chunkSize = chunkSize(id, getSize(id));\n                }\n\n                fileState.chunkSize = chunkSize;\n                return chunkSize;\n            }\n        },\n        resume = spec.options.resume,\n        chunkFiles = chunking && spec.options.chunking.enabled && qq.supportedFeatures.chunking,\n        resumeEnabled = resume && spec.options.resume.enabled && chunkFiles && qq.supportedFeatures.resume,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n        getUuid = proxy.getUuid,\n        getEndpoint = proxy.getEndpoint,\n        getDataByUuid = proxy.getDataByUuid,\n        onUuidChanged = proxy.onUuidChanged,\n        onProgress = proxy.onProgress,\n        log = proxy.log,\n        getCustomResumeData = proxy.getCustomResumeData;\n\n    function abort(id) {\n        qq.each(handler._getXhrs(id), function(xhrId, xhr) {\n            var ajaxRequester = handler._getAjaxRequester(id, xhrId);\n\n            xhr.onreadystatechange = null;\n            xhr.upload.onprogress = null;\n            xhr.abort();\n            ajaxRequester && ajaxRequester.canceled && ajaxRequester.canceled(id);\n        });\n    }\n\n    qq.extend(this, new qq.UploadHandler(spec));\n\n    qq.override(this, function(super_) {\n        return {\n            /**\n             * Adds File or Blob to the queue\n             **/\n            add: function(id, blobOrProxy) {\n                if (qq.isFile(blobOrProxy) || qq.isBlob(blobOrProxy)) {\n                    super_.add(id, {file: blobOrProxy});\n                }\n                else if (blobOrProxy instanceof qq.BlobProxy) {\n                    super_.add(id, {proxy: blobOrProxy});\n                }\n                else {\n                    throw new Error(\"Passed obj is not a File, Blob, or proxy\");\n                }\n\n                handler._initTempState(id);\n                resumeEnabled && handler._maybePrepareForResume(id);\n            },\n\n            expunge: function(id) {\n                abort(id);\n                handler._maybeDeletePersistedChunkData(id);\n                handler._clearXhrs(id);\n                super_.expunge(id);\n            }\n        };\n    });\n\n    qq.extend(this, {\n        // Clear the cached chunk `Blob` after we are done with it, just in case the `Blob` bytes are stored in memory.\n        clearCachedChunk: function(id, chunkIdx) {\n            delete handler._getFileState(id).temp.cachedChunks[chunkIdx];\n        },\n\n        clearXhr: function(id, chunkIdx) {\n            var tempState = handler._getFileState(id).temp;\n\n            if (tempState.xhrs) {\n                delete tempState.xhrs[chunkIdx];\n            }\n            if (tempState.ajaxRequesters) {\n                delete tempState.ajaxRequesters[chunkIdx];\n            }\n        },\n\n        // Called when all chunks have been successfully uploaded.  Expected promissory return type.\n        // This defines the default behavior if nothing further is required when all chunks have been uploaded.\n        finalizeChunks: function(id, responseParser) {\n            var lastChunkIdx = handler._getTotalChunks(id) - 1,\n                xhr = handler._getXhr(id, lastChunkIdx);\n\n            if (responseParser) {\n                return new qq.Promise().success(responseParser(xhr), xhr);\n            }\n\n            return new qq.Promise().success({}, xhr);\n        },\n\n        getFile: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).file;\n        },\n\n        getProxy: function(id) {\n            return handler.isValid(id) && handler._getFileState(id).proxy;\n        },\n\n        /**\n         * @returns {Array} Array of objects containing properties useful to integrators\n         * when it is important to determine which files are potentially resumable.\n         */\n        getResumableFilesData: function() {\n            var resumableFilesData = [];\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                handler.moveInProgressToRemaining(null, uploadData.chunking.inProgress,  uploadData.chunking.remaining);\n\n                var data = {\n                    name: uploadData.name,\n                    remaining: uploadData.chunking.remaining,\n                    size: uploadData.size,\n                    uuid: uploadData.uuid\n                };\n\n                if (uploadData.key) {\n                    data.key = uploadData.key;\n                }\n\n                if (uploadData.customResumeData) {\n                    data.customResumeData = uploadData.customResumeData;\n                }\n\n                resumableFilesData.push(data);\n            });\n\n            return resumableFilesData;\n        },\n\n        isAttemptingResume: function(id) {\n            return handler._getFileState(id).attemptingResume;\n        },\n\n        isResumable: function(id) {\n            return !!chunking && handler.isValid(id) &&\n                !handler._getFileState(id).notResumable;\n        },\n\n        moveInProgressToRemaining: function(id, optInProgress, optRemaining) {\n            var fileState = handler._getFileState(id) || {},\n                chunkingState =  fileState.chunking || {},\n                inProgress = optInProgress || chunkingState.inProgress,\n                remaining = optRemaining || chunkingState.remaining;\n\n            if (inProgress) {\n                log(qq.format(\"Moving these chunks from in-progress {}, to remaining.\", JSON.stringify(inProgress)));\n                inProgress.reverse();\n                qq.each(inProgress, function(idx, chunkIdx) {\n                    remaining.unshift(chunkIdx);\n                });\n                inProgress.length = 0;\n            }\n        },\n\n        pause: function(id) {\n            if (handler.isValid(id)) {\n                log(qq.format(\"Aborting XHR upload for {} '{}' due to pause instruction.\", id, getName(id)));\n                handler._getFileState(id).paused = true;\n                abort(id);\n                return true;\n            }\n        },\n\n        reevaluateChunking: function(id) {\n            if (chunking && handler.isValid(id)) {\n                var state = handler._getFileState(id),\n                    totalChunks,\n                    i;\n\n                delete state.chunking;\n\n                state.chunking = {};\n                totalChunks = handler._getTotalChunks(id);\n                if (totalChunks > 1 || chunking.mandatory) {\n                    state.chunking.enabled = true;\n                    state.chunking.parts = totalChunks;\n                    state.chunking.remaining = [];\n\n                    for (i = 0; i < totalChunks; i++) {\n                        state.chunking.remaining.push(i);\n                    }\n\n                    handler._initTempState(id);\n                }\n                else {\n                    state.chunking.enabled = false;\n                }\n            }\n        },\n\n        updateBlob: function(id, newBlob) {\n            if (handler.isValid(id)) {\n                handler._getFileState(id).file = newBlob;\n            }\n        },\n\n        _clearXhrs: function(id) {\n            var tempState = handler._getFileState(id).temp;\n\n            qq.each(tempState.ajaxRequesters, function(chunkId) {\n                delete tempState.ajaxRequesters[chunkId];\n            });\n\n            qq.each(tempState.xhrs, function(chunkId) {\n                delete tempState.xhrs[chunkId];\n            });\n        },\n\n        /**\n         * Creates an XHR instance for this file and stores it in the fileState.\n         *\n         * @param id File ID\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @returns {XMLHttpRequest}\n         */\n        _createXhr: function(id, optChunkIdx) {\n            return handler._registerXhr(id, optChunkIdx, qq.createXhrInstance());\n        },\n\n        _getAjaxRequester: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.ajaxRequesters[chunkIdx];\n        },\n\n        _getChunkData: function(id, chunkIndex) {\n            var chunkSize = getChunkSize(id),\n                fileSize = getSize(id),\n                fileOrBlob = handler.getFile(id),\n                startBytes = chunkSize * chunkIndex,\n                endBytes = startBytes + chunkSize >= fileSize ? fileSize : startBytes + chunkSize,\n                totalChunks = handler._getTotalChunks(id),\n                cachedChunks = this._getFileState(id).temp.cachedChunks,\n\n            // To work around a Webkit GC bug, we must keep each chunk `Blob` in scope until we are done with it.\n            // See https://github.com/FineUploader/fine-uploader/issues/937#issuecomment-41418760\n                blob = cachedChunks[chunkIndex] || qq.sliceBlob(fileOrBlob, startBytes, endBytes);\n\n            cachedChunks[chunkIndex] = blob;\n\n            return {\n                part: chunkIndex,\n                start: startBytes,\n                end: endBytes,\n                count: totalChunks,\n                blob: blob,\n                size: endBytes - startBytes\n            };\n        },\n\n        _getChunkDataForCallback: function(chunkData) {\n            return {\n                partIndex: chunkData.part,\n                startByte: chunkData.start + 1,\n                endByte: chunkData.end,\n                totalParts: chunkData.count\n            };\n        },\n\n        /**\n         * @param id File ID\n         * @returns {string} Identifier for this item that may appear in the browser's local storage\n         */\n        _getLocalStorageId: function(id) {\n            var formatVersion = \"5.0\",\n                name = getName(id),\n                size = getSize(id),\n                chunkSize = getChunkSize(id),\n                endpoint = getEndpoint(id),\n                customKeys = resume.customKeys(id),\n                localStorageId = qq.format(\"qq{}resume{}-{}-{}-{}-{}\", namespace, formatVersion, name, size, chunkSize, endpoint);\n\n            customKeys.forEach(function(key) {\n                localStorageId += \"-\" + key;\n            });\n\n            return localStorageId;\n        },\n\n        _getMimeType: function(id) {\n            return handler.getFile(id).type;\n        },\n\n        _getPersistableData: function(id) {\n            return handler._getFileState(id).chunking;\n        },\n\n        /**\n         * @param id ID of the associated file\n         * @returns {number} Number of parts this file can be divided into, or undefined if chunking is not supported in this UA\n         */\n        _getTotalChunks: function(id) {\n            if (chunking) {\n                var fileSize = getSize(id),\n                    chunkSize = getChunkSize(id);\n\n                return Math.ceil(fileSize / chunkSize);\n            }\n        },\n\n        _getXhr: function(id, optChunkIdx) {\n            var chunkIdx = optChunkIdx == null ? -1 : optChunkIdx;\n            return handler._getFileState(id).temp.xhrs[chunkIdx];\n        },\n\n        _getXhrs: function(id) {\n            return handler._getFileState(id).temp.xhrs;\n        },\n\n        // Iterates through all XHR handler-created resume records (in local storage),\n        // invoking the passed callback and passing in the key and value of each local storage record.\n        _iterateResumeRecords: function(callback) {\n            if (resumeEnabled) {\n                qq.each(localStorage, function(key, item) {\n                    if (key.indexOf(qq.format(\"qq{}resume\", namespace)) === 0) {\n                        var uploadData = JSON.parse(item);\n                        callback(key, uploadData);\n                    }\n                });\n            }\n        },\n\n        _initTempState: function(id) {\n            handler._getFileState(id).temp = {\n                ajaxRequesters: {},\n                chunkProgress: {},\n                xhrs: {},\n                cachedChunks: {}\n            };\n        },\n\n        _markNotResumable: function(id) {\n            handler._getFileState(id).notResumable = true;\n        },\n\n        // Removes a chunked upload record from local storage, if possible.\n        // Returns true if the item was removed, false otherwise.\n        _maybeDeletePersistedChunkData: function(id) {\n            var localStorageId;\n\n            if (resumeEnabled && handler.isResumable(id)) {\n                localStorageId = handler._getLocalStorageId(id);\n\n                if (localStorageId && localStorage.getItem(localStorageId)) {\n                    localStorage.removeItem(localStorageId);\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        // If this is a resumable upload, grab the relevant data from storage and items in memory that track this upload\n        // so we can pick up from where we left off.\n        _maybePrepareForResume: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // Resume is enabled and possible and this is the first time we've tried to upload this file in this session,\n            // so prepare for a resume attempt.\n            if (resumeEnabled && state.key === undefined) {\n                localStorageId = handler._getLocalStorageId(id);\n                persistedData = localStorage.getItem(localStorageId);\n\n                // If we found this item in local storage, maybe we should resume it.\n                if (persistedData) {\n                    persistedData = JSON.parse(persistedData);\n\n                    // If we found a resume record but we have already handled this file in this session,\n                    // don't try to resume it & ensure we don't persist future check data\n                    if (getDataByUuid(persistedData.uuid)) {\n                        handler._markNotResumable(id);\n                    }\n                    else {\n                        log(qq.format(\"Identified file with ID {} and name of {} as resumable.\", id, getName(id)));\n\n                        onUuidChanged(id, persistedData.uuid);\n\n                        state.key = persistedData.key;\n                        state.chunking = persistedData.chunking;\n                        state.loaded = persistedData.loaded;\n                        state.customResumeData = persistedData.customResumeData;\n                        state.attemptingResume = true;\n\n                        handler.moveInProgressToRemaining(id);\n                    }\n                }\n            }\n        },\n\n        // Persist any data needed to resume this upload in a new session.\n        _maybePersistChunkedState: function(id) {\n            var state = handler._getFileState(id),\n                localStorageId, persistedData;\n\n            // If local storage isn't supported by the browser, or if resume isn't enabled or possible, give up\n            if (resumeEnabled && handler.isResumable(id)) {\n                var customResumeData = getCustomResumeData(id);\n\n                localStorageId = handler._getLocalStorageId(id);\n\n                persistedData = {\n                    name: getName(id),\n                    size: getSize(id),\n                    uuid: getUuid(id),\n                    key: state.key,\n                    chunking: state.chunking,\n                    loaded: state.loaded,\n                    lastUpdated: Date.now(),\n                };\n\n                if (customResumeData) {\n                    persistedData.customResumeData = customResumeData;\n                }\n\n                try {\n                    localStorage.setItem(localStorageId, JSON.stringify(persistedData));\n                }\n                catch (error) {\n                    log(qq.format(\"Unable to save resume data for '{}' due to error: '{}'.\", id, error.toString()), \"warn\");\n                }\n            }\n        },\n\n        _registerProgressHandler: function(id, chunkIdx, chunkSize) {\n            var xhr = handler._getXhr(id, chunkIdx),\n                name = getName(id),\n                progressCalculator = {\n                    simple: function(loaded, total) {\n                        var fileSize = getSize(id);\n\n                        if (loaded === total) {\n                            onProgress(id, name, fileSize, fileSize);\n                        }\n                        else {\n                            onProgress(id, name, (loaded >= fileSize ? fileSize - 1 : loaded), fileSize);\n                        }\n                    },\n\n                    chunked: function(loaded, total) {\n                        var chunkProgress = handler._getFileState(id).temp.chunkProgress,\n                            totalSuccessfullyLoadedForFile = handler._getFileState(id).loaded,\n                            loadedForRequest = loaded,\n                            totalForRequest = total,\n                            totalFileSize = getSize(id),\n                            estActualChunkLoaded = loadedForRequest - (totalForRequest - chunkSize),\n                            totalLoadedForFile = totalSuccessfullyLoadedForFile;\n\n                        chunkProgress[chunkIdx] = estActualChunkLoaded;\n\n                        qq.each(chunkProgress, function(chunkIdx, chunkLoaded) {\n                            totalLoadedForFile += chunkLoaded;\n                        });\n\n                        onProgress(id, name, totalLoadedForFile, totalFileSize);\n                    }\n                };\n\n            xhr.upload.onprogress = function(e) {\n                if (e.lengthComputable) {\n                    /* jshint eqnull: true */\n                    var type = chunkSize == null ? \"simple\" : \"chunked\";\n                    progressCalculator[type](e.loaded, e.total);\n                }\n            };\n        },\n\n        /**\n         * Registers an XHR transport instance created elsewhere.\n         *\n         * @param id ID of the associated file\n         * @param optChunkIdx The chunk index associated with this XHR, if applicable\n         * @param xhr XMLHttpRequest object instance\n         * @param optAjaxRequester `qq.AjaxRequester` associated with this request, if applicable.\n         * @returns {XMLHttpRequest}\n         */\n        _registerXhr: function(id, optChunkIdx, xhr, optAjaxRequester) {\n            var xhrsId = optChunkIdx == null ? -1 : optChunkIdx,\n                tempState = handler._getFileState(id).temp;\n\n            tempState.xhrs = tempState.xhrs || {};\n            tempState.ajaxRequesters = tempState.ajaxRequesters || {};\n\n            tempState.xhrs[xhrsId] = xhr;\n\n            if (optAjaxRequester) {\n                tempState.ajaxRequesters[xhrsId] = optAjaxRequester;\n            }\n\n            return xhr;\n        },\n\n        // Deletes any local storage records that are \"expired\".\n        _removeExpiredChunkingRecords: function() {\n            var expirationDays = resume.recordsExpireIn;\n\n            handler._iterateResumeRecords(function(key, uploadData) {\n                var expirationDate = new Date(uploadData.lastUpdated);\n\n                // transform updated date into expiration date\n                expirationDate.setDate(expirationDate.getDate() + expirationDays);\n\n                if (expirationDate.getTime() <= Date.now()) {\n                    log(\"Removing expired resume record with key \" + key);\n                    localStorage.removeItem(key);\n                }\n            });\n        },\n\n        /**\n         * Determine if the associated file should be chunked.\n         *\n         * @param id ID of the associated file\n         * @returns {*} true if chunking is enabled, possible, and the file can be split into more than 1 part\n         */\n        _shouldChunkThisFile: function(id) {\n            var state = handler._getFileState(id);\n\n            if (!state.chunking) {\n                handler.reevaluateChunking(id);\n            }\n\n            return state.chunking.enabled;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\nqq.DeleteFileAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            method: \"DELETE\",\n            uuidParamName: \"qquuid\",\n            endpointStore: {},\n            maxConnections: 3,\n            customHeaders: function(id) {return {};},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhrOrXdr, isError) {}\n        };\n\n    qq.extend(options, o);\n\n    function getMandatedParams() {\n        if (options.method.toUpperCase() === \"POST\") {\n            return {\n                _method: \"DELETE\"\n            };\n        }\n\n        return {};\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"POST\", \"DELETE\"],\n        method: options.method,\n        endpointStore: options.endpointStore,\n        paramsStore: options.paramsStore,\n        mandatedParams: getMandatedParams(),\n        maxConnections: options.maxConnections,\n        customHeaders: function(id) {\n            return options.customHeaders.get(id);\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        sendDelete: function(id, uuid, additionalMandatedParams) {\n            var additionalOptions = additionalMandatedParams || {};\n\n            options.log(\"Submitting delete file request for \" + id);\n\n            if (options.method === \"DELETE\") {\n                requester.initTransport(id)\n                    .withPath(uuid)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n            else {\n                additionalOptions[options.uuidParamName] = uuid;\n                requester.initTransport(id)\n                    .withParams(additionalOptions)\n                    .send();\n            }\n        }\n    });\n};\n","/*global qq, define */\n/*jshint strict:false,bitwise:false,nonew:false,asi:true,-W064,-W116,-W089 */\n/**\n * Mega pixel image rendering library for iOS6+\n *\n * Fixes iOS6+'s image file rendering issue for large size image (over mega-pixel),\n * which causes unexpected subsampling when drawing it in canvas.\n * By using this library, you can safely render the image with proper stretching.\n *\n * Copyright (c) 2012 Shinichi Tomita <shinichi.tomita@gmail.com>\n * Released under the MIT license\n *\n * Heavily modified by Widen for Fine Uploader\n */\n(function() {\n\n    /**\n     * Detect subsampling in loaded image.\n     * In iOS, larger images than 2M pixels may be subsampled in rendering.\n     */\n    function detectSubsampling(img) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            canvas = document.createElement(\"canvas\"),\n            ctx;\n\n        if (iw * ih > 1024 * 1024) { // subsampling may happen over megapixel image\n            canvas.width = canvas.height = 1;\n            ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(img, -iw + 1, 0);\n            // subsampled image becomes half smaller in rendering size.\n            // check alpha channel value to confirm image is covering edge pixel or not.\n            // if alpha value is 0 image is not covering, hence subsampled.\n            return ctx.getImageData(0, 0, 1, 1).data[3] === 0;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Detecting vertical squash in loaded image.\n     * Fixes a bug which squash image vertically while drawing into canvas for some images.\n     */\n    function detectVerticalSquash(img, iw, ih) {\n        var canvas = document.createElement(\"canvas\"),\n            sy = 0,\n            ey = ih,\n            py = ih,\n            ctx, data, alpha, ratio;\n\n        canvas.width = 1;\n        canvas.height = ih;\n        ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(img, 0, 0);\n        data = ctx.getImageData(0, 0, 1, ih).data;\n\n        // search image edge pixel position in case it is squashed vertically.\n        while (py > sy) {\n            alpha = data[(py - 1) * 4 + 3];\n            if (alpha === 0) {\n                ey = py;\n            } else {\n                sy = py;\n            }\n            py = (ey + sy) >> 1;\n        }\n\n        ratio = (py / ih);\n        return (ratio === 0) ? 1 : ratio;\n    }\n\n    /**\n     * Rendering image element (with resizing) and get its data URL\n     */\n    function renderImageToDataURL(img, blob, options, doSquash) {\n        var canvas = document.createElement(\"canvas\"),\n            mime = options.mime || \"image/jpeg\",\n            promise = new qq.Promise();\n\n        renderImageToCanvas(img, blob, canvas, options, doSquash)\n            .then(function() {\n                promise.success(\n                    canvas.toDataURL(mime, options.quality || 0.8)\n                );\n            });\n\n        return promise;\n    }\n\n    function maybeCalculateDownsampledDimensions(spec) {\n        var maxPixels = 5241000; //iOS specific value\n\n        if (!qq.ios()) {\n            throw new qq.Error(\"Downsampled dimensions can only be reliably calculated for iOS!\");\n        }\n\n        if (spec.origHeight * spec.origWidth > maxPixels) {\n            return {\n                newHeight: Math.round(Math.sqrt(maxPixels * (spec.origHeight / spec.origWidth))),\n                newWidth: Math.round(Math.sqrt(maxPixels * (spec.origWidth / spec.origHeight)))\n            };\n        }\n    }\n\n    /**\n     * Rendering image element (with resizing) into the canvas element\n     */\n    function renderImageToCanvas(img, blob, canvas, options, doSquash) {\n        var iw = img.naturalWidth,\n            ih = img.naturalHeight,\n            width = options.width,\n            height = options.height,\n            ctx = canvas.getContext(\"2d\"),\n            promise = new qq.Promise(),\n            modifiedDimensions;\n\n        ctx.save();\n\n        if (options.resize) {\n            return renderImageToCanvasWithCustomResizer({\n                blob: blob,\n                canvas: canvas,\n                image: img,\n                imageHeight: ih,\n                imageWidth: iw,\n                orientation: options.orientation,\n                resize: options.resize,\n                targetHeight: height,\n                targetWidth: width\n            });\n        }\n\n        if (!qq.supportedFeatures.unlimitedScaledImageSize) {\n            modifiedDimensions = maybeCalculateDownsampledDimensions({\n                origWidth: width,\n                origHeight: height\n            });\n\n            if (modifiedDimensions) {\n                qq.log(qq.format(\"Had to reduce dimensions due to device limitations from {}w / {}h to {}w / {}h\",\n                    width, height, modifiedDimensions.newWidth, modifiedDimensions.newHeight),\n                    \"warn\");\n\n                width = modifiedDimensions.newWidth;\n                height = modifiedDimensions.newHeight;\n            }\n        }\n\n        transformCoordinate(canvas, width, height, options.orientation);\n\n        // Fine Uploader specific: Save some CPU cycles if not using iOS\n        // Assumption: This logic is only needed to overcome iOS image sampling issues\n        if (qq.ios()) {\n            (function() {\n                if (detectSubsampling(img)) {\n                    iw /= 2;\n                    ih /= 2;\n                }\n\n                var d = 1024, // size of tiling canvas\n                    tmpCanvas = document.createElement(\"canvas\"),\n                    vertSquashRatio = doSquash ? detectVerticalSquash(img, iw, ih) : 1,\n                    dw = Math.ceil(d * width / iw),\n                    dh = Math.ceil(d * height / ih / vertSquashRatio),\n                    sy = 0,\n                    dy = 0,\n                    tmpCtx, sx, dx;\n\n                tmpCanvas.width = tmpCanvas.height = d;\n                tmpCtx = tmpCanvas.getContext(\"2d\");\n\n                while (sy < ih) {\n                    sx = 0;\n                    dx = 0;\n                    while (sx < iw) {\n                        tmpCtx.clearRect(0, 0, d, d);\n                        tmpCtx.drawImage(img, -sx, -sy);\n                        ctx.drawImage(tmpCanvas, 0, 0, d, d, dx, dy, dw, dh);\n                        sx += d;\n                        dx += dw;\n                    }\n                    sy += d;\n                    dy += dh;\n                }\n                ctx.restore();\n                tmpCanvas = tmpCtx = null;\n            }());\n        }\n        else {\n            ctx.drawImage(img, 0, 0, width, height);\n        }\n\n        canvas.qqImageRendered && canvas.qqImageRendered();\n        promise.success();\n\n        return promise;\n    }\n\n    function renderImageToCanvasWithCustomResizer(resizeInfo) {\n        var blob = resizeInfo.blob,\n            image = resizeInfo.image,\n            imageHeight = resizeInfo.imageHeight,\n            imageWidth = resizeInfo.imageWidth,\n            orientation = resizeInfo.orientation,\n            promise = new qq.Promise(),\n            resize = resizeInfo.resize,\n            sourceCanvas = document.createElement(\"canvas\"),\n            sourceCanvasContext = sourceCanvas.getContext(\"2d\"),\n            targetCanvas = resizeInfo.canvas,\n            targetHeight = resizeInfo.targetHeight,\n            targetWidth = resizeInfo.targetWidth;\n\n        transformCoordinate(sourceCanvas, imageWidth, imageHeight, orientation);\n\n        targetCanvas.height = targetHeight;\n        targetCanvas.width = targetWidth;\n\n        sourceCanvasContext.drawImage(image, 0, 0);\n\n        resize({\n            blob: blob,\n            height: targetHeight,\n            image: image,\n            sourceCanvas: sourceCanvas,\n            targetCanvas: targetCanvas,\n            width: targetWidth\n        })\n            .then(\n                function success() {\n                    targetCanvas.qqImageRendered && targetCanvas.qqImageRendered();\n                    promise.success();\n                },\n                promise.failure\n            );\n\n        return promise;\n    }\n\n    /**\n     * Transform canvas coordination according to specified frame size and orientation\n     * Orientation value is from EXIF tag\n     */\n    function transformCoordinate(canvas, width, height, orientation) {\n        switch (orientation) {\n            case 5:\n            case 6:\n            case 7:\n            case 8:\n                canvas.width = height;\n                canvas.height = width;\n                break;\n            default:\n                canvas.width = width;\n                canvas.height = height;\n        }\n        var ctx = canvas.getContext(\"2d\");\n        switch (orientation) {\n            case 2:\n                // horizontal flip\n                ctx.translate(width, 0);\n                ctx.scale(-1, 1);\n                break;\n            case 3:\n                // 180 rotate left\n                ctx.translate(width, height);\n                ctx.rotate(Math.PI);\n                break;\n            case 4:\n                // vertical flip\n                ctx.translate(0, height);\n                ctx.scale(1, -1);\n                break;\n            case 5:\n                // vertical flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.scale(1, -1);\n                break;\n            case 6:\n                // 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(0, -height);\n                break;\n            case 7:\n                // horizontal flip + 90 rotate right\n                ctx.rotate(0.5 * Math.PI);\n                ctx.translate(width, -height);\n                ctx.scale(-1, 1);\n                break;\n            case 8:\n                // 90 rotate left\n                ctx.rotate(-0.5 * Math.PI);\n                ctx.translate(-width, 0);\n                break;\n            default:\n                break;\n        }\n    }\n\n    /**\n     * MegaPixImage class\n     */\n    function MegaPixImage(srcImage, errorCallback) {\n        var self = this;\n\n        if (window.Blob && srcImage instanceof Blob) {\n            (function() {\n                var img = new Image(),\n                    URL = window.URL && window.URL.createObjectURL ? window.URL :\n                        window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL : null;\n                if (!URL) { throw Error(\"No createObjectURL function found to create blob url\"); }\n                img.src = URL.createObjectURL(srcImage);\n                self.blob = srcImage;\n                srcImage = img;\n            }());\n        }\n        if (!srcImage.naturalWidth && !srcImage.naturalHeight) {\n            srcImage.onload = function() {\n                var listeners = self.imageLoadListeners;\n                if (listeners) {\n                    self.imageLoadListeners = null;\n                    // IE11 doesn't reliably report actual image dimensions immediately after onload for small files,\n                    // so let's push this to the end of the UI thread queue.\n                    setTimeout(function() {\n                        for (var i = 0, len = listeners.length; i < len; i++) {\n                            listeners[i]();\n                        }\n                    }, 0);\n                }\n            };\n            srcImage.onerror = errorCallback;\n            this.imageLoadListeners = [];\n        }\n        this.srcImage = srcImage;\n    }\n\n    /**\n     * Rendering megapix image into specified target element\n     */\n    MegaPixImage.prototype.render = function(target, options) {\n        options = options || {};\n\n        var self = this,\n            imgWidth = this.srcImage.naturalWidth,\n            imgHeight = this.srcImage.naturalHeight,\n            width = options.width,\n            height = options.height,\n            maxWidth = options.maxWidth,\n            maxHeight = options.maxHeight,\n            doSquash = !this.blob || this.blob.type === \"image/jpeg\",\n            tagName = target.tagName.toLowerCase(),\n            opt;\n\n        if (this.imageLoadListeners) {\n            this.imageLoadListeners.push(function() { self.render(target, options); });\n            return;\n        }\n\n        if (width && !height) {\n            height = (imgHeight * width / imgWidth) << 0;\n        } else if (height && !width) {\n            width = (imgWidth * height / imgHeight) << 0;\n        } else {\n            width = imgWidth;\n            height = imgHeight;\n        }\n        if (maxWidth && width > maxWidth) {\n            width = maxWidth;\n            height = (imgHeight * width / imgWidth) << 0;\n        }\n        if (maxHeight && height > maxHeight) {\n            height = maxHeight;\n            width = (imgWidth * height / imgHeight) << 0;\n        }\n\n        opt = { width: width, height: height },\n        qq.each(options, function(optionsKey, optionsValue) {\n            opt[optionsKey] = optionsValue;\n        });\n\n        if (tagName === \"img\") {\n            (function() {\n                var oldTargetSrc = target.src;\n                renderImageToDataURL(self.srcImage, self.blob, opt, doSquash)\n                    .then(function(dataUri) {\n                        target.src = dataUri;\n                        oldTargetSrc === target.src && target.onload();\n                    });\n            }());\n        } else if (tagName === \"canvas\") {\n            renderImageToCanvas(this.srcImage, this.blob, target, opt, doSquash);\n        }\n        if (typeof this.onrender === \"function\") {\n            this.onrender(target);\n        }\n    };\n\n    qq.MegaPixImage = MegaPixImage;\n})();\n","/*globals qq */\n/**\n * Draws a thumbnail of a Blob/File/URL onto an <img> or <canvas>.\n *\n * @constructor\n */\nqq.ImageGenerator = function(log) {\n    \"use strict\";\n\n    function isImg(el) {\n        return el.tagName.toLowerCase() === \"img\";\n    }\n\n    function isCanvas(el) {\n        return el.tagName.toLowerCase() === \"canvas\";\n    }\n\n    function isImgCorsSupported() {\n        return new Image().crossOrigin !== undefined;\n    }\n\n    function isCanvasSupported() {\n        var canvas = document.createElement(\"canvas\");\n\n        return canvas.getContext && canvas.getContext(\"2d\");\n    }\n\n    // This is only meant to determine the MIME type of a renderable image file.\n    // It is used to ensure images drawn from a URL that have transparent backgrounds\n    // are rendered correctly, among other things.\n    function determineMimeOfFileName(nameWithPath) {\n        /*jshint -W015 */\n        var pathSegments = nameWithPath.split(\"/\"),\n            name = pathSegments[pathSegments.length - 1].split(\"?\")[0],\n            extension = qq.getExtension(name);\n\n        extension = extension && extension.toLowerCase();\n\n        switch (extension) {\n            case \"jpeg\":\n            case \"jpg\":\n                return \"image/jpeg\";\n            case \"png\":\n                return \"image/png\";\n            case \"bmp\":\n                return \"image/bmp\";\n            case \"gif\":\n                return \"image/gif\";\n            case \"tiff\":\n            case \"tif\":\n                return \"image/tiff\";\n        }\n    }\n\n    // This will likely not work correctly in IE8 and older.\n    // It's only used as part of a formula to determine\n    // if a canvas can be used to scale a server-hosted thumbnail.\n    // If canvas isn't supported by the UA (IE8 and older)\n    // this method should not even be called.\n    function isCrossOrigin(url) {\n        var targetAnchor = document.createElement(\"a\"),\n            targetProtocol, targetHostname, targetPort;\n\n        targetAnchor.href = url;\n\n        targetProtocol = targetAnchor.protocol;\n        targetPort = targetAnchor.port;\n        targetHostname = targetAnchor.hostname;\n\n        if (targetProtocol.toLowerCase() !== window.location.protocol.toLowerCase()) {\n            return true;\n        }\n\n        if (targetHostname.toLowerCase() !== window.location.hostname.toLowerCase()) {\n            return true;\n        }\n\n        // IE doesn't take ports into consideration when determining if two endpoints are same origin.\n        if (targetPort !== window.location.port && !qq.ie()) {\n            return true;\n        }\n\n        return false;\n    }\n\n    function registerImgLoadListeners(img, promise) {\n        img.onload = function() {\n            img.onload = null;\n            img.onerror = null;\n            promise.success(img);\n        };\n\n        img.onerror = function() {\n            img.onload = null;\n            img.onerror = null;\n            log(\"Problem drawing thumbnail!\", \"error\");\n            promise.failure(img, \"Problem drawing thumbnail!\");\n        };\n    }\n\n    function registerCanvasDrawImageListener(canvas, promise) {\n        // The image is drawn on the canvas by a third-party library,\n        // and we want to know when this is completed.  Since the library\n        // may invoke drawImage many times in a loop, we need to be called\n        // back when the image is fully rendered.  So, we are expecting the\n        // code that draws this image to follow a convention that involves a\n        // function attached to the canvas instance be invoked when it is done.\n        canvas.qqImageRendered = function() {\n            promise.success(canvas);\n        };\n    }\n\n    // Fulfills a `qq.Promise` when an image has been drawn onto the target,\n    // whether that is a <canvas> or an <img>.  The attempt is considered a\n    // failure if the target is not an <img> or a <canvas>, or if the drawing\n    // attempt was not successful.\n    function registerThumbnailRenderedListener(imgOrCanvas, promise) {\n        var registered = isImg(imgOrCanvas) || isCanvas(imgOrCanvas);\n\n        if (isImg(imgOrCanvas)) {\n            registerImgLoadListeners(imgOrCanvas, promise);\n        }\n        else if (isCanvas(imgOrCanvas)) {\n            registerCanvasDrawImageListener(imgOrCanvas, promise);\n        }\n        else {\n            promise.failure(imgOrCanvas);\n            log(qq.format(\"Element container of type {} is not supported!\", imgOrCanvas.tagName), \"error\");\n        }\n\n        return registered;\n    }\n\n    // Draw a preview iff the current UA can natively display it.\n    // Also rotate the image if necessary.\n    function draw(fileOrBlob, container, options) {\n        var drawPreview = new qq.Promise(),\n            identifier = new qq.Identify(fileOrBlob, log),\n            maxSize = options.maxSize,\n            // jshint eqnull:true\n            orient = options.orient == null ? true : options.orient,\n            megapixErrorHandler = function() {\n                container.onerror = null;\n                container.onload = null;\n                log(\"Could not render preview, file may be too large!\", \"error\");\n                drawPreview.failure(container, \"Browser cannot render image!\");\n            };\n\n        identifier.isPreviewable().then(\n            function(mime) {\n                // If options explicitly specify that Orientation is not desired,\n                // replace the orient task with a dummy promise that \"succeeds\" immediately.\n                var dummyExif = {\n                        parse: function() {\n                            return new qq.Promise().success();\n                        }\n                    },\n                    exif = orient ? new qq.Exif(fileOrBlob, log) : dummyExif,\n                    mpImg = new qq.MegaPixImage(fileOrBlob, megapixErrorHandler);\n\n                if (registerThumbnailRenderedListener(container, drawPreview)) {\n                    exif.parse().then(\n                        function(exif) {\n                            var orientation = exif && exif.Orientation;\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                orientation: orientation,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        },\n\n                        function(failureMsg) {\n                            log(qq.format(\"EXIF data could not be parsed ({}).  Assuming orientation = 1.\", failureMsg));\n\n                            mpImg.render(container, {\n                                maxWidth: maxSize,\n                                maxHeight: maxSize,\n                                mime: mime,\n                                resize: options.customResizeFunction\n                            });\n                        }\n                    );\n                }\n            },\n\n            function() {\n                log(\"Not previewable\");\n                drawPreview.failure(container, \"Not previewable\");\n            }\n        );\n\n        return drawPreview;\n    }\n\n    function drawOnCanvasOrImgFromUrl(url, canvasOrImg, draw, maxSize, customResizeFunction) {\n        var tempImg = new Image(),\n            tempImgRender = new qq.Promise();\n\n        registerThumbnailRenderedListener(tempImg, tempImgRender);\n\n        if (isCrossOrigin(url)) {\n            tempImg.crossOrigin = \"anonymous\";\n        }\n\n        tempImg.src = url;\n\n        tempImgRender.then(\n            function rendered() {\n                registerThumbnailRenderedListener(canvasOrImg, draw);\n\n                var mpImg = new qq.MegaPixImage(tempImg);\n                mpImg.render(canvasOrImg, {\n                    maxWidth: maxSize,\n                    maxHeight: maxSize,\n                    mime: determineMimeOfFileName(url),\n                    resize: customResizeFunction\n                });\n            },\n\n            draw.failure\n        );\n    }\n\n    function drawOnImgFromUrlWithCssScaling(url, img, draw, maxSize) {\n        registerThumbnailRenderedListener(img, draw);\n        // NOTE: The fact that maxWidth/height is set on the thumbnail for scaled images\n        // that must drop back to CSS is known and exploited by the templating module.\n        // In this module, we pre-render \"waiting\" thumbs for all files immediately after they\n        // are submitted, and we must be sure to pass any style associated with the \"waiting\" preview.\n        qq(img).css({\n            maxWidth: maxSize + \"px\",\n            maxHeight: maxSize + \"px\"\n        });\n\n        img.src = url;\n    }\n\n    // Draw a (server-hosted) thumbnail given a URL.\n    // This will optionally scale the thumbnail as well.\n    // It attempts to use <canvas> to scale, but will fall back\n    // to max-width and max-height style properties if the UA\n    // doesn't support canvas or if the images is cross-domain and\n    // the UA doesn't support the crossorigin attribute on img tags,\n    // which is required to scale a cross-origin image using <canvas> &\n    // then export it back to an <img>.\n    function drawFromUrl(url, container, options) {\n        var draw = new qq.Promise(),\n            scale = options.scale,\n            maxSize = scale ? options.maxSize : null;\n\n        // container is an img, scaling needed\n        if (scale && isImg(container)) {\n            // Iff canvas is available in this UA, try to use it for scaling.\n            // Otherwise, fall back to CSS scaling\n            if (isCanvasSupported()) {\n                // Attempt to use <canvas> for image scaling,\n                // but we must fall back to scaling via CSS/styles\n                // if this is a cross-origin image and the UA doesn't support <img> CORS.\n                if (isCrossOrigin(url) && !isImgCorsSupported()) {\n                    drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n                }\n                else {\n                    drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n                }\n            }\n            else {\n                drawOnImgFromUrlWithCssScaling(url, container, draw, maxSize);\n            }\n        }\n        // container is a canvas, scaling optional\n        else if (isCanvas(container)) {\n            drawOnCanvasOrImgFromUrl(url, container, draw, maxSize);\n        }\n        // container is an img & no scaling: just set the src attr to the passed url\n        else if (registerThumbnailRenderedListener(container, draw)) {\n            container.src = url;\n        }\n\n        return draw;\n    }\n\n    qq.extend(this, {\n        /**\n         * Generate a thumbnail.  Depending on the arguments, this may either result in\n         * a client-side rendering of an image (if a `Blob` is supplied) or a server-generated\n         * image that may optionally be scaled client-side using <canvas> or CSS/styles (as a fallback).\n         *\n         * @param fileBlobOrUrl a `File`, `Blob`, or a URL pointing to the image\n         * @param container <img> or <canvas> to contain the preview\n         * @param options possible properties include `maxSize` (int), `orient` (bool - default true), resize` (bool - default true), and `customResizeFunction`.\n         * @returns qq.Promise fulfilled when the preview has been drawn, or the attempt has failed\n         */\n        generate: function(fileBlobOrUrl, container, options) {\n            if (qq.isString(fileBlobOrUrl)) {\n                log(\"Attempting to update thumbnail based on server response.\");\n                return drawFromUrl(fileBlobOrUrl, container, options || {});\n            }\n            else {\n                log(\"Attempting to draw client-side image preview.\");\n                return draw(fileBlobOrUrl, container, options || {});\n            }\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.isImg = isImg;\n    this._testing.isCanvas = isCanvas;\n    this._testing.isCrossOrigin = isCrossOrigin;\n    this._testing.determineMimeOfFileName = determineMimeOfFileName;\n    /*</testing>*/\n};\n","/*globals qq */\n/**\n * EXIF image data parser.  Currently only parses the Orientation tag value,\n * but this may be expanded to other tags in the future.\n *\n * @param fileOrBlob Attempt to parse EXIF data in this `Blob`\n * @constructor\n */\nqq.Exif = function(fileOrBlob, log) {\n    \"use strict\";\n\n    // Orientation is the only tag parsed here at this time.\n    var TAG_IDS = [274],\n        TAG_INFO = {\n            274: {\n                name: \"Orientation\",\n                bytes: 2\n            }\n        };\n\n    // Convert a little endian (hex string) to big endian (decimal).\n    function parseLittleEndian(hex) {\n        var result = 0,\n            pow = 0;\n\n        while (hex.length > 0) {\n            result += parseInt(hex.substring(0, 2), 16) * Math.pow(2, pow);\n            hex = hex.substring(2, hex.length);\n            pow += 8;\n        }\n\n        return result;\n    }\n\n    // Find the byte offset, of Application Segment 1 (EXIF).\n    // External callers need not supply any arguments.\n    function seekToApp1(offset, promise) {\n        var theOffset = offset,\n            thePromise = promise;\n        if (theOffset === undefined) {\n            theOffset = 2;\n            thePromise = new qq.Promise();\n        }\n\n        qq.readBlobToHex(fileOrBlob, theOffset, 4).then(function(hex) {\n            var match = /^ffe([0-9])/.exec(hex),\n                segmentLength;\n\n            if (match) {\n                if (match[1] !== \"1\") {\n                    segmentLength = parseInt(hex.slice(4, 8), 16);\n                    seekToApp1(theOffset + segmentLength + 2, thePromise);\n                }\n                else {\n                    thePromise.success(theOffset);\n                }\n            }\n            else {\n                thePromise.failure(\"No EXIF header to be found!\");\n            }\n        });\n\n        return thePromise;\n    }\n\n    // Find the byte offset of Application Segment 1 (EXIF) for valid JPEGs only.\n    function getApp1Offset() {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, 0, 6).then(function(hex) {\n            if (hex.indexOf(\"ffd8\") !== 0) {\n                promise.failure(\"Not a valid JPEG!\");\n            }\n            else {\n                seekToApp1().then(function(offset) {\n                    promise.success(offset);\n                },\n                function(error) {\n                    promise.failure(error);\n                });\n            }\n        });\n\n        return promise;\n    }\n\n    // Determine the byte ordering of the EXIF header.\n    function isLittleEndian(app1Start) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 10, 2).then(function(hex) {\n            promise.success(hex === \"4949\");\n        });\n\n        return promise;\n    }\n\n    // Determine the number of directory entries in the EXIF header.\n    function getDirEntryCount(app1Start, littleEndian) {\n        var promise = new qq.Promise();\n\n        qq.readBlobToHex(fileOrBlob, app1Start + 18, 2).then(function(hex) {\n            if (littleEndian) {\n                return promise.success(parseLittleEndian(hex));\n            }\n            else {\n                promise.success(parseInt(hex, 16));\n            }\n        });\n\n        return promise;\n    }\n\n    // Get the IFD portion of the EXIF header as a hex string.\n    function getIfd(app1Start, dirEntries) {\n        var offset = app1Start + 20,\n            bytes = dirEntries * 12;\n\n        return qq.readBlobToHex(fileOrBlob, offset, bytes);\n    }\n\n    // Obtain an array of all directory entries (as hex strings) in the EXIF header.\n    function getDirEntries(ifdHex) {\n        var entries = [],\n            offset = 0;\n\n        while (offset + 24 <= ifdHex.length) {\n            entries.push(ifdHex.slice(offset, offset + 24));\n            offset += 24;\n        }\n\n        return entries;\n    }\n\n    // Obtain values for all relevant tags and return them.\n    function getTagValues(littleEndian, dirEntries) {\n        var TAG_VAL_OFFSET = 16,\n            tagsToFind = qq.extend([], TAG_IDS),\n            vals = {};\n\n        qq.each(dirEntries, function(idx, entry) {\n            var idHex = entry.slice(0, 4),\n                id = littleEndian ? parseLittleEndian(idHex) : parseInt(idHex, 16),\n                tagsToFindIdx = tagsToFind.indexOf(id),\n                tagValHex, tagName, tagValLength;\n\n            if (tagsToFindIdx >= 0) {\n                tagName = TAG_INFO[id].name;\n                tagValLength = TAG_INFO[id].bytes;\n                tagValHex = entry.slice(TAG_VAL_OFFSET, TAG_VAL_OFFSET + (tagValLength * 2));\n                vals[tagName] = littleEndian ? parseLittleEndian(tagValHex) : parseInt(tagValHex, 16);\n\n                tagsToFind.splice(tagsToFindIdx, 1);\n            }\n\n            if (tagsToFind.length === 0) {\n                return false;\n            }\n        });\n\n        return vals;\n    }\n\n    qq.extend(this, {\n        /**\n         * Attempt to parse the EXIF header for the `Blob` associated with this instance.\n         *\n         * @returns {qq.Promise} To be fulfilled when the parsing is complete.\n         * If successful, the parsed EXIF header as an object will be included.\n         */\n        parse: function() {\n            var parser = new qq.Promise(),\n                onParseFailure = function(message) {\n                    log(qq.format(\"EXIF header parse failed: '{}' \", message));\n                    parser.failure(message);\n                };\n\n            getApp1Offset().then(function(app1Offset) {\n                log(qq.format(\"Moving forward with EXIF header parsing for '{}'\", fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name));\n\n                isLittleEndian(app1Offset).then(function(littleEndian) {\n\n                    log(qq.format(\"EXIF Byte order is {} endian\", littleEndian ? \"little\" : \"big\"));\n\n                    getDirEntryCount(app1Offset, littleEndian).then(function(dirEntryCount) {\n\n                        log(qq.format(\"Found {} APP1 directory entries\", dirEntryCount));\n\n                        getIfd(app1Offset, dirEntryCount).then(function(ifdHex) {\n                            var dirEntries = getDirEntries(ifdHex),\n                                tagValues = getTagValues(littleEndian, dirEntries);\n\n                            log(\"Successfully parsed some EXIF tags\");\n\n                            parser.success(tagValues);\n                        }, onParseFailure);\n                    }, onParseFailure);\n                }, onParseFailure);\n            }, onParseFailure);\n\n            return parser;\n        }\n    });\n\n    /*<testing>*/\n    this._testing = {};\n    this._testing.parseLittleEndian = parseLittleEndian;\n    /*</testing>*/\n};\n","/*globals qq */\nqq.Identify = function(fileOrBlob, log) {\n    \"use strict\";\n\n    function isIdentifiable(magicBytes, questionableBytes) {\n        var identifiable = false,\n            magicBytesEntries = [].concat(magicBytes);\n\n        qq.each(magicBytesEntries, function(idx, magicBytesArrayEntry) {\n            if (questionableBytes.indexOf(magicBytesArrayEntry) === 0) {\n                identifiable = true;\n                return false;\n            }\n        });\n\n        return identifiable;\n    }\n\n    qq.extend(this, {\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by reading magic\n         * bytes in the beginning of the file, so this is an asynchronous operation.  Before we attempt to read the\n         * file, we will examine the blob's type attribute to save CPU cycles.\n         *\n         * @returns {qq.Promise} Promise that is fulfilled when identification is complete.\n         * If successful, the MIME string is passed to the success handler.\n         */\n        isPreviewable: function() {\n            var self = this,\n                identifier = new qq.Promise(),\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            log(qq.format(\"Attempting to determine if {} can be rendered in this browser\", name));\n\n            log(\"First pass: check type attribute of blob object.\");\n\n            if (this.isPreviewableSync()) {\n                log(\"Second pass: check for magic bytes in file header.\");\n\n                qq.readBlobToHex(fileOrBlob, 0, 4).then(function(hex) {\n                    qq.each(self.PREVIEWABLE_MIME_TYPES, function(mime, bytes) {\n                        if (isIdentifiable(bytes, hex)) {\n                            // Safari is the only supported browser that can deal with TIFFs natively,\n                            // so, if this is a TIFF and the UA isn't Safari, declare this file \"non-previewable\".\n                            if (mime !== \"image/tiff\" || qq.supportedFeatures.tiffPreviews) {\n                                previewable = true;\n                                identifier.success(mime);\n                            }\n\n                            return false;\n                        }\n                    });\n\n                    log(qq.format(\"'{}' is {} able to be rendered in this browser\", name, previewable ? \"\" : \"NOT\"));\n\n                    if (!previewable) {\n                        identifier.failure();\n                    }\n                },\n                function() {\n                    log(\"Error reading file w/ name '\" + name + \"'.  Not able to be rendered in this browser.\");\n                    identifier.failure();\n                });\n            }\n            else {\n                identifier.failure();\n            }\n\n            return identifier;\n        },\n\n        /**\n         * Determines if a Blob can be displayed natively in the current browser.  This is done by checking the\n         * blob's type attribute.  This is a synchronous operation, useful for situations where an asynchronous operation\n         * would be challenging to support.  Note that the blob's type property is not as accurate as reading the\n         * file's magic bytes.\n         *\n         * @returns {Boolean} true if the blob can be rendered in the current browser\n         */\n        isPreviewableSync: function() {\n            var fileMime = fileOrBlob.type,\n                // Assumption: This will only ever be executed in browsers that support `Object.keys`.\n                isRecognizedImage = qq.indexOf(Object.keys(this.PREVIEWABLE_MIME_TYPES), fileMime) >= 0,\n                previewable = false,\n                name = fileOrBlob.name === undefined ? \"blob\" : fileOrBlob.name;\n\n            if (isRecognizedImage) {\n                if (fileMime === \"image/tiff\") {\n                    previewable = qq.supportedFeatures.tiffPreviews;\n                }\n                else {\n                    previewable = true;\n                }\n            }\n\n            !previewable && log(name + \" is not previewable in this browser per the blob's type attr\");\n\n            return previewable;\n        }\n    });\n};\n\nqq.Identify.prototype.PREVIEWABLE_MIME_TYPES = {\n    \"image/jpeg\": \"ffd8ff\",\n    \"image/gif\": \"474946\",\n    \"image/png\": \"89504e\",\n    \"image/bmp\": \"424d\",\n    \"image/tiff\": [\"49492a00\", \"4d4d002a\"]\n};\n","/*globals qq*/\n/**\n * Attempts to validate an image, wherever possible.\n *\n * @param blob File or Blob representing a user-selecting image.\n * @param log Uses this to post log messages to the console.\n * @constructor\n */\nqq.ImageValidation = function(blob, log) {\n    \"use strict\";\n\n    /**\n     * @param limits Object with possible image-related limits to enforce.\n     * @returns {boolean} true if at least one of the limits has a non-zero value\n     */\n    function hasNonZeroLimits(limits) {\n        var atLeastOne = false;\n\n        qq.each(limits, function(limit, value) {\n            if (value > 0) {\n                atLeastOne = true;\n                return false;\n            }\n        });\n\n        return atLeastOne;\n    }\n\n    /**\n     * @returns {qq.Promise} The promise is a failure if we can't obtain the width & height.\n     * Otherwise, `success` is called on the returned promise with an object containing\n     * `width` and `height` properties.\n     */\n    function getWidthHeight() {\n        var sizeDetermination = new qq.Promise();\n\n        new qq.Identify(blob, log).isPreviewable().then(function() {\n            var image = new Image(),\n                url = window.URL && window.URL.createObjectURL ? window.URL :\n                      window.webkitURL && window.webkitURL.createObjectURL ? window.webkitURL :\n                      null;\n\n            if (url) {\n                image.onerror = function() {\n                    log(\"Cannot determine dimensions for image.  May be too large.\", \"error\");\n                    sizeDetermination.failure();\n                };\n\n                image.onload = function() {\n                    sizeDetermination.success({\n                        width: this.width,\n                        height: this.height\n                    });\n                };\n\n                image.src = url.createObjectURL(blob);\n            }\n            else {\n                log(\"No createObjectURL function available to generate image URL!\", \"error\");\n                sizeDetermination.failure();\n            }\n        }, sizeDetermination.failure);\n\n        return sizeDetermination;\n    }\n\n    /**\n     *\n     * @param limits Object with possible image-related limits to enforce.\n     * @param dimensions Object containing `width` & `height` properties for the image to test.\n     * @returns {String || undefined} The name of the failing limit.  Undefined if no failing limits.\n     */\n    function getFailingLimit(limits, dimensions) {\n        var failingLimit;\n\n        qq.each(limits, function(limitName, limitValue) {\n            if (limitValue > 0) {\n                var limitMatcher = /(max|min)(Width|Height)/.exec(limitName),\n                    dimensionPropName = limitMatcher[2].charAt(0).toLowerCase() + limitMatcher[2].slice(1),\n                    actualValue = dimensions[dimensionPropName];\n\n                /*jshint -W015*/\n                switch (limitMatcher[1]) {\n                    case \"min\":\n                        if (actualValue < limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                    case \"max\":\n                        if (actualValue > limitValue) {\n                            failingLimit = limitName;\n                            return false;\n                        }\n                        break;\n                }\n            }\n        });\n\n        return failingLimit;\n    }\n\n    /**\n     * Validate the associated blob.\n     *\n     * @param limits\n     * @returns {qq.Promise} `success` is called on the promise is the image is valid or\n     * if the blob is not an image, or if the image is not verifiable.\n     * Otherwise, `failure` with the name of the failing limit.\n     */\n    this.validate = function(limits) {\n        var validationEffort = new qq.Promise();\n\n        log(\"Attempting to validate image.\");\n\n        if (hasNonZeroLimits(limits)) {\n            getWidthHeight().then(function(dimensions) {\n                var failingLimit = getFailingLimit(limits, dimensions);\n\n                if (failingLimit) {\n                    validationEffort.failure(failingLimit);\n                }\n                else {\n                    validationEffort.success();\n                }\n            }, validationEffort.success);\n        }\n        else {\n            validationEffort.success();\n        }\n\n        return validationEffort;\n    };\n};\n","/* globals qq */\n/**\n * Module used to control populating the initial list of files.\n *\n * @constructor\n */\nqq.Session = function(spec) {\n    \"use strict\";\n\n    var options = {\n        endpoint: null,\n        params: {},\n        customHeaders: {},\n        cors: {},\n        addFileRecord: function(sessionData) {},\n        log: function(message, level) {}\n    };\n\n    qq.extend(options, spec, true);\n\n    function isJsonResponseValid(response) {\n        if (qq.isArray(response)) {\n            return true;\n        }\n\n        options.log(\"Session response is not an array.\", \"error\");\n    }\n\n    function handleFileItems(fileItems, success, xhrOrXdr, promise) {\n        var someItemsIgnored = false;\n\n        success = success && isJsonResponseValid(fileItems);\n\n        if (success) {\n            qq.each(fileItems, function(idx, fileItem) {\n                /* jshint eqnull:true */\n                if (fileItem.uuid == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid UUID - ignoring.\", idx), \"error\");\n                }\n                else if (fileItem.name == null) {\n                    someItemsIgnored = true;\n                    options.log(qq.format(\"Session response item {} did not include a valid name - ignoring.\", idx), \"error\");\n                }\n                else {\n                    try {\n                        options.addFileRecord(fileItem);\n                        return true;\n                    }\n                    catch (err) {\n                        someItemsIgnored = true;\n                        options.log(err.message, \"error\");\n                    }\n                }\n\n                return false;\n            });\n        }\n\n        promise[success && !someItemsIgnored ? \"success\" : \"failure\"](fileItems, xhrOrXdr);\n    }\n\n    // Initiate a call to the server that will be used to populate the initial file list.\n    // Returns a `qq.Promise`.\n    this.refresh = function() {\n        /*jshint indent:false */\n        var refreshEffort = new qq.Promise(),\n            refreshCompleteCallback = function(response, success, xhrOrXdr) {\n                handleFileItems(response, success, xhrOrXdr, refreshEffort);\n            },\n            requesterOptions = qq.extend({}, options),\n            requester = new qq.SessionAjaxRequester(\n                qq.extend(requesterOptions, {onComplete: refreshCompleteCallback})\n            );\n\n        requester.queryServer();\n\n        return refreshEffort;\n    };\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Thin module used to send GET requests to the server, expecting information about session\n * data used to initialize an uploader instance.\n *\n * @param spec Various options used to influence the associated request.\n * @constructor\n */\nqq.SessionAjaxRequester = function(spec) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            endpoint: null,\n            customHeaders: {},\n            params: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            onComplete: function(response, success, xhrOrXdr) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, spec);\n\n    function onComplete(id, xhrOrXdr, isError) {\n        var response = null;\n\n        /* jshint eqnull:true */\n        if (xhrOrXdr.responseText != null) {\n            try {\n                response = qq.parseJson(xhrOrXdr.responseText);\n            }\n            catch (err) {\n                options.log(\"Problem parsing session response: \" + err.message, \"error\");\n                isError = true;\n            }\n        }\n\n        options.onComplete(response, !isError, xhrOrXdr);\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: onComplete,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        queryServer: function() {\n            var params = qq.extend({}, options.params);\n\n            options.log(\"Session query request.\");\n\n            requester.initTransport(\"sessionRefresh\")\n                .withParams(params)\n                .withCacheBuster()\n                .send();\n        }\n    });\n};\n","/* globals qq, ExifRestorer */\n/**\n * Controls generation of scaled images based on a reference image encapsulated in a `File` or `Blob`.\n * Scaled images are generated and converted to blobs on-demand.\n * Multiple scaled images per reference image with varying sizes and other properties are supported.\n *\n * @param spec Information about the scaled images to generate.\n * @param log Logger instance\n * @constructor\n */\nqq.Scaler = function(spec, log) {\n    \"use strict\";\n\n    var self = this,\n        customResizeFunction = spec.customResizer,\n        includeOriginal = spec.sendOriginal,\n        orient = spec.orient,\n        defaultType = spec.defaultType,\n        defaultQuality = spec.defaultQuality / 100,\n        failedToScaleText = spec.failureText,\n        includeExif = spec.includeExif,\n        sizes = this._getSortedSizes(spec.sizes);\n\n    // Revealed API for instances of this module\n    qq.extend(this, {\n        // If no targeted sizes have been declared or if this browser doesn't support\n        // client-side image preview generation, there is no scaling to do.\n        enabled: qq.supportedFeatures.scaling && sizes.length > 0,\n\n        getFileRecords: function(originalFileUuid, originalFileName, originalBlobOrBlobData) {\n            var self = this,\n                records = [],\n                originalBlob = originalBlobOrBlobData.blob ? originalBlobOrBlobData.blob : originalBlobOrBlobData,\n                identifier = new qq.Identify(originalBlob, log);\n\n            // If the reference file cannot be rendered natively, we can't create scaled versions.\n            if (identifier.isPreviewableSync()) {\n                // Create records for each scaled version & add them to the records array, smallest first.\n                qq.each(sizes, function(idx, sizeRecord) {\n                    var outputType = self._determineOutputType({\n                        defaultType: defaultType,\n                        requestedType: sizeRecord.type,\n                        refType: originalBlob.type\n                    });\n\n                    records.push({\n                        uuid: qq.getUniqueId(),\n                        name: self._getName(originalFileName, {\n                            name: sizeRecord.name,\n                            type: outputType,\n                            refType: originalBlob.type\n                        }),\n                        blob: new qq.BlobProxy(originalBlob,\n                        qq.bind(self._generateScaledImage, self, {\n                            customResizeFunction: customResizeFunction,\n                            maxSize: sizeRecord.maxSize,\n                            orient: orient,\n                            type: outputType,\n                            quality: defaultQuality,\n                            failedText: failedToScaleText,\n                            includeExif: includeExif,\n                            log: log\n                        }))\n                    });\n                });\n\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: includeOriginal ? originalBlob : null\n                });\n            }\n            else {\n                records.push({\n                    uuid: originalFileUuid,\n                    name: originalFileName,\n                    size: originalBlob.size,\n                    blob: originalBlob\n                });\n            }\n\n            return records;\n        },\n\n        handleNewFile: function(file, name, uuid, size, fileList, batchId, uuidParamName, api) {\n            var self = this,\n                buttonId = file.qqButtonId || (file.blob && file.blob.qqButtonId),\n                scaledIds = [],\n                originalId = null,\n                addFileToHandler = api.addFileToHandler,\n                uploadData = api.uploadData,\n                paramsStore = api.paramsStore,\n                proxyGroupId = qq.getUniqueId();\n\n            qq.each(self.getFileRecords(uuid, name, file), function(idx, record) {\n                var blobSize = record.size,\n                    id;\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    blobSize = -1;\n                }\n\n                id = uploadData.addFile({\n                    uuid: record.uuid,\n                    name: record.name,\n                    size: blobSize,\n                    batchId: batchId,\n                    proxyGroupId: proxyGroupId\n                });\n\n                if (record.blob instanceof qq.BlobProxy) {\n                    scaledIds.push(id);\n                }\n                else {\n                    originalId = id;\n                }\n\n                if (record.blob) {\n                    addFileToHandler(id, record.blob);\n                    fileList.push({id: id, file: record.blob});\n                }\n                else {\n                    uploadData.setStatus(id, qq.status.REJECTED);\n                }\n            });\n\n            // If we are potentially uploading an original file and some scaled versions,\n            // ensure the scaled versions include reference's to the parent's UUID and size\n            // in their associated upload requests.\n            if (originalId !== null) {\n                qq.each(scaledIds, function(idx, scaledId) {\n                    var params = {\n                        qqparentuuid: uploadData.retrieve({id: originalId}).uuid,\n                        qqparentsize: uploadData.retrieve({id: originalId}).size\n                    };\n\n                    // Make sure the UUID for each scaled image is sent with the upload request,\n                    // to be consistent (since we may need to ensure it is sent for the original file as well).\n                    params[uuidParamName] = uploadData.retrieve({id: scaledId}).uuid;\n\n                    uploadData.setParentId(scaledId, originalId);\n                    paramsStore.addReadOnly(scaledId, params);\n                });\n\n                // If any scaled images are tied to this parent image, be SURE we send its UUID as an upload request\n                // parameter as well.\n                if (scaledIds.length) {\n                    (function() {\n                        var param = {};\n                        param[uuidParamName] = uploadData.retrieve({id: originalId}).uuid;\n                        paramsStore.addReadOnly(originalId, param);\n                    }());\n                }\n            }\n        }\n    });\n};\n\nqq.extend(qq.Scaler.prototype, {\n    scaleImage: function(id, specs, api) {\n        \"use strict\";\n\n        if (!qq.supportedFeatures.scaling) {\n            throw new qq.Error(\"Scaling is not supported in this browser!\");\n        }\n\n        var scalingEffort = new qq.Promise(),\n            log = api.log,\n            file = api.getFile(id),\n            uploadData = api.uploadData.retrieve({id: id}),\n            name = uploadData && uploadData.name,\n            uuid = uploadData && uploadData.uuid,\n            scalingOptions = {\n                customResizer: specs.customResizer,\n                sendOriginal: false,\n                orient: specs.orient,\n                defaultType: specs.type || null,\n                defaultQuality: specs.quality,\n                failedToScaleText: \"Unable to scale\",\n                sizes: [{name: \"\", maxSize: specs.maxSize}]\n            },\n            scaler = new qq.Scaler(scalingOptions, log);\n\n        if (!qq.Scaler || !qq.supportedFeatures.imagePreviews || !file) {\n            scalingEffort.failure();\n\n            log(\"Could not generate requested scaled image for \" + id + \".  \" +\n                \"Scaling is either not possible in this browser, or the file could not be located.\", \"error\");\n        }\n        else {\n            (qq.bind(function() {\n                // Assumption: There will never be more than one record\n                var record = scaler.getFileRecords(uuid, name, file)[0];\n\n                if (record && record.blob instanceof qq.BlobProxy) {\n                    record.blob.create().then(scalingEffort.success, scalingEffort.failure);\n                }\n                else {\n                    log(id + \" is not a scalable image!\", \"error\");\n                    scalingEffort.failure();\n                }\n            }, this)());\n        }\n\n        return scalingEffort;\n    },\n\n    // NOTE: We cannot reliably determine at this time if the UA supports a specific MIME type for the target format.\n    // image/jpeg and image/png are the only safe choices at this time.\n    _determineOutputType: function(spec) {\n        \"use strict\";\n\n        var requestedType = spec.requestedType,\n            defaultType = spec.defaultType,\n            referenceType = spec.refType;\n\n        // If a default type and requested type have not been specified, this should be a\n        // JPEG if the original type is a JPEG, otherwise, a PNG.\n        if (!defaultType && !requestedType) {\n            if (referenceType !== \"image/jpeg\") {\n                return \"image/png\";\n            }\n            return referenceType;\n        }\n\n        // A specified default type is used when a requested type is not specified.\n        if (!requestedType) {\n            return defaultType;\n        }\n\n        // If requested type is specified, use it, as long as this recognized type is supported by the current UA\n        if (qq.indexOf(Object.keys(qq.Identify.prototype.PREVIEWABLE_MIME_TYPES), requestedType) >= 0) {\n            if (requestedType === \"image/tiff\") {\n                return qq.supportedFeatures.tiffPreviews ? requestedType : defaultType;\n            }\n\n            return requestedType;\n        }\n\n        return defaultType;\n    },\n\n    // Get a file name for a generated scaled file record, based on the provided scaled image description\n    _getName: function(originalName, scaledVersionProperties) {\n        \"use strict\";\n\n        var startOfExt = originalName.lastIndexOf(\".\"),\n            versionType = scaledVersionProperties.type || \"image/png\",\n            referenceType = scaledVersionProperties.refType,\n            scaledName = \"\",\n            scaledExt = qq.getExtension(originalName),\n            nameAppendage = \"\";\n\n        if (scaledVersionProperties.name && scaledVersionProperties.name.trim().length) {\n            nameAppendage = \" (\" + scaledVersionProperties.name + \")\";\n        }\n\n        if (startOfExt >= 0) {\n            scaledName = originalName.substr(0, startOfExt);\n\n            if (referenceType !== versionType) {\n                scaledExt = versionType.split(\"/\")[1];\n            }\n\n            scaledName += nameAppendage + \".\" + scaledExt;\n        }\n        else {\n            scaledName = originalName + nameAppendage;\n        }\n\n        return scaledName;\n    },\n\n    // We want the smallest scaled file to be uploaded first\n    _getSortedSizes: function(sizes) {\n        \"use strict\";\n\n        sizes = qq.extend([], sizes);\n\n        return sizes.sort(function(a, b) {\n            if (a.maxSize > b.maxSize) {\n                return 1;\n            }\n            if (a.maxSize < b.maxSize) {\n                return -1;\n            }\n            return 0;\n        });\n    },\n\n    _generateScaledImage: function(spec, sourceFile) {\n        \"use strict\";\n\n        var self = this,\n            customResizeFunction = spec.customResizeFunction,\n            log = spec.log,\n            maxSize = spec.maxSize,\n            orient = spec.orient,\n            type = spec.type,\n            quality = spec.quality,\n            failedText = spec.failedText,\n            includeExif = spec.includeExif && sourceFile.type === \"image/jpeg\" && type === \"image/jpeg\",\n            scalingEffort = new qq.Promise(),\n            imageGenerator = new qq.ImageGenerator(log),\n            canvas = document.createElement(\"canvas\");\n\n        log(\"Attempting to generate scaled version for \" + sourceFile.name);\n\n        imageGenerator.generate(sourceFile, canvas, {maxSize: maxSize, orient: orient, customResizeFunction: customResizeFunction}).then(function() {\n            var scaledImageDataUri = canvas.toDataURL(type, quality),\n                signalSuccess = function() {\n                    log(\"Success generating scaled version for \" + sourceFile.name);\n                    var blob = qq.dataUriToBlob(scaledImageDataUri);\n                    scalingEffort.success(blob);\n                };\n\n            if (includeExif) {\n                self._insertExifHeader(sourceFile, scaledImageDataUri, log).then(function(scaledImageDataUriWithExif) {\n                    scaledImageDataUri = scaledImageDataUriWithExif;\n                    signalSuccess();\n                },\n                function() {\n                    log(\"Problem inserting EXIF header into scaled image.  Using scaled image w/out EXIF data.\", \"error\");\n                    signalSuccess();\n                });\n            }\n            else {\n                signalSuccess();\n            }\n        }, function() {\n            log(\"Failed attempt to generate scaled version for \" + sourceFile.name, \"error\");\n            scalingEffort.failure(failedText);\n        });\n\n        return scalingEffort;\n    },\n\n    // Attempt to insert the original image's EXIF header into a scaled version.\n    _insertExifHeader: function(originalImage, scaledImageDataUri, log) {\n        \"use strict\";\n\n        var reader = new FileReader(),\n            insertionEffort = new qq.Promise(),\n            originalImageDataUri = \"\";\n\n        reader.onload = function() {\n            originalImageDataUri = reader.result;\n            insertionEffort.success(qq.ExifRestorer.restore(originalImageDataUri, scaledImageDataUri));\n        };\n\n        reader.onerror = function() {\n            log(\"Problem reading \" + originalImage.name + \" during attempt to transfer EXIF data to scaled version.\", \"error\");\n            insertionEffort.failure();\n        };\n\n        reader.readAsDataURL(originalImage);\n\n        return insertionEffort;\n    },\n\n    _dataUriToBlob: function(dataUri) {\n        \"use strict\";\n\n        var byteString, mimeString, arrayBuffer, intArray;\n\n        // convert base64 to raw binary data held in a string\n        if (dataUri.split(\",\")[0].indexOf(\"base64\") >= 0) {\n            byteString = atob(dataUri.split(\",\")[1]);\n        }\n        else {\n            byteString = decodeURI(dataUri.split(\",\")[1]);\n        }\n\n        // extract the MIME\n        mimeString = dataUri.split(\",\")[0]\n            .split(\":\")[1]\n            .split(\";\")[0];\n\n        // write the bytes of the binary string to an ArrayBuffer\n        arrayBuffer = new ArrayBuffer(byteString.length);\n        intArray = new Uint8Array(arrayBuffer);\n        qq.each(byteString, function(idx, character) {\n            intArray[idx] = character.charCodeAt(0);\n        });\n\n        return this._createBlob(arrayBuffer, mimeString);\n    },\n\n    _createBlob: function(data, mime) {\n        \"use strict\";\n\n        var BlobBuilder = window.BlobBuilder ||\n                window.WebKitBlobBuilder ||\n                window.MozBlobBuilder ||\n                window.MSBlobBuilder,\n            blobBuilder = BlobBuilder && new BlobBuilder();\n\n        if (blobBuilder) {\n            blobBuilder.append(data);\n            return blobBuilder.getBlob(mime);\n        }\n        else {\n            return new Blob([data], {type: mime});\n        }\n    }\n});\n","//Based on MinifyJpeg\n//http://elicon.blog57.fc2.com/blog-entry-206.html\n\nqq.ExifRestorer = (function()\n{\n   \n\tvar ExifRestorer = {};\n\t \n    ExifRestorer.KEY_STR = \"ABCDEFGHIJKLMNOP\" +\n                         \"QRSTUVWXYZabcdef\" +\n                         \"ghijklmnopqrstuv\" +\n                         \"wxyz0123456789+/\" +\n                         \"=\";\n\n    ExifRestorer.encode64 = function(input)\n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0;\n\n        do {\n            chr1 = input[i++];\n            chr2 = input[i++];\n            chr3 = input[i++];\n\n            enc1 = chr1 >> 2;\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n            enc4 = chr3 & 63;\n\n            if (isNaN(chr2)) {\n               enc3 = enc4 = 64;\n            } else if (isNaN(chr3)) {\n               enc4 = 64;\n            }\n\n            output = output +\n               this.KEY_STR.charAt(enc1) +\n               this.KEY_STR.charAt(enc2) +\n               this.KEY_STR.charAt(enc3) +\n               this.KEY_STR.charAt(enc4);\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n        } while (i < input.length);\n\n        return output;\n    };\n    \n    ExifRestorer.restore = function(origFileBase64, resizedFileBase64)\n    {\n        var expectedBase64Header = \"data:image/jpeg;base64,\";\n\n        if (!origFileBase64.match(expectedBase64Header))\n        {\n        \treturn resizedFileBase64;\n        }       \n        \n        var rawImage = this.decode64(origFileBase64.replace(expectedBase64Header, \"\"));\n        var segments = this.slice2Segments(rawImage);\n                \n        var image = this.exifManipulation(resizedFileBase64, segments);\n        \n        return expectedBase64Header + this.encode64(image);\n        \n    };\n\n\n    ExifRestorer.exifManipulation = function(resizedFileBase64, segments)\n    {\n            var exifArray = this.getExifArray(segments),\n                newImageArray = this.insertExif(resizedFileBase64, exifArray),\n                aBuffer = new Uint8Array(newImageArray);\n\n            return aBuffer;\n    };\n\n\n    ExifRestorer.getExifArray = function(segments)\n    {\n            var seg;\n            for (var x = 0; x < segments.length; x++)\n            {\n                seg = segments[x];\n                if (seg[0] == 255 & seg[1] == 225) //(ff e1)\n                {\n                    return seg;\n                }\n            }\n            return [];\n    };\n\n\n    ExifRestorer.insertExif = function(resizedFileBase64, exifArray)\n    {\n            var imageData = resizedFileBase64.replace(\"data:image/jpeg;base64,\", \"\"),\n                buf = this.decode64(imageData),\n                separatePoint = buf.indexOf(255,3),\n                mae = buf.slice(0, separatePoint),\n                ato = buf.slice(separatePoint),\n                array = mae;\n\n            array = array.concat(exifArray);\n            array = array.concat(ato);\n           return array;\n    };\n\n\n    \n    ExifRestorer.slice2Segments = function(rawImageArray)\n    {\n        var head = 0,\n            segments = [];\n\n        while (1)\n        {\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 218){break;}\n            if (rawImageArray[head] == 255 & rawImageArray[head + 1] == 216)\n            {\n                head += 2;\n            }\n            else\n            {\n                var length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3],\n                    endPoint = head + length + 2,\n                    seg = rawImageArray.slice(head, endPoint);\n                segments.push(seg);\n                head = endPoint;\n            }\n            if (head > rawImageArray.length){break;}\n        }\n\n        return segments;\n    };\n\n\n    \n    ExifRestorer.decode64 = function(input) \n    {\n        var output = \"\",\n            chr1, chr2, chr3 = \"\",\n            enc1, enc2, enc3, enc4 = \"\",\n            i = 0,\n            buf = [];\n\n        // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n        var base64test = /[^A-Za-z0-9\\+\\/\\=]/g;\n        if (base64test.exec(input)) {\n            throw new Error(\"There were invalid base64 characters in the input text.  \" +\n                \"Valid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\");\n        }\n        input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, \"\");\n\n        do {\n            enc1 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc2 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc3 = this.KEY_STR.indexOf(input.charAt(i++));\n            enc4 = this.KEY_STR.indexOf(input.charAt(i++));\n\n            chr1 = (enc1 << 2) | (enc2 >> 4);\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n            chr3 = ((enc3 & 3) << 6) | enc4;\n\n            buf.push(chr1);\n\n            if (enc3 != 64) {\n               buf.push(chr2);\n            }\n            if (enc4 != 64) {\n               buf.push(chr3);\n            }\n\n            chr1 = chr2 = chr3 = \"\";\n            enc1 = enc2 = enc3 = enc4 = \"\";\n\n        } while (i < input.length);\n\n        return buf;\n    };\n\n    \n    return ExifRestorer;\n})();\n","/* globals qq */\n/**\n * Keeps a running tally of total upload progress for a batch of files.\n *\n * @param callback Invoked when total progress changes, passing calculated total loaded & total size values.\n * @param getSize Function that returns the size of a file given its ID\n * @constructor\n */\nqq.TotalProgress = function(callback, getSize) {\n    \"use strict\";\n\n    var perFileProgress = {},\n        totalLoaded = 0,\n        totalSize = 0,\n\n        lastLoadedSent = -1,\n        lastTotalSent = -1,\n        callbackProxy = function(loaded, total) {\n            if (loaded !== lastLoadedSent || total !== lastTotalSent) {\n                callback(loaded, total);\n            }\n\n            lastLoadedSent = loaded;\n            lastTotalSent = total;\n        },\n\n        /**\n         * @param failed Array of file IDs that have failed\n         * @param retryable Array of file IDs that are retryable\n         * @returns true if none of the failed files are eligible for retry\n         */\n        noRetryableFiles = function(failed, retryable) {\n            var none = true;\n\n            qq.each(failed, function(idx, failedId) {\n                if (qq.indexOf(retryable, failedId) >= 0) {\n                    none = false;\n                    return false;\n                }\n            });\n\n            return none;\n        },\n\n        onCancel = function(id) {\n            updateTotalProgress(id, -1, -1);\n            delete perFileProgress[id];\n        },\n\n        onAllComplete = function(successful, failed, retryable) {\n            if (failed.length === 0 || noRetryableFiles(failed, retryable)) {\n                callbackProxy(totalSize, totalSize);\n                this.reset();\n            }\n        },\n\n        onNew = function(id) {\n            var size = getSize(id);\n\n            // We might not know the size yet, such as for blob proxies\n            if (size > 0) {\n                updateTotalProgress(id, 0, size);\n                perFileProgress[id] = {loaded: 0, total: size};\n            }\n        },\n\n        /**\n         * Invokes the callback with the current total progress of all files in the batch.  Called whenever it may\n         * be appropriate to re-calculate and disseminate this data.\n         *\n         * @param id ID of a file that has changed in some important way\n         * @param newLoaded New loaded value for this file.  -1 if this value should no longer be part of calculations\n         * @param newTotal New total size of the file.  -1 if this value should no longer be part of calculations\n         */\n        updateTotalProgress = function(id, newLoaded, newTotal) {\n            var oldLoaded = perFileProgress[id] ? perFileProgress[id].loaded : 0,\n                oldTotal = perFileProgress[id] ? perFileProgress[id].total : 0;\n\n            if (newLoaded === -1 && newTotal === -1) {\n                totalLoaded -= oldLoaded;\n                totalSize -= oldTotal;\n            }\n            else {\n                if (newLoaded) {\n                    totalLoaded += newLoaded - oldLoaded;\n                }\n                if (newTotal) {\n                    totalSize += newTotal - oldTotal;\n                }\n            }\n\n            callbackProxy(totalLoaded, totalSize);\n        };\n\n    qq.extend(this, {\n        // Called when a batch of files has completed uploading.\n        onAllComplete: onAllComplete,\n\n        // Called when the status of a file has changed.\n        onStatusChange: function(id, oldStatus, newStatus) {\n            if (newStatus === qq.status.CANCELED || newStatus === qq.status.REJECTED) {\n                onCancel(id);\n            }\n            else if (newStatus === qq.status.SUBMITTING) {\n                onNew(id);\n            }\n        },\n\n        // Called whenever the upload progress of an individual file has changed.\n        onIndividualProgress: function(id, loaded, total) {\n            updateTotalProgress(id, loaded, total);\n            perFileProgress[id] = {loaded: loaded, total: total};\n        },\n\n        // Called whenever the total size of a file has changed, such as when the size of a generated blob is known.\n        onNewSize: function(id) {\n            onNew(id);\n        },\n\n        reset: function() {\n            perFileProgress = {};\n            totalLoaded = 0;\n            totalSize = 0;\n        }\n    });\n};\n","/*globals qq*/\nqq.PasteSupport = function(o) {\n    \"use strict\";\n\n    var options, detachPasteHandler;\n\n    options = {\n        targetElement: null,\n        callbacks: {\n            log: function(message, level) {},\n            pasteReceived: function(blob) {}\n        }\n    };\n\n    function isImage(item) {\n        return item.type &&\n            item.type.indexOf(\"image/\") === 0;\n    }\n\n    function registerPasteHandler() {\n        detachPasteHandler = qq(options.targetElement).attach(\"paste\", function(event) {\n            var clipboardData = event.clipboardData;\n\n            if (clipboardData) {\n                qq.each(clipboardData.items, function(idx, item) {\n                    if (isImage(item)) {\n                        var blob = item.getAsFile();\n                        options.callbacks.pasteReceived(blob);\n                    }\n                });\n            }\n        });\n    }\n\n    function unregisterPasteHandler() {\n        if (detachPasteHandler) {\n            detachPasteHandler();\n        }\n    }\n\n    qq.extend(options, o);\n    registerPasteHandler();\n\n    qq.extend(this, {\n        reset: function() {\n            unregisterPasteHandler();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Module that handles support for existing forms.\n *\n * @param options Options passed from the integrator-supplied options related to form support.\n * @param startUpload Callback to invoke when files \"stored\" should be uploaded.\n * @param log Proxy for the logger\n * @constructor\n */\nqq.FormSupport = function(options, startUpload, log) {\n    \"use strict\";\n    var self  = this,\n        interceptSubmit = options.interceptSubmit,\n        formEl = options.element,\n        autoUpload = options.autoUpload;\n\n    // Available on the public API associated with this module.\n    qq.extend(this, {\n        // To be used by the caller to determine if the endpoint will be determined by some processing\n        // that occurs in this module, such as if the form has an action attribute.\n        // Ignore if `attachToForm === false`.\n        newEndpoint: null,\n\n        // To be used by the caller to determine if auto uploading should be allowed.\n        // Ignore if `attachToForm === false`.\n        newAutoUpload: autoUpload,\n\n        // true if a form was detected and is being tracked by this module\n        attachedToForm: false,\n\n        // Returns an object with names and values for all valid form elements associated with the attached form.\n        getFormInputsAsObject: function() {\n            /* jshint eqnull:true */\n            if (formEl == null) {\n                return null;\n            }\n\n            return self._form2Obj(formEl);\n        }\n    });\n\n    // If the form contains an action attribute, this should be the new upload endpoint.\n    function determineNewEndpoint(formEl) {\n        if (formEl.getAttribute(\"action\")) {\n            self.newEndpoint = formEl.getAttribute(\"action\");\n        }\n    }\n\n    // Return true only if the form is valid, or if we cannot make this determination.\n    // If the form is invalid, ensure invalid field(s) are highlighted in the UI.\n    function validateForm(formEl, nativeSubmit) {\n        if (formEl.checkValidity && !formEl.checkValidity()) {\n            log(\"Form did not pass validation checks - will not upload.\", \"error\");\n            nativeSubmit();\n        }\n        else {\n            return true;\n        }\n    }\n\n    // Intercept form submit attempts, unless the integrator has told us not to do this.\n    function maybeUploadOnSubmit(formEl) {\n        var nativeSubmit = formEl.submit;\n\n        // Intercept and squelch submit events.\n        qq(formEl).attach(\"submit\", function(event) {\n            event = event || window.event;\n\n            if (event.preventDefault) {\n                event.preventDefault();\n            }\n            else {\n                event.returnValue = false;\n            }\n\n            validateForm(formEl, nativeSubmit) && startUpload();\n        });\n\n        // The form's `submit()` function may be called instead (i.e. via jQuery.submit()).\n        // Intercept that too.\n        formEl.submit = function() {\n            validateForm(formEl, nativeSubmit) && startUpload();\n        };\n    }\n\n    // If the element value passed from the uploader is a string, assume it is an element ID - select it.\n    // The rest of the code in this module depends on this being an HTMLElement.\n    function determineFormEl(formEl) {\n        if (formEl) {\n            if (qq.isString(formEl)) {\n                formEl = document.getElementById(formEl);\n            }\n\n            if (formEl) {\n                log(\"Attaching to form element.\");\n                determineNewEndpoint(formEl);\n                interceptSubmit && maybeUploadOnSubmit(formEl);\n            }\n        }\n\n        return formEl;\n    }\n\n    formEl = determineFormEl(formEl);\n    this.attachedToForm = !!formEl;\n};\n\nqq.extend(qq.FormSupport.prototype, {\n    // Converts all relevant form fields to key/value pairs.  This is meant to mimic the data a browser will\n    // construct from a given form when the form is submitted.\n    _form2Obj: function(form) {\n        \"use strict\";\n        var obj = {},\n            notIrrelevantType = function(type) {\n                var irrelevantTypes = [\n                    \"button\",\n                    \"image\",\n                    \"reset\",\n                    \"submit\"\n                ];\n\n                return qq.indexOf(irrelevantTypes, type.toLowerCase()) < 0;\n            },\n            radioOrCheckbox = function(type) {\n                return qq.indexOf([\"checkbox\", \"radio\"], type.toLowerCase()) >= 0;\n            },\n            ignoreValue = function(el) {\n                if (radioOrCheckbox(el.type) && !el.checked) {\n                    return true;\n                }\n\n                return el.disabled && el.type.toLowerCase() !== \"hidden\";\n            },\n            selectValue = function(select) {\n                var value = null;\n\n                qq.each(qq(select).children(), function(idx, child) {\n                    if (child.tagName.toLowerCase() === \"option\" && child.selected) {\n                        value = child.value;\n                        return false;\n                    }\n                });\n\n                return value;\n            };\n\n        qq.each(form.elements, function(idx, el) {\n            if ((qq.isInput(el, true) || el.tagName.toLowerCase() === \"textarea\") &&\n                notIrrelevantType(el.type) &&\n                !ignoreValue(el)) {\n\n                obj[el.name] = el.value;\n            }\n            else if (el.tagName.toLowerCase() === \"select\" && !ignoreValue(el)) {\n                var value = selectValue(el);\n\n                if (value !== null) {\n                    obj[el.name] = value;\n                }\n            }\n        });\n\n        return obj;\n    }\n});\n","/*globals qq */\nqq.azure = qq.azure || {};\nqq.azure.util = qq.azure.util || (function() {\n    \"use strict\";\n\n    return {\n        AZURE_PARAM_PREFIX: \"x-ms-meta-\",\n\n        /** Test if a request header is actually a known Azure parameter. See: https://msdn.microsoft.com/en-us/library/azure/dd179451.aspx\n         *\n         * @param name Name of the Request Header parameter.\n         * @returns {Boolean} Test result.\n         */\n        _paramNameMatchesAzureParameter: function(name) {\n            switch (name) {\n                case \"Cache-Control\":\n                case \"Content-Disposition\":\n                case \"Content-Encoding\":\n                case \"Content-MD5\":\n                case \"x-ms-blob-content-encoding\":\n                case \"x-ms-blob-content-disposition\":\n                case \"x-ms-blob-content-md5\":\n                case \"x-ms-blob-cache-control\":\n                    return true;\n                default:\n                    return false;\n            }\n        },\n\n        /** Create Prefixed request headers which are appropriate for Azure.\n         *\n         * If the request header is appropriate for Azure (e.g. Cache-Control) then it should be\n         * passed along without a metadata prefix. For all other request header parameter names,\n         * qq.azure.util.AZURE_PARAM_PREFIX should be prepended.\n         *\n         * @param name Name of the Request Header parameter to construct a (possibly) prefixed name.\n         * @returns {String} A valid Request Header parameter name.\n         */\n        _getPrefixedParamName: function(name) {\n            if (qq.azure.util._paramNameMatchesAzureParameter(name)) {\n                return name;\n            }\n            else {\n                return qq.azure.util.AZURE_PARAM_PREFIX + name;\n            }\n        },\n\n        getParamsAsHeaders: function(params) {\n            var headers = {};\n\n            qq.each(params, function(name, val) {\n                var headerName = qq.azure.util._getPrefixedParamName(name),\n                    value = null;\n\n                if (qq.isFunction(val)) {\n                    value = String(val());\n                }\n                else if (qq.isObject(val)) {\n                    qq.extend(headers, qq.azure.util.getParamsAsHeaders(val));\n                }\n                else {\n                    value = String(val);\n                }\n\n                if (value !== null) {\n                    if (qq.azure.util._paramNameMatchesAzureParameter(name)) {\n                        headers[headerName] = value;\n                    } else {\n                        headers[headerName] = encodeURIComponent(value);\n                    }\n                }\n            });\n\n            return headers;\n        },\n\n        parseAzureError: function(responseText, log) {\n            var domParser = new DOMParser(),\n                responseDoc = domParser.parseFromString(responseText, \"application/xml\"),\n                errorTag = responseDoc.getElementsByTagName(\"Error\")[0],\n                errorDetails = {},\n                codeTag, messageTag;\n\n            log(\"Received error response: \" + responseText, \"error\");\n\n            if (errorTag) {\n                messageTag = errorTag.getElementsByTagName(\"Message\")[0];\n                if (messageTag) {\n                    errorDetails.message = messageTag.textContent;\n                }\n\n                codeTag = errorTag.getElementsByTagName(\"Code\")[0];\n                if (codeTag) {\n                    errorDetails.code = codeTag.textContent;\n                }\n\n                log(\"Parsed Azure error: \" + JSON.stringify(errorDetails), \"error\");\n\n                return errorDetails;\n            }\n        }\n    };\n}());\n","/*globals qq*/\n/**\n * Defines the public API for non-traditional FineUploaderBasic mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.nonTraditionalBasePublicApi = {\n        setUploadSuccessParams: function(params, id) {\n            this._uploadSuccessParamsStore.set(params, id);\n        },\n        setUploadSuccessEndpoint: function(endpoint, id) {\n            this._uploadSuccessEndpointStore.set(endpoint, id);\n        }\n    };\n\n    qq.nonTraditionalBasePrivateApi = {\n        /**\n         * When the upload has completed, if it is successful, send a request to the `successEndpoint` (if defined).\n         * This will hold up the call to the `onComplete` callback until we have determined success of the upload\n         * according to the local server, if a `successEndpoint` has been defined by the integrator.\n         *\n         * @param id ID of the completed upload\n         * @param name Name of the associated item\n         * @param result Object created from the server's parsed JSON response.\n         * @param xhr Associated XmlHttpRequest, if this was used to send the request.\n         * @returns {boolean || qq.Promise} true/false if success can be determined immediately, otherwise a `qq.Promise`\n         * if we need to ask the server.\n         * @private\n         */\n        _onComplete: function(id, name, result, xhr) {\n            var success = result.success ? true : false,\n                self = this,\n                onCompleteArgs = arguments,\n                successEndpoint = this._uploadSuccessEndpointStore.get(id),\n                successCustomHeaders = this._options.uploadSuccess.customHeaders,\n                successMethod = this._options.uploadSuccess.method,\n                cors = this._options.cors,\n                promise = new qq.Promise(),\n                uploadSuccessParams = this._uploadSuccessParamsStore.get(id),\n                fileParams = this._paramsStore.get(id),\n\n                // If we are waiting for confirmation from the local server, and have received it,\n                // include properties from the local server response in the `response` parameter\n                // sent to the `onComplete` callback, delegate to the parent `_onComplete`, and\n                // fulfill the associated promise.\n                onSuccessFromServer = function(successRequestResult) {\n                    delete self._failedSuccessRequestCallbacks[id];\n                    qq.extend(result, successRequestResult);\n                    qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                    promise.success(successRequestResult);\n                },\n\n                // If the upload success request fails, attempt to re-send the success request (via the core retry code).\n                // The entire upload may be restarted if the server returns a \"reset\" property with a value of true as well.\n                onFailureFromServer = function(successRequestResult) {\n                    var callback = submitSuccessRequest;\n\n                    qq.extend(result, successRequestResult);\n\n                    if (result && result.reset) {\n                        callback = null;\n                    }\n\n                    if (!callback) {\n                        delete self._failedSuccessRequestCallbacks[id];\n                    }\n                    else {\n                        self._failedSuccessRequestCallbacks[id] = callback;\n                    }\n\n                    if (!self._onAutoRetry(id, name, result, xhr, callback)) {\n                        qq.FineUploaderBasic.prototype._onComplete.apply(self, onCompleteArgs);\n                        promise.failure(successRequestResult);\n                    }\n                },\n                submitSuccessRequest,\n                successAjaxRequester;\n\n            // Ask the local server if the file sent is ok.\n            if (success && successEndpoint) {\n                successAjaxRequester = new qq.UploadSuccessAjaxRequester({\n                    endpoint: successEndpoint,\n                    method: successMethod,\n                    customHeaders: successCustomHeaders,\n                    cors: cors,\n                    log: qq.bind(this.log, this)\n                });\n\n                // combine custom params and default params\n                qq.extend(uploadSuccessParams, self._getEndpointSpecificParams(id, result, xhr), true);\n\n                // include any params associated with the file\n                fileParams && qq.extend(uploadSuccessParams, fileParams, true);\n\n                submitSuccessRequest = qq.bind(function() {\n                    successAjaxRequester.sendSuccessRequest(id, uploadSuccessParams)\n                        .then(onSuccessFromServer, onFailureFromServer);\n                }, self);\n\n                submitSuccessRequest();\n\n                return promise;\n            }\n\n            // If we are not asking the local server about the file, just delegate to the parent `_onComplete`.\n            return qq.FineUploaderBasic.prototype._onComplete.apply(this, arguments);\n        },\n\n        // If the failure occurred on an upload success request (and a reset was not ordered), try to resend that instead.\n        _manualRetry: function(id) {\n            var successRequestCallback = this._failedSuccessRequestCallbacks[id];\n\n            return qq.FineUploaderBasic.prototype._manualRetry.call(this, id, successRequestCallback);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploaderBasic mode w/ support for uploading to Azure, which provides all the basic\n * functionality of Fine Uploader Basic as well as code to handle uploads directly to Azure.\n * Some inherited options and API methods have a special meaning in the context of the Azure uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.azure.FineUploaderBasic = function(o) {\n        if (!qq.supportedFeatures.ajaxUploading) {\n            throw new qq.Error(\"Uploading directly to Azure is not possible in this browser.\");\n        }\n\n        var options = {\n            signature: {\n                endpoint: null,\n\n                customHeaders: {}\n            },\n\n            // 'uuid', 'filename', or a function which may be promissory\n            blobProperties: {\n                name: \"uuid\"\n            },\n\n            uploadSuccess: {\n                endpoint: null,\n\n                method: \"POST\",\n\n                // In addition to the default params sent by Fine Uploader\n                params: {},\n\n                customHeaders: {}\n            },\n\n            chunking: {\n                // If this is increased, Azure may respond with a 413\n                partSize: 4000000,\n                // Don't chunk files less than this size\n                minFileSize: 4000001\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Call base module\n        qq.FineUploaderBasic.call(this, options);\n\n        this._uploadSuccessParamsStore = this._createStore(this._options.uploadSuccess.params);\n        this._uploadSuccessEndpointStore = this._createStore(this._options.uploadSuccess.endpoint);\n\n        // This will hold callbacks for failed uploadSuccess requests that will be invoked on retry.\n        // Indexed by file ID.\n        this._failedSuccessRequestCallbacks = {};\n\n        // Holds blob names for file representations constructed from a session request.\n        this._cannedBlobNames = {};\n    };\n\n    // Inherit basic public & private API methods.\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.basePublicApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.basePrivateApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.nonTraditionalBasePublicApi);\n    qq.extend(qq.azure.FineUploaderBasic.prototype, qq.nonTraditionalBasePrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.azure.FineUploaderBasic.prototype, {\n        getBlobName: function(id) {\n            /* jshint eqnull:true */\n            if (this._cannedBlobNames[id] == null) {\n                return this._handler.getThirdPartyFileId(id);\n            }\n            return this._cannedBlobNames[id];\n        },\n\n        _getEndpointSpecificParams: function(id) {\n            return {\n                blob: this.getBlobName(id),\n                uuid: this.getUuid(id),\n                name: this.getName(id),\n                container: this._endpointStore.get(id)\n            };\n        },\n\n        _createUploadHandler: function() {\n            return qq.FineUploaderBasic.prototype._createUploadHandler.call(this,\n                {\n                    signature: this._options.signature,\n                    onGetBlobName: qq.bind(this._determineBlobName, this),\n                    deleteBlob: qq.bind(this._deleteBlob, this, true)\n                },\n                \"azure\");\n        },\n\n        _determineBlobName: function(id) {\n            var self = this,\n                blobNameOptionValue = this._options.blobProperties.name,\n                uuid = this.getUuid(id),\n                filename = this.getName(id),\n                fileExtension = qq.getExtension(filename),\n                blobNameToUse = uuid;\n\n            if (qq.isString(blobNameOptionValue)) {\n                switch (blobNameOptionValue) {\n                    case \"uuid\":\n                        if (fileExtension !== undefined) {\n                            blobNameToUse += \".\" + fileExtension;\n                        }\n                        return new qq.Promise().success(blobNameToUse);\n                    case \"filename\":\n                        return new qq.Promise().success(filename);\n                    default:\n                        return new qq.Promise.failure(\"Invalid blobName option value - \" + blobNameOptionValue);\n                }\n            }\n            else {\n                return blobNameOptionValue.call(this, id);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id;\n\n            /* jshint eqnull:true */\n            if (sessionData.blobName == null) {\n                throw new qq.Error(\"Did not find blob name property in server session response.  This is required!\");\n            }\n            else {\n                id = qq.FineUploaderBasic.prototype._addCannedFile.apply(this, arguments);\n                this._cannedBlobNames[id] = sessionData.blobName;\n            }\n\n            return id;\n        },\n\n        _deleteBlob: function(relatedToCancel, id) {\n            var self = this,\n                deleteBlobSasUri = {},\n                blobUriStore = {\n                    get: function(id) {\n                        return self._endpointStore.get(id) + \"/\" + self.getBlobName(id);\n                    }\n                },\n                deleteFileEndpointStore = {\n                    get: function(id) {\n                        return deleteBlobSasUri[id];\n                    }\n                },\n                getSasSuccess = function(id, sasUri) {\n                    deleteBlobSasUri[id] = sasUri;\n                    deleteBlob.send(id);\n                },\n                getSasFailure = function(id, reason, xhr) {\n                    if (relatedToCancel) {\n                        self.log(\"Will cancel upload, but cannot remove uncommitted parts from Azure due to issue retrieving SAS\", \"error\");\n                        qq.FineUploaderBasic.prototype._onCancel.call(self, id, self.getName(id));\n                    }\n                    else {\n                        self._onDeleteComplete(id, xhr, true);\n                        self._options.callbacks.onDeleteComplete(id, xhr, true);\n                    }\n                },\n                deleteBlob = new qq.azure.DeleteBlob({\n                    endpointStore: deleteFileEndpointStore,\n                    log: qq.bind(self.log, self),\n                    onDelete: function(id) {\n                        self._onDelete(id);\n                        self._options.callbacks.onDelete(id);\n                    },\n                    onDeleteComplete: function(id, xhrOrXdr, isError) {\n                        delete deleteBlobSasUri[id];\n\n                        if (isError) {\n                            if (relatedToCancel) {\n                                self.log(\"Will cancel upload, but failed to remove uncommitted parts from Azure.\", \"error\");\n                            }\n                            else {\n                                qq.azure.util.parseAzureError(xhrOrXdr.responseText, qq.bind(self.log, self));\n                            }\n                        }\n\n                        if (relatedToCancel) {\n                            qq.FineUploaderBasic.prototype._onCancel.call(self, id, self.getName(id));\n                            self.log(\"Deleted uncommitted blob chunks for \" + id);\n                        }\n                        else {\n                            self._onDeleteComplete(id, xhrOrXdr, isError);\n                            self._options.callbacks.onDeleteComplete(id, xhrOrXdr, isError);\n                        }\n                    }\n                }),\n                getSas = new qq.azure.GetSas({\n                    cors: this._options.cors,\n                    customHeaders: this._options.signature.customHeaders,\n                    endpointStore: {\n                        get: function() {\n                            return self._options.signature.endpoint;\n                        }\n                    },\n                    restRequestVerb: deleteBlob.method,\n                    log: qq.bind(self.log, self)\n                });\n\n            getSas.request(id, blobUriStore.get(id)).then(\n                qq.bind(getSasSuccess, self, id),\n                qq.bind(getSasFailure, self, id));\n        },\n\n        _createDeleteHandler: function() {\n            var self = this;\n\n            return {\n                sendDelete: function(id, uuid) {\n                    self._deleteBlob(false, id);\n                }\n            };\n        }\n    });\n}());\n","/*globals qq */\n/**\n * Upload handler used by the upload to Azure module that depends on File API support, and, therefore, makes use of\n * `XMLHttpRequest` level 2 to upload `File`s and `Blob`s directly to Azure Blob Storage containers via the\n * associated Azure API.\n *\n * @param spec Options passed from the base handler\n * @param proxy Callbacks & methods used to query for or push out data/changes\n */\n// TODO l18n for error messages returned to UI\nqq.azure.XhrUploadHandler = function(spec, proxy) {\n    \"use strict\";\n\n    var handler = this,\n        log = proxy.log,\n        cors = spec.cors,\n        endpointStore = spec.endpointStore,\n        paramsStore = spec.paramsStore,\n        signature = spec.signature,\n        filenameParam = spec.filenameParam,\n        minFileSizeForChunking = spec.chunking.minFileSize,\n        deleteBlob = spec.deleteBlob,\n        onGetBlobName = spec.onGetBlobName,\n        getName = proxy.getName,\n        getSize = proxy.getSize,\n\n        getBlobMetadata = function(id) {\n            var params = paramsStore.get(id);\n            params[filenameParam] = getName(id);\n            return params;\n        },\n\n        api = {\n            putBlob: new qq.azure.PutBlob({\n                getBlobMetadata: getBlobMetadata,\n                log: log\n            }),\n\n            putBlock: new qq.azure.PutBlock({\n                log: log\n            }),\n\n            putBlockList: new qq.azure.PutBlockList({\n                getBlobMetadata: getBlobMetadata,\n                log: log\n            }),\n\n            getSasForPutBlobOrBlock: new qq.azure.GetSas({\n                cors: cors,\n                customHeaders: signature.customHeaders,\n                endpointStore: {\n                    get: function() {\n                        return signature.endpoint;\n                    }\n                },\n                log: log,\n                restRequestVerb: \"PUT\"\n            })\n        };\n\n    function combineChunks(id) {\n        var promise = new qq.Promise();\n\n        getSignedUrl(id).then(function(sasUri) {\n            var mimeType = handler._getMimeType(id),\n                blockIdEntries = handler._getPersistableData(id).blockIdEntries;\n\n            api.putBlockList.send(id, sasUri, blockIdEntries, mimeType, function(xhr) {\n                handler._registerXhr(id, null, xhr, api.putBlockList);\n            })\n                .then(function(xhr) {\n                    log(\"Success combining chunks for id \" + id);\n                    promise.success({}, xhr);\n                }, function(xhr) {\n                    log(\"Attempt to combine chunks failed for id \" + id, \"error\");\n                    handleFailure(xhr, promise);\n                });\n\n        },\n        promise.failure);\n\n        return promise;\n    }\n\n    function determineBlobUrl(id) {\n        var containerUrl = endpointStore.get(id),\n            promise = new qq.Promise(),\n            getBlobNameSuccess = function(blobName) {\n                handler._setThirdPartyFileId(id, blobName);\n                promise.success(containerUrl + \"/\" + blobName);\n            },\n            getBlobNameFailure = function(reason) {\n                promise.failure(reason);\n            };\n\n        onGetBlobName(id).then(getBlobNameSuccess, getBlobNameFailure);\n\n        return promise;\n    }\n\n    function getSignedUrl(id, optChunkIdx) {\n        // We may have multiple SAS requests in progress for the same file, so we must include the chunk idx\n        // as part of the ID when communicating with the SAS ajax requester to avoid collisions.\n        var getSasId = optChunkIdx == null ? id : id + \".\" + optChunkIdx,\n\n            promise = new qq.Promise(),\n            getSasSuccess = function(sasUri) {\n                log(\"GET SAS request succeeded.\");\n                promise.success(sasUri);\n            },\n            getSasFailure = function(reason, getSasXhr) {\n                log(\"GET SAS request failed: \" + reason, \"error\");\n                promise.failure({error: \"Problem communicating with local server\"}, getSasXhr);\n            },\n            determineBlobUrlSuccess = function(blobUrl) {\n                api.getSasForPutBlobOrBlock.request(getSasId, blobUrl).then(\n                    getSasSuccess,\n                    getSasFailure\n                );\n            },\n            determineBlobUrlFailure = function(reason) {\n                log(qq.format(\"Failed to determine blob name for ID {} - {}\", id, reason), \"error\");\n                promise.failure({error: reason});\n            };\n\n        determineBlobUrl(id).then(determineBlobUrlSuccess, determineBlobUrlFailure);\n\n        return promise;\n    }\n\n    function handleFailure(xhr, promise) {\n        var azureError = qq.azure.util.parseAzureError(xhr.responseText, log),\n            errorMsg = \"Problem sending file to Azure\";\n\n        promise.failure({error: errorMsg,\n            azureError: azureError && azureError.message,\n            reset: xhr.status === 403\n        });\n    }\n\n    qq.extend(this, {\n        uploadChunk: function(params) {\n            var chunkIdx = params.chunkIdx;\n            var id = params.id;\n\n            var promise = new qq.Promise();\n\n            getSignedUrl(id, chunkIdx).then(\n                function(sasUri) {\n                    var xhr = handler._createXhr(id, chunkIdx),\n                    chunkData = handler._getChunkData(id, chunkIdx);\n\n                    handler._registerProgressHandler(id, chunkIdx, chunkData.size);\n                    handler._registerXhr(id, chunkIdx, xhr, api.putBlock);\n\n                    // We may have multiple put block requests in progress for the same file, so we must include the chunk idx\n                    // as part of the ID when communicating with the put block ajax requester to avoid collisions.\n                    api.putBlock.upload(id + \".\" + chunkIdx, xhr, sasUri, chunkIdx, chunkData.blob).then(\n                        function(blockIdEntry) {\n                            if (!handler._getPersistableData(id).blockIdEntries) {\n                                handler._getPersistableData(id).blockIdEntries = [];\n                            }\n\n                            handler._getPersistableData(id).blockIdEntries.push(blockIdEntry);\n                            log(\"Put Block call succeeded for \" + id);\n                            promise.success({}, xhr);\n                        },\n                        function() {\n                            log(qq.format(\"Put Block call failed for ID {} on part {}\", id, chunkIdx), \"error\");\n                            handleFailure(xhr, promise);\n                        }\n                    );\n                },\n                promise.failure\n            );\n\n            return promise;\n        },\n\n        uploadFile: function(id) {\n            var promise = new qq.Promise(),\n                fileOrBlob = handler.getFile(id);\n\n            getSignedUrl(id).then(function(sasUri) {\n                var xhr = handler._createXhr(id);\n\n                handler._registerProgressHandler(id);\n\n                api.putBlob.upload(id, xhr, sasUri, fileOrBlob).then(\n                    function() {\n                        log(\"Put Blob call succeeded for \" + id);\n                        promise.success({}, xhr);\n                    },\n                    function() {\n                        log(\"Put Blob call failed for \" + id, \"error\");\n                        handleFailure(xhr, promise);\n                    }\n                );\n            },\n            promise.failure);\n\n            return promise;\n        }\n    });\n\n    qq.extend(this,\n        new qq.XhrUploadHandler({\n            options: qq.extend({namespace: \"azure\"}, spec),\n            proxy: qq.extend({getEndpoint: spec.endpointStore.get}, proxy)\n        }\n    ));\n\n    qq.override(this, function(super_) {\n        return {\n            expunge: function(id) {\n                var relatedToCancel = handler._wasCanceled(id),\n                    chunkingData = handler._getPersistableData(id),\n                    blockIdEntries = (chunkingData && chunkingData.blockIdEntries) || [];\n\n                if (relatedToCancel && blockIdEntries.length > 0) {\n                    deleteBlob(id);\n                }\n\n                super_.expunge(id);\n            },\n\n            finalizeChunks: function(id) {\n                return combineChunks(id);\n            },\n\n            _shouldChunkThisFile: function(id) {\n                var maybePossible = super_._shouldChunkThisFile(id);\n                return maybePossible && getSize(id) >= minFileSizeForChunking;\n            }\n        };\n    });\n};\n","/* globals qq */\n/**\n * Sends a GET request to the integrator's server, which should return a Shared Access Signature URI used to\n * make a specific request on a Blob via the Azure REST API.\n */\nqq.azure.GetSas = function(o) {\n    \"use strict\";\n\n    var requester,\n        options = {\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            customHeaders: {},\n            restRequestVerb: \"PUT\",\n            endpointStore: null,\n            log: function(str, level) {}\n        },\n        requestPromises = {};\n\n    qq.extend(options, o);\n\n    function sasResponseReceived(id, xhr, isError) {\n        var promise = requestPromises[id];\n\n        if (isError) {\n            promise.failure(\"Received response code \" + xhr.status, xhr);\n        }\n        else {\n            if (xhr.responseText.length) {\n                promise.success(xhr.responseText);\n            }\n            else {\n                promise.failure(\"Empty response.\", xhr);\n            }\n        }\n\n        delete requestPromises[id];\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        validMethods: [\"GET\"],\n        method: \"GET\",\n        successfulResponseCodes: {\n            GET: [200]\n        },\n        contentType: null,\n        customHeaders: options.customHeaders,\n        endpointStore: options.endpointStore,\n        cors: options.cors,\n        log: options.log,\n        onComplete: sasResponseReceived\n    }));\n\n    qq.extend(this, {\n        request: function(id, blobUri) {\n            var requestPromise = new qq.Promise(),\n                restVerb = options.restRequestVerb;\n\n            options.log(qq.format(\"Submitting GET SAS request for a {} REST request related to file ID {}.\", restVerb, id));\n\n            requestPromises[id] = requestPromise;\n\n            requester.initTransport(id)\n                .withParams({\n                    bloburi: blobUri,\n                    _method: restVerb\n                })\n                .withCacheBuster()\n                .send();\n\n            return requestPromise;\n        }\n    });\n};\n","/*globals qq, XMLHttpRequest*/\n/**\n * Sends a POST request to the server to notify it of a successful upload to an endpoint.  The server is expected to indicate success\n * or failure via the response status.  Specific information about the failure can be passed from the server via an `error`\n * property (by default) in an \"application/json\" response.\n *\n * @param o Options associated with all requests.\n * @constructor\n */\nqq.UploadSuccessAjaxRequester = function(o) {\n    \"use strict\";\n\n    var requester,\n        pendingRequests = [],\n        options = {\n            method: \"POST\",\n            endpoint: null,\n            maxConnections: 3,\n            customHeaders: {},\n            paramsStore: {},\n            cors: {\n                expected: false,\n                sendCredentials: false\n            },\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    function handleSuccessResponse(id, xhrOrXdr, isError) {\n        var promise = pendingRequests[id],\n            responseJson = xhrOrXdr.responseText,\n            successIndicator = {success: true},\n            failureIndicator = {success: false},\n            parsedResponse;\n\n        delete pendingRequests[id];\n\n        options.log(qq.format(\"Received the following response body to an upload success request for id {}: {}\", id, responseJson));\n\n        try {\n            parsedResponse = qq.parseJson(responseJson);\n\n            // If this is a cross-origin request, the server may return a 200 response w/ error or success properties\n            // in order to ensure any specific error message is picked up by Fine Uploader for all browsers,\n            // since XDomainRequest (used in IE9 and IE8) doesn't give you access to the\n            // response body for an \"error\" response.\n            if (isError || (parsedResponse && (parsedResponse.error || parsedResponse.success === false))) {\n                options.log(\"Upload success request was rejected by the server.\", \"error\");\n                promise.failure(qq.extend(parsedResponse, failureIndicator));\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(qq.extend(parsedResponse, successIndicator));\n            }\n        }\n        catch (error) {\n            // This will be executed if a JSON response is not present.  This is not mandatory, so account for this properly.\n            if (isError) {\n                options.log(qq.format(\"Your server indicated failure in its upload success request response for id {}!\", id), \"error\");\n                promise.failure(failureIndicator);\n            }\n            else {\n                options.log(\"Upload success was acknowledged by the server.\");\n                promise.success(successIndicator);\n            }\n        }\n    }\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        acceptHeader: \"application/json\",\n        method: options.method,\n        endpointStore: {\n            get: function() {\n                return options.endpoint;\n            }\n        },\n        paramsStore: options.paramsStore,\n        maxConnections: options.maxConnections,\n        customHeaders: options.customHeaders,\n        log: options.log,\n        onComplete: handleSuccessResponse,\n        cors: options.cors\n    }));\n\n    qq.extend(this, {\n        /**\n         * Sends a request to the server, notifying it that a recently submitted file was successfully sent.\n         *\n         * @param id ID of the associated file\n         * @param spec `Object` with the properties that correspond to important values that we want to\n         * send to the server with this request.\n         * @returns {qq.Promise} A promise to be fulfilled when the response has been received and parsed.  The parsed\n         * payload of the response will be passed into the `failure` or `success` promise method.\n         */\n        sendSuccessRequest: function(id, spec) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting upload success request/notification for \" + id);\n\n            requester.initTransport(id)\n                .withParams(spec)\n                .send();\n\n            pendingRequests[id] = promise;\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Delete Blob Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179413.aspx.\n */\nqq.azure.DeleteBlob = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"DELETE\",\n        options = {\n            endpointStore: {},\n            onDelete: function(id) {},\n            onDeleteComplete: function(id, xhr, isError) {},\n            log: function(str, level) {}\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [202];\n            return codes;\n        }()),\n        contentType: null,\n        endpointStore: options.endpointStore,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onSend: options.onDelete,\n        onComplete: options.onDeleteComplete\n    }));\n\n    qq.extend(this, {\n        method: method,\n        send: function(id) {\n            options.log(\"Submitting Delete Blob request for \" + id);\n\n            return requester.initTransport(id)\n                .send();\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Blob Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179451.aspx.\n */\nqq.azure.PutBlob = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        options = {\n            getBlobMetadata: function(id) {},\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        promises = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        contentType: null,\n        customHeaders: function(id) {\n            var params = options.getBlobMetadata(id),\n                headers = qq.azure.util.getParamsAsHeaders(params);\n\n            headers[\"x-ms-blob-type\"] = \"BlockBlob\";\n\n            return headers;\n        },\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete endpoints[id];\n            delete promises[id];\n\n            if (isError) {\n                promise.failure();\n            }\n            else {\n                promise.success();\n            }\n        }\n    }));\n\n    qq.extend(this, {\n        method: method,\n        upload: function(id, xhr, url, file) {\n            var promise = new qq.Promise();\n\n            options.log(\"Submitting Put Blob request for \" + id);\n\n            promises[id] = promise;\n            endpoints[id] = url;\n\n            requester.initTransport(id)\n                .withPayload(file)\n                .withHeaders({\"Content-Type\": file.type})\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Block Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd135726.aspx.\n */\nqq.azure.PutBlock = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        blockIdEntries = {},\n        promises = {},\n        options = {\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        contentType: null,\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id],\n                blockIdEntry = blockIdEntries[id];\n\n            delete endpoints[id];\n            delete promises[id];\n            delete blockIdEntries[id];\n\n            if (isError) {\n                promise.failure();\n            }\n            else {\n                promise.success(blockIdEntry);\n            }\n        }\n    }));\n\n    function createBlockId(partNum) {\n        var digits = 5,\n            zeros = new Array(digits + 1).join(\"0\"),\n            paddedPartNum = (zeros + partNum).slice(-digits);\n\n        return btoa(paddedPartNum);\n    }\n\n    qq.extend(this, {\n        method: method,\n        upload: function(id, xhr, sasUri, partNum, blob) {\n            var promise = new qq.Promise(),\n                blockId = createBlockId(partNum);\n\n            promises[id] = promise;\n\n            options.log(qq.format(\"Submitting Put Block request for {} = part {}\", id, partNum));\n\n            endpoints[id] = qq.format(\"{}&comp=block&blockid={}\", sasUri, encodeURIComponent(blockId));\n            blockIdEntries[id] = {part: partNum, id: blockId};\n\n            requester.initTransport(id)\n                .withPayload(blob)\n                .send(xhr);\n\n            return promise;\n        }\n    });\n};\n","/* globals qq */\n/**\n * Implements the Put Block List Azure REST API call.  http://msdn.microsoft.com/en-us/library/windowsazure/dd179467.aspx.\n */\nqq.azure.PutBlockList = function(o) {\n    \"use strict\";\n\n    var requester,\n        method = \"PUT\",\n        promises = {},\n        options = {\n            getBlobMetadata: function(id) {},\n            log: function(str, level) {}\n        },\n        endpoints = {},\n        endpointHandler = {\n            get: function(id) {\n                return endpoints[id];\n            }\n        };\n\n    qq.extend(options, o);\n\n    requester = qq.extend(this, new qq.AjaxRequester({\n        validMethods: [method],\n        method: method,\n        successfulResponseCodes: (function() {\n            var codes = {};\n            codes[method] = [201];\n            return codes;\n        }()),\n        customHeaders: function(id) {\n            var params = options.getBlobMetadata(id);\n\n            return qq.azure.util.getParamsAsHeaders(params);\n        },\n        contentType: \"text/plain\",\n        endpointStore: endpointHandler,\n        allowXRequestedWithAndCacheControl: false,\n        cors: {\n            expected: true\n        },\n        log: options.log,\n        onSend: function() {},\n        onComplete: function(id, xhr, isError) {\n            var promise = promises[id];\n\n            delete endpoints[id];\n            delete promises[id];\n\n            if (isError) {\n                promise.failure(xhr);\n            }\n            else {\n                promise.success(xhr);\n            }\n\n        }\n    }));\n\n    function createRequestBody(blockIdEntries) {\n        var doc = document.implementation.createDocument(null, \"BlockList\", null);\n\n        // If we don't sort the block ID entries by part number, the file will be combined incorrectly by Azure\n        blockIdEntries.sort(function(a, b) {\n            return a.part - b.part;\n        });\n\n        // Construct an XML document for each pair of etag/part values that correspond to part uploads.\n        qq.each(blockIdEntries, function(idx, blockIdEntry) {\n            var latestEl = doc.createElement(\"Latest\"),\n                latestTextEl = doc.createTextNode(blockIdEntry.id);\n\n            latestEl.appendChild(latestTextEl);\n            qq(doc).children()[0].appendChild(latestEl);\n        });\n\n        // Turn the resulting XML document into a string fit for transport.\n        return new XMLSerializer().serializeToString(doc);\n    }\n\n    qq.extend(this, {\n        method: method,\n        send: function(id, sasUri, blockIdEntries, fileMimeType, registerXhrCallback) {\n            var promise = new qq.Promise(),\n                blockIdsXml = createRequestBody(blockIdEntries),\n                xhr;\n\n            promises[id] = promise;\n\n            options.log(qq.format(\"Submitting Put Block List request for {}\", id));\n\n            endpoints[id] = qq.format(\"{}&comp=blocklist\", sasUri);\n\n            xhr = requester.initTransport(id)\n                .withPayload(blockIdsXml)\n                .withHeaders({\"x-ms-blob-content-type\": fileMimeType})\n                .send();\n            registerXhrCallback(xhr);\n\n            return promise;\n        }\n    });\n};\n","/*globals qq, document, CustomEvent*/\nqq.DragAndDrop = function(o) {\n    \"use strict\";\n\n    var options,\n        HIDE_ZONES_EVENT_NAME = \"qq-hidezones\",\n        HIDE_BEFORE_ENTER_ATTR = \"qq-hide-dropzone\",\n        uploadDropZones = [],\n        droppedFiles = [],\n        disposeSupport = new qq.DisposeSupport();\n\n    options = {\n        dropZoneElements: [],\n        allowMultipleItems: true,\n        classes: {\n            dropActive: null\n        },\n        callbacks: new qq.DragAndDrop.callbacks()\n    };\n\n    qq.extend(options, o, true);\n\n    function uploadDroppedFiles(files, uploadDropZone) {\n        // We need to convert the `FileList` to an actual `Array` to avoid iteration issues\n        var filesAsArray = Array.prototype.slice.call(files);\n\n        options.callbacks.dropLog(\"Grabbed \" + files.length + \" dropped files.\");\n        uploadDropZone.dropDisabled(false);\n        options.callbacks.processingDroppedFilesComplete(filesAsArray, uploadDropZone.getElement());\n    }\n\n    function traverseFileTree(entry) {\n        var parseEntryPromise = new qq.Promise();\n\n        if (entry.isFile) {\n            entry.file(function(file) {\n                file.qqPath = extractDirectoryPath(entry);\n                droppedFiles.push(file);\n                parseEntryPromise.success();\n            },\n            function(fileError) {\n                options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                parseEntryPromise.failure();\n            });\n        }\n        else if (entry.isDirectory) {\n            getFilesInDirectory(entry).then(\n                function allEntriesRead(entries) {\n                    var entriesLeft = entries.length;\n\n                    qq.each(entries, function(idx, entry) {\n                        traverseFileTree(entry).done(function() {\n                            entriesLeft -= 1;\n\n                            if (entriesLeft === 0) {\n                                parseEntryPromise.success();\n                            }\n                        });\n                    });\n\n                    if (!entries.length) {\n                        parseEntryPromise.success();\n                    }\n                },\n\n                function readFailure(fileError) {\n                    options.callbacks.dropLog(\"Problem parsing '\" + entry.fullPath + \"'.  FileError code \" + fileError.code + \".\", \"error\");\n                    parseEntryPromise.failure();\n                }\n            );\n        }\n\n        return parseEntryPromise;\n    }\n\n    function extractDirectoryPath(entry) {\n        var name = entry.name,\n            fullPath = entry.fullPath,\n            indexOfNameInFullPath = fullPath.lastIndexOf(name);\n\n        // remove file name from full path string\n        fullPath = fullPath.substr(0, indexOfNameInFullPath);\n\n        // remove leading slash in full path string\n        if (fullPath.charAt(0) === \"/\") {\n            fullPath = fullPath.substr(1);\n        }\n\n        return fullPath;\n    }\n\n    // Promissory.  Guaranteed to read all files in the root of the passed directory.\n    function getFilesInDirectory(entry, reader, accumEntries, existingPromise) {\n        var promise = existingPromise || new qq.Promise(),\n            dirReader = reader || entry.createReader();\n\n        dirReader.readEntries(\n            function readSuccess(entries) {\n                var newEntries = accumEntries ? accumEntries.concat(entries) : entries;\n\n                if (entries.length) {\n                    setTimeout(function() { // prevent stack overflow, however unlikely\n                        getFilesInDirectory(entry, dirReader, newEntries, promise);\n                    }, 0);\n                }\n                else {\n                    promise.success(newEntries);\n                }\n            },\n\n            promise.failure\n        );\n\n        return promise;\n    }\n\n    function handleDataTransfer(dataTransfer, uploadDropZone) {\n        var pendingFolderPromises = [],\n            handleDataTransferPromise = new qq.Promise();\n\n        options.callbacks.processingDroppedFiles();\n        uploadDropZone.dropDisabled(true);\n\n        if (dataTransfer.files.length > 1 && !options.allowMultipleItems) {\n            options.callbacks.processingDroppedFilesComplete([]);\n            options.callbacks.dropError(\"tooManyFilesError\", \"\");\n            uploadDropZone.dropDisabled(false);\n            handleDataTransferPromise.failure();\n        }\n        else {\n            droppedFiles = [];\n\n            if (qq.isFolderDropSupported(dataTransfer)) {\n                qq.each(dataTransfer.items, function(idx, item) {\n                    var entry = item.webkitGetAsEntry();\n\n                    if (entry) {\n                        //due to a bug in Chrome's File System API impl - #149735\n                        if (entry.isFile) {\n                            droppedFiles.push(item.getAsFile());\n                        }\n\n                        else {\n                            pendingFolderPromises.push(traverseFileTree(entry).done(function() {\n                                pendingFolderPromises.pop();\n                                if (pendingFolderPromises.length === 0) {\n                                    handleDataTransferPromise.success();\n                                }\n                            }));\n                        }\n                    }\n                });\n            }\n            else {\n                droppedFiles = dataTransfer.files;\n            }\n\n            if (pendingFolderPromises.length === 0) {\n                handleDataTransferPromise.success();\n            }\n        }\n\n        return handleDataTransferPromise;\n    }\n\n    function setupDropzone(dropArea) {\n        var dropZone = new qq.UploadDropZone({\n            HIDE_ZONES_EVENT_NAME: HIDE_ZONES_EVENT_NAME,\n            element: dropArea,\n            onEnter: function(e) {\n                qq(dropArea).addClass(options.classes.dropActive);\n                e.stopPropagation();\n            },\n            onLeaveNotDescendants: function(e) {\n                qq(dropArea).removeClass(options.classes.dropActive);\n            },\n            onDrop: function(e) {\n                handleDataTransfer(e.dataTransfer, dropZone).then(\n                    function() {\n                        uploadDroppedFiles(droppedFiles, dropZone);\n                    },\n                    function() {\n                        options.callbacks.dropLog(\"Drop event DataTransfer parsing failed.  No files will be uploaded.\", \"error\");\n                    }\n                );\n            }\n        });\n\n        disposeSupport.addDisposer(function() {\n            dropZone.dispose();\n        });\n\n        qq(dropArea).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropArea).hide();\n\n        uploadDropZones.push(dropZone);\n\n        return dropZone;\n    }\n\n    function isFileDrag(dragEvent) {\n        var fileDrag;\n\n        qq.each(dragEvent.dataTransfer.types, function(key, val) {\n            if (val === \"Files\") {\n                fileDrag = true;\n                return false;\n            }\n        });\n\n        return fileDrag;\n    }\n\n    // Attempt to determine when the file has left the document.  It is not always possible to detect this\n    // in all cases, but it is generally possible in all browsers, with a few exceptions.\n    //\n    // Exceptions:\n    // * IE10+ & Safari: We can't detect a file leaving the document if the Explorer window housing the file\n    //                   overlays the browser window.\n    // * IE10+: If the file is dragged out of the window too quickly, IE does not set the expected values of the\n    //          event's X & Y properties.\n    function leavingDocumentOut(e) {\n        if (qq.safari()) {\n            return e.x < 0 || e.y < 0;\n        }\n\n        return e.x === 0 && e.y === 0;\n    }\n\n    function setupDragDrop() {\n        var dropZones = options.dropZoneElements,\n\n            maybeHideDropZones = function() {\n                setTimeout(function() {\n                    qq.each(dropZones, function(idx, dropZone) {\n                        qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR) && qq(dropZone).hide();\n                        qq(dropZone).removeClass(options.classes.dropActive);\n                    });\n                }, 10);\n            };\n\n        qq.each(dropZones, function(idx, dropZone) {\n            var uploadDropZone = setupDropzone(dropZone);\n\n            // IE <= 9 does not support the File API used for drag+drop uploads\n            if (dropZones.length && qq.supportedFeatures.fileDrop) {\n                disposeSupport.attach(document, \"dragenter\", function(e) {\n                    if (!uploadDropZone.dropDisabled() && isFileDrag(e)) {\n                        qq.each(dropZones, function(idx, dropZone) {\n                            // We can't apply styles to non-HTMLElements, since they lack the `style` property.\n                            // Also, if the drop zone isn't initially hidden, let's not mess with `style.display`.\n                            if (dropZone instanceof HTMLElement &&\n                                qq(dropZone).hasAttribute(HIDE_BEFORE_ENTER_ATTR)) {\n\n                                qq(dropZone).css({display: \"block\"});\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        disposeSupport.attach(document, \"dragleave\", function(e) {\n            if (leavingDocumentOut(e)) {\n                maybeHideDropZones();\n            }\n        });\n\n        // Just in case we were not able to detect when a dragged file has left the document,\n        // hide all relevant drop zones the next time the mouse enters the document.\n        // Note that mouse events such as this one are not fired during drag operations.\n        disposeSupport.attach(qq(document).children()[0], \"mouseenter\", function(e) {\n            maybeHideDropZones();\n        });\n\n        disposeSupport.attach(document, \"drop\", function(e) {\n            if (isFileDrag(e)) {\n                e.preventDefault();\n                maybeHideDropZones();\n            }\n        });\n\n        disposeSupport.attach(document, HIDE_ZONES_EVENT_NAME, maybeHideDropZones);\n    }\n\n    setupDragDrop();\n\n    qq.extend(this, {\n        setupExtraDropzone: function(element) {\n            options.dropZoneElements.push(element);\n            setupDropzone(element);\n        },\n\n        removeDropzone: function(element) {\n            var i,\n                dzs = options.dropZoneElements;\n\n            for (i in dzs) {\n                if (dzs[i] === element) {\n                    return dzs.splice(i, 1);\n                }\n            }\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n            qq.each(uploadDropZones, function(idx, dropZone) {\n                dropZone.dispose();\n            });\n        }\n    });\n\n    this._testing = {};\n    this._testing.extractDirectoryPath = extractDirectoryPath;\n};\n\nqq.DragAndDrop.callbacks = function() {\n    \"use strict\";\n\n    return {\n        processingDroppedFiles: function() {},\n        processingDroppedFilesComplete: function(files, targetEl) {},\n        dropError: function(code, errorSpecifics) {\n            qq.log(\"Drag & drop error code '\" + code + \" with these specifics: '\" + errorSpecifics + \"'\", \"error\");\n        },\n        dropLog: function(message, level) {\n            qq.log(message, level);\n        }\n    };\n};\n\nqq.UploadDropZone = function(o) {\n    \"use strict\";\n\n    var disposeSupport = new qq.DisposeSupport(),\n        options, element, preventDrop, dropOutsideDisabled;\n\n    options = {\n        element: null,\n        onEnter: function(e) {},\n        onLeave: function(e) {},\n        // is not fired when leaving element by hovering descendants\n        onLeaveNotDescendants: function(e) {},\n        onDrop: function(e) {}\n    };\n\n    qq.extend(options, o);\n    element = options.element;\n\n    function dragoverShouldBeCanceled() {\n        return qq.safari() || (qq.firefox() && qq.windows());\n    }\n\n    function disableDropOutside(e) {\n        // run only once for all instances\n        if (!dropOutsideDisabled) {\n\n            // for these cases we need to catch onDrop to reset dropArea\n            if (dragoverShouldBeCanceled) {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    e.preventDefault();\n                });\n            } else {\n                disposeSupport.attach(document, \"dragover\", function(e) {\n                    if (e.dataTransfer) {\n                        e.dataTransfer.dropEffect = \"none\";\n                        e.preventDefault();\n                    }\n                });\n            }\n\n            dropOutsideDisabled = true;\n        }\n    }\n\n    function isValidFileDrag(e) {\n        // e.dataTransfer currently causing IE errors\n        // IE9 does NOT support file API, so drag-and-drop is not possible\n        if (!qq.supportedFeatures.fileDrop) {\n            return false;\n        }\n\n        var effectTest, dt = e.dataTransfer,\n        // do not check dt.types.contains in webkit, because it crashes safari 4\n        isSafari = qq.safari();\n\n        // dt.effectAllowed is none in Safari 5\n\n        // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n        // the filesystem\n        effectTest = qq.ie() && qq.supportedFeatures.fileDrop ? true : dt.effectAllowed !== \"none\";\n        return dt && effectTest &&\n                (\n                    (dt.files && dt.files.length) ||                                     // Valid for drop events with files\n                    (!isSafari && dt.types.contains && dt.types.contains(\"Files\")) ||  // Valid in Chrome/Firefox\n                    (dt.types.includes && dt.types.includes(\"Files\"))               // Valid in IE\n                );\n    }\n\n    function isOrSetDropDisabled(isDisabled) {\n        if (isDisabled !== undefined) {\n            preventDrop = isDisabled;\n        }\n        return preventDrop;\n    }\n\n    function triggerHidezonesEvent() {\n        var hideZonesEvent;\n\n        function triggerUsingOldApi() {\n            hideZonesEvent = document.createEvent(\"Event\");\n            hideZonesEvent.initEvent(options.HIDE_ZONES_EVENT_NAME, true, true);\n        }\n\n        if (window.CustomEvent) {\n            try {\n                hideZonesEvent = new CustomEvent(options.HIDE_ZONES_EVENT_NAME);\n            }\n            catch (err) {\n                triggerUsingOldApi();\n            }\n        }\n        else {\n            triggerUsingOldApi();\n        }\n\n        document.dispatchEvent(hideZonesEvent);\n    }\n\n    function attachEvents() {\n        disposeSupport.attach(element, \"dragover\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            // dt.effectAllowed crashes IE 11 & 10 when files have been dragged from\n            // the filesystem\n            var effect = qq.ie() && qq.supportedFeatures.fileDrop ? null : e.dataTransfer.effectAllowed;\n            if (effect === \"move\" || effect === \"linkMove\") {\n                e.dataTransfer.dropEffect = \"move\"; // for FF (only move allowed)\n            } else {\n                e.dataTransfer.dropEffect = \"copy\"; // for Chrome\n            }\n\n            e.stopPropagation();\n            e.preventDefault();\n        });\n\n        disposeSupport.attach(element, \"dragenter\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n                options.onEnter(e);\n            }\n        });\n\n        disposeSupport.attach(element, \"dragleave\", function(e) {\n            if (!isValidFileDrag(e)) {\n                return;\n            }\n\n            options.onLeave(e);\n\n            var relatedTarget = document.elementFromPoint(e.clientX, e.clientY);\n            // do not fire when moving a mouse over a descendant\n            if (qq(this).contains(relatedTarget)) {\n                return;\n            }\n\n            options.onLeaveNotDescendants(e);\n        });\n\n        disposeSupport.attach(element, \"drop\", function(e) {\n            if (!isOrSetDropDisabled()) {\n                if (!isValidFileDrag(e)) {\n                    return;\n                }\n\n                e.preventDefault();\n                e.stopPropagation();\n                options.onDrop(e);\n\n                triggerHidezonesEvent();\n            }\n        });\n    }\n\n    disableDropOutside();\n    attachEvents();\n\n    qq.extend(this, {\n        dropDisabled: function(isDisabled) {\n            return isOrSetDropDisabled(isDisabled);\n        },\n\n        dispose: function() {\n            disposeSupport.dispose();\n        },\n\n        getElement: function() {\n            return element;\n        }\n    });\n\n    this._testing = {};\n    this._testing.isValidFileDrag = isValidFileDrag;\n};\n","/*globals qq */\n/**\n * Defines the public API for FineUploader mode.\n */\n(function() {\n    \"use strict\";\n\n    qq.uiPublicApi = {\n        addInitialFiles: function(cannedFileList) {\n            this._parent.prototype.addInitialFiles.apply(this, arguments);\n            this._templating.addCacheToDom();\n        },\n\n        clearStoredFiles: function() {\n            this._parent.prototype.clearStoredFiles.apply(this, arguments);\n            this._templating.clearFiles();\n        },\n\n        addExtraDropzone: function(element) {\n            this._dnd && this._dnd.setupExtraDropzone(element);\n        },\n\n        removeExtraDropzone: function(element) {\n            if (this._dnd) {\n                return this._dnd.removeDropzone(element);\n            }\n        },\n\n        getItemByFileId: function(id) {\n            if (!this._templating.isHiddenForever(id)) {\n                return this._templating.getFileContainer(id);\n            }\n        },\n\n        reset: function() {\n            this._parent.prototype.reset.apply(this, arguments);\n            this._templating.reset();\n\n            if (!this._options.button && this._templating.getButton()) {\n                this._defaultButtonId = this._createUploadButton({\n                    element: this._templating.getButton(),\n                    title: this._options.text.fileInputTitle\n                }).getButtonId();\n            }\n\n            if (this._dnd) {\n                this._dnd.dispose();\n                this._dnd = this._setupDragAndDrop();\n            }\n\n            this._totalFilesInBatch = 0;\n            this._filesInBatchAddedToUi = 0;\n\n            this._setupClickAndEditEventHandlers();\n        },\n\n        setName: function(id, newName) {\n            var formattedFilename = this._options.formatFileName(newName);\n\n            this._parent.prototype.setName.apply(this, arguments);\n            this._templating.updateFilename(id, formattedFilename);\n        },\n\n        pauseUpload: function(id) {\n            var paused = this._parent.prototype.pauseUpload.apply(this, arguments);\n\n            paused && this._templating.uploadPaused(id);\n            return paused;\n        },\n\n        continueUpload: function(id) {\n            var continued = this._parent.prototype.continueUpload.apply(this, arguments);\n\n            continued && this._templating.uploadContinued(id);\n            return continued;\n        },\n\n        getId: function(fileContainerOrChildEl) {\n            return this._templating.getFileId(fileContainerOrChildEl);\n        },\n\n        getDropTarget: function(fileId) {\n            var file = this.getFile(fileId);\n\n            return file.qqDropTarget;\n        }\n    };\n\n    /**\n     * Defines the private (internal) API for FineUploader mode.\n     */\n    qq.uiPrivateApi = {\n        _getButton: function(buttonId) {\n            var button = this._parent.prototype._getButton.apply(this, arguments);\n\n            if (!button) {\n                if (buttonId === this._defaultButtonId) {\n                    button = this._templating.getButton();\n                }\n            }\n\n            return button;\n        },\n\n        _removeFileItem: function(fileId) {\n            this._templating.removeFile(fileId);\n        },\n\n        _setupClickAndEditEventHandlers: function() {\n            this._fileButtonsClickHandler = qq.FileButtonsClickHandler && this._bindFileButtonsClickEvent();\n\n            // A better approach would be to check specifically for focusin event support by querying the DOM API,\n            // but the DOMFocusIn event is not exposed as a property, so we have to resort to UA string sniffing.\n            this._focusinEventSupported = !qq.firefox();\n\n            if (this._isEditFilenameEnabled())\n            {\n                this._filenameClickHandler = this._bindFilenameClickEvent();\n                this._filenameInputFocusInHandler = this._bindFilenameInputFocusInEvent();\n                this._filenameInputFocusHandler = this._bindFilenameInputFocusEvent();\n            }\n        },\n\n        _setupDragAndDrop: function() {\n            var self = this,\n                dropZoneElements = this._options.dragAndDrop.extraDropzones,\n                templating = this._templating,\n                defaultDropZone = templating.getDropZone();\n\n            defaultDropZone && dropZoneElements.push(defaultDropZone);\n\n            return new qq.DragAndDrop({\n                dropZoneElements: dropZoneElements,\n                allowMultipleItems: this._options.multiple,\n                classes: {\n                    dropActive: this._options.classes.dropActive\n                },\n                callbacks: {\n                    processingDroppedFiles: function() {\n                        templating.showDropProcessing();\n                    },\n                    processingDroppedFilesComplete: function(files, targetEl) {\n                        templating.hideDropProcessing();\n\n                        qq.each(files, function(idx, file) {\n                            file.qqDropTarget = targetEl;\n                        });\n\n                        if (files.length) {\n                            self.addFiles(files, null, null);\n                        }\n                    },\n                    dropError: function(code, errorData) {\n                        self._itemError(code, errorData);\n                    },\n                    dropLog: function(message, level) {\n                        self.log(message, level);\n                    }\n                }\n            });\n        },\n\n        _bindFileButtonsClickEvent: function() {\n            var self = this;\n\n            return new qq.FileButtonsClickHandler({\n                templating: this._templating,\n\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n\n                onDeleteFile: function(fileId) {\n                    self.deleteFile(fileId);\n                },\n\n                onCancel: function(fileId) {\n                    self.cancel(fileId);\n                },\n\n                onRetry: function(fileId) {\n                    self.retry(fileId);\n                },\n\n                onPause: function(fileId) {\n                    self.pauseUpload(fileId);\n                },\n\n                onContinue: function(fileId) {\n                    self.continueUpload(fileId);\n                },\n\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                }\n            });\n        },\n\n        _isEditFilenameEnabled: function() {\n            /*jshint -W014 */\n            return this._templating.isEditFilenamePossible()\n                && !this._options.autoUpload\n                && qq.FilenameClickHandler\n                && qq.FilenameInputFocusHandler\n                && qq.FilenameInputFocusHandler;\n        },\n\n        _filenameEditHandler: function() {\n            var self = this,\n                templating = this._templating;\n\n            return {\n                templating: templating,\n                log: function(message, lvl) {\n                    self.log(message, lvl);\n                },\n                onGetUploadStatus: function(fileId) {\n                    return self.getUploads({id: fileId}).status;\n                },\n                onGetName: function(fileId) {\n                    return self.getName(fileId);\n                },\n                onSetName: function(id, newName) {\n                    self.setName(id, newName);\n                },\n                onEditingStatusChange: function(id, isEditing) {\n                    var qqInput = qq(templating.getEditInput(id)),\n                        qqFileContainer = qq(templating.getFileContainer(id));\n\n                    if (isEditing) {\n                        qqInput.addClass(\"qq-editing\");\n                        templating.hideFilename(id);\n                        templating.hideEditIcon(id);\n                    }\n                    else {\n                        qqInput.removeClass(\"qq-editing\");\n                        templating.showFilename(id);\n                        templating.showEditIcon(id);\n                    }\n\n                    // Force IE8 and older to repaint\n                    qqFileContainer.addClass(\"qq-temp\").removeClass(\"qq-temp\");\n                }\n            };\n        },\n\n        _onUploadStatusChange: function(id, oldStatus, newStatus) {\n            this._parent.prototype._onUploadStatusChange.apply(this, arguments);\n\n            if (this._isEditFilenameEnabled()) {\n                // Status for a file exists before it has been added to the DOM, so we must be careful here.\n                if (this._templating.getFileContainer(id) && newStatus !== qq.status.SUBMITTED) {\n                    this._templating.markFilenameEditable(id);\n                    this._templating.hideEditIcon(id);\n                }\n            }\n\n            if (oldStatus === qq.status.UPLOAD_RETRYING && newStatus === qq.status.UPLOADING) {\n                this._templating.hideRetry(id);\n                this._templating.setStatusText(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.retrying);\n            }\n            else if (newStatus === qq.status.UPLOAD_FAILED) {\n                this._templating.hidePause(id);\n            }\n        },\n\n        _bindFilenameInputFocusInEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusInHandler(spec);\n        },\n\n        _bindFilenameInputFocusEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameInputFocusHandler(spec);\n        },\n\n        _bindFilenameClickEvent: function() {\n            var spec = qq.extend({}, this._filenameEditHandler());\n\n            return new qq.FilenameClickHandler(spec);\n        },\n\n        _storeForLater: function(id) {\n            this._parent.prototype._storeForLater.apply(this, arguments);\n            this._templating.hideSpinner(id);\n        },\n\n        _onAllComplete: function(successful, failed) {\n            this._parent.prototype._onAllComplete.apply(this, arguments);\n            this._templating.resetTotalProgress();\n        },\n\n        _onSubmit: function(id, name) {\n            var file = this.getFile(id);\n\n            if (file && file.qqPath && this._options.dragAndDrop.reportDirectoryPaths) {\n                this._paramsStore.addReadOnly(id, {\n                    qqpath: file.qqPath\n                });\n            }\n\n            this._parent.prototype._onSubmit.apply(this, arguments);\n            this._addToList(id, name);\n        },\n\n        // The file item has been added to the DOM.\n        _onSubmitted: function(id) {\n            // If the edit filename feature is enabled, mark the filename element as \"editable\" and the associated edit icon\n            if (this._isEditFilenameEnabled()) {\n                this._templating.markFilenameEditable(id);\n                this._templating.showEditIcon(id);\n\n                // If the focusin event is not supported, we must add a focus handler to the newly create edit filename text input\n                if (!this._focusinEventSupported) {\n                    this._filenameInputFocusHandler.addHandler(this._templating.getEditInput(id));\n                }\n            }\n        },\n\n        // Update the progress bar & percentage as the file is uploaded\n        _onProgress: function(id, name, loaded, total) {\n            this._parent.prototype._onProgress.apply(this, arguments);\n\n            this._templating.updateProgress(id, loaded, total);\n\n            if (total === 0 || Math.round(loaded / total * 100) === 100) {\n                this._templating.hideCancel(id);\n                this._templating.hidePause(id);\n                this._templating.hideProgress(id);\n                this._templating.setStatusText(id, this._options.text.waitingForResponse);\n\n                // If ~last byte was sent, display total file size\n                this._displayFileSize(id);\n            }\n            else {\n                // If still uploading, display percentage - total size is actually the total request(s) size\n                this._displayFileSize(id, loaded, total);\n            }\n        },\n\n        _onTotalProgress: function(loaded, total) {\n            this._parent.prototype._onTotalProgress.apply(this, arguments);\n            this._templating.updateTotalProgress(loaded, total);\n        },\n\n        _onComplete: function(id, name, result, xhr) {\n            var parentRetVal = this._parent.prototype._onComplete.apply(this, arguments),\n                templating = this._templating,\n                fileContainer = templating.getFileContainer(id),\n                self = this;\n\n            function completeUpload(result) {\n                // If this file is not represented in the templating module, perhaps it was hidden intentionally.\n                // If so, don't perform any UI-related tasks related to this file.\n                if (!fileContainer) {\n                    return;\n                }\n\n                templating.setStatusText(id);\n\n                qq(fileContainer).removeClass(self._classes.retrying);\n                templating.hideProgress(id);\n\n                if (self.getUploads({id: id}).status !== qq.status.UPLOAD_FAILED) {\n                    templating.hideCancel(id);\n                }\n                templating.hideSpinner(id);\n\n                if (result.success) {\n                    self._markFileAsSuccessful(id);\n                }\n                else {\n                    qq(fileContainer).addClass(self._classes.fail);\n                    templating.showCancel(id);\n\n                    if (templating.isRetryPossible() && !self._preventRetries[id]) {\n                        qq(fileContainer).addClass(self._classes.retryable);\n                        templating.showRetry(id);\n                    }\n                    self._controlFailureTextDisplay(id, result);\n                }\n            }\n\n            // The parent may need to perform some async operation before we can accurately determine the status of the upload.\n            if (parentRetVal instanceof qq.Promise) {\n                parentRetVal.done(function(newResult) {\n                    completeUpload(newResult);\n                });\n\n            }\n            else {\n                completeUpload(result);\n            }\n\n            return parentRetVal;\n        },\n\n        _markFileAsSuccessful: function(id) {\n            var templating = this._templating;\n\n            if (this._isDeletePossible()) {\n                templating.showDeleteButton(id);\n            }\n\n            qq(templating.getFileContainer(id)).addClass(this._classes.success);\n\n            this._maybeUpdateThumbnail(id);\n        },\n\n        _onUploadPrep: function(id) {\n            this._parent.prototype._onUploadPrep.apply(this, arguments);\n            this._templating.showSpinner(id);\n        },\n\n        _onUpload: function(id, name) {\n            var parentRetVal = this._parent.prototype._onUpload.apply(this, arguments);\n\n            this._templating.showSpinner(id);\n\n            return parentRetVal;\n        },\n\n        _onUploadChunk: function(id, chunkData) {\n            this._parent.prototype._onUploadChunk.apply(this, arguments);\n\n            // Only display the pause button if we have finished uploading at least one chunk\n            // & this file can be resumed\n            if (chunkData.partIndex > 0 && this._handler.isResumable(id)) {\n                this._templating.allowPause(id);\n            }\n        },\n\n        _onCancel: function(id, name) {\n            this._parent.prototype._onCancel.apply(this, arguments);\n            this._removeFileItem(id);\n\n            if (this._getNotFinished() === 0) {\n                this._templating.resetTotalProgress();\n            }\n        },\n\n        _onBeforeAutoRetry: function(id) {\n            var retryNumForDisplay, maxAuto, retryNote;\n\n            this._parent.prototype._onBeforeAutoRetry.apply(this, arguments);\n\n            this._showCancelLink(id);\n\n            if (this._options.retry.showAutoRetryNote) {\n                retryNumForDisplay = this._autoRetries[id];\n                maxAuto = this._options.retry.maxAutoAttempts;\n\n                retryNote = this._options.retry.autoRetryNote.replace(/\\{retryNum\\}/g, retryNumForDisplay);\n                retryNote = retryNote.replace(/\\{maxAuto\\}/g, maxAuto);\n\n                this._templating.setStatusText(id, retryNote);\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retrying);\n            }\n        },\n\n        //return false if we should not attempt the requested retry\n        _onBeforeManualRetry: function(id) {\n            if (this._parent.prototype._onBeforeManualRetry.apply(this, arguments)) {\n                this._templating.resetProgress(id);\n                qq(this._templating.getFileContainer(id)).removeClass(this._classes.fail);\n                this._templating.setStatusText(id);\n                this._templating.showSpinner(id);\n                this._showCancelLink(id);\n                return true;\n            }\n            else {\n                qq(this._templating.getFileContainer(id)).addClass(this._classes.retryable);\n                this._templating.showRetry(id);\n                return false;\n            }\n        },\n\n        _onSubmitDelete: function(id) {\n            var onSuccessCallback = qq.bind(this._onSubmitDeleteSuccess, this);\n\n            this._parent.prototype._onSubmitDelete.call(this, id, onSuccessCallback);\n        },\n\n        _onSubmitDeleteSuccess: function(id, uuid, additionalMandatedParams) {\n            if (this._options.deleteFile.forceConfirm) {\n                this._showDeleteConfirm.apply(this, arguments);\n            }\n            else {\n                this._sendDeleteRequest.apply(this, arguments);\n            }\n        },\n\n        _onDeleteComplete: function(id, xhr, isError) {\n            this._parent.prototype._onDeleteComplete.apply(this, arguments);\n\n            this._templating.hideSpinner(id);\n\n            if (isError) {\n                this._templating.setStatusText(id, this._options.deleteFile.deletingFailedText);\n                this._templating.showDeleteButton(id);\n            }\n            else {\n                this._removeFileItem(id);\n            }\n        },\n\n        _sendDeleteRequest: function(id, uuid, additionalMandatedParams) {\n            this._templating.hideDeleteButton(id);\n            this._templating.showSpinner(id);\n            this._templating.setStatusText(id, this._options.deleteFile.deletingStatusText);\n            this._deleteHandler.sendDelete.apply(this, arguments);\n        },\n\n        _showDeleteConfirm: function(id, uuid, mandatedParams) {\n            /*jshint -W004 */\n            var fileName = this.getName(id),\n                confirmMessage = this._options.deleteFile.confirmMessage.replace(/\\{filename\\}/g, fileName),\n                uuid = this.getUuid(id),\n                deleteRequestArgs = arguments,\n                self = this,\n                retVal;\n\n            retVal = this._options.showConfirm(confirmMessage);\n\n            if (qq.isGenericPromise(retVal)) {\n                retVal.then(function() {\n                    self._sendDeleteRequest.apply(self, deleteRequestArgs);\n                });\n            }\n            else if (retVal !== false) {\n                self._sendDeleteRequest.apply(self, deleteRequestArgs);\n            }\n        },\n\n        _addToList: function(id, name, canned) {\n            var prependData,\n                prependIndex = 0,\n                dontDisplay = this._handler.isProxied(id) && this._options.scaling.hideScaled,\n                record;\n\n            if (this._options.display.prependFiles) {\n                if (this._totalFilesInBatch > 1 && this._filesInBatchAddedToUi > 0) {\n                    prependIndex = this._filesInBatchAddedToUi - 1;\n                }\n\n                prependData = {\n                    index: prependIndex\n                };\n            }\n\n            if (!canned) {\n                if (this._options.disableCancelForFormUploads && !qq.supportedFeatures.ajaxUploading) {\n                    this._templating.disableCancel();\n                }\n\n                // Cancel all existing (previous) files and clear the list if this file is not part of\n                // a scaled file group that has already been accepted, or if this file is not part of\n                // a scaled file group at all.\n                if (!this._options.multiple) {\n                    record = this.getUploads({id: id});\n\n                    this._handledProxyGroup = this._handledProxyGroup || record.proxyGroupId;\n\n                    if (record.proxyGroupId !== this._handledProxyGroup || !record.proxyGroupId) {\n                        this._handler.cancelAll();\n                        this._clearList();\n                        this._handledProxyGroup = null;\n                    }\n                }\n            }\n\n            if (canned) {\n                this._templating.addFileToCache(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.updateThumbnail(id, this._thumbnailUrls[id], true, this._options.thumbnails.customResizer);\n            }\n            else {\n                this._templating.addFile(id, this._options.formatFileName(name), prependData, dontDisplay);\n                this._templating.generatePreview(id, this.getFile(id), this._options.thumbnails.customResizer);\n            }\n\n            this._filesInBatchAddedToUi += 1;\n\n            if (canned ||\n                (this._options.display.fileSizeOnSubmit && qq.supportedFeatures.ajaxUploading)) {\n\n                this._displayFileSize(id);\n            }\n        },\n\n        _clearList: function() {\n            this._templating.clearFiles();\n            this.clearStoredFiles();\n        },\n\n        _displayFileSize: function(id, loadedSize, totalSize) {\n            var size = this.getSize(id),\n                sizeForDisplay = this._formatSize(size);\n\n            if (size >= 0) {\n                if (loadedSize !== undefined && totalSize !== undefined) {\n                    sizeForDisplay = this._formatProgress(loadedSize, totalSize);\n                }\n\n                this._templating.updateSize(id, sizeForDisplay);\n            }\n        },\n\n        _formatProgress: function(uploadedSize, totalSize) {\n            var message = this._options.text.formatProgress;\n            function r(name, replacement) { message = message.replace(name, replacement); }\n\n            r(\"{percent}\", Math.round(uploadedSize / totalSize * 100));\n            r(\"{total_size}\", this._formatSize(totalSize));\n            return message;\n        },\n\n        _controlFailureTextDisplay: function(id, response) {\n            var mode, responseProperty, failureReason;\n\n            mode = this._options.failedUploadTextDisplay.mode;\n            responseProperty = this._options.failedUploadTextDisplay.responseProperty;\n\n            if (mode === \"custom\") {\n                failureReason = response[responseProperty];\n                if (!failureReason) {\n                    failureReason = this._options.text.failUpload;\n                }\n\n                this._templating.setStatusText(id, failureReason);\n\n                if (this._options.failedUploadTextDisplay.enableTooltip) {\n                    this._showTooltip(id, failureReason);\n                }\n            }\n            else if (mode === \"default\") {\n                this._templating.setStatusText(id, this._options.text.failUpload);\n            }\n            else if (mode !== \"none\") {\n                this.log(\"failedUploadTextDisplay.mode value of '\" + mode + \"' is not valid\", \"warn\");\n            }\n        },\n\n        _showTooltip: function(id, text) {\n            this._templating.getFileContainer(id).title = text;\n        },\n\n        _showCancelLink: function(id) {\n            if (!this._options.disableCancelForFormUploads || qq.supportedFeatures.ajaxUploading) {\n                this._templating.showCancel(id);\n            }\n        },\n\n        _itemError: function(code, name, item) {\n            var message = this._parent.prototype._itemError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _batchError: function(message) {\n            this._parent.prototype._batchError.apply(this, arguments);\n            this._options.showMessage(message);\n        },\n\n        _setupPastePrompt: function() {\n            var self = this;\n\n            this._options.callbacks.onPasteReceived = function() {\n                var message = self._options.paste.namePromptMessage,\n                    defaultVal = self._options.paste.defaultName;\n\n                return self._options.showPrompt(message, defaultVal);\n            };\n        },\n\n        _fileOrBlobRejected: function(id, name) {\n            this._totalFilesInBatch -= 1;\n            this._parent.prototype._fileOrBlobRejected.apply(this, arguments);\n        },\n\n        _prepareItemsForUpload: function(items, params, endpoint) {\n            this._totalFilesInBatch = items.length;\n            this._filesInBatchAddedToUi = 0;\n            this._parent.prototype._prepareItemsForUpload.apply(this, arguments);\n        },\n\n        _maybeUpdateThumbnail: function(fileId) {\n            var thumbnailUrl = this._thumbnailUrls[fileId],\n                fileStatus = this.getUploads({id: fileId}).status;\n\n            if (fileStatus !== qq.status.DELETED &&\n                (thumbnailUrl ||\n                this._options.thumbnails.placeholders.waitUntilResponse ||\n                !qq.supportedFeatures.imagePreviews)) {\n\n                // This will replace the \"waiting\" placeholder with a \"preview not available\" placeholder\n                // if called with a null thumbnailUrl.\n                this._templating.updateThumbnail(fileId, thumbnailUrl, this._options.thumbnails.customResizer);\n            }\n        },\n\n        _addCannedFile: function(sessionData) {\n            var id = this._parent.prototype._addCannedFile.apply(this, arguments);\n\n            this._addToList(id, this.getName(id), true);\n            this._templating.hideSpinner(id);\n            this._templating.hideCancel(id);\n            this._markFileAsSuccessful(id);\n\n            return id;\n        },\n\n        _setSize: function(id, newSize) {\n            this._parent.prototype._setSize.apply(this, arguments);\n\n            this._templating.updateSize(id, this._formatSize(newSize));\n        },\n\n        _sessionRequestComplete: function() {\n            this._templating.addCacheToDom();\n            this._parent.prototype._sessionRequestComplete.apply(this, arguments);\n        }\n    };\n}());\n","/*globals qq */\n/**\n * This defines FineUploader mode, which is a default UI w/ drag & drop uploading.\n */\nqq.FineUploader = function(o, namespace) {\n    \"use strict\";\n\n    var self = this;\n\n    // By default this should inherit instance data from FineUploaderBasic, but this can be overridden\n    // if the (internal) caller defines a different parent.  The parent is also used by\n    // the private and public API functions that need to delegate to a parent function.\n    this._parent = namespace ? qq[namespace].FineUploaderBasic : qq.FineUploaderBasic;\n    this._parent.apply(this, arguments);\n\n    // Options provided by FineUploader mode\n    qq.extend(this._options, {\n        element: null,\n\n        button: null,\n\n        listElement: null,\n\n        dragAndDrop: {\n            extraDropzones: [],\n            reportDirectoryPaths: false\n        },\n\n        text: {\n            formatProgress: \"{percent}% of {total_size}\",\n            failUpload: \"Upload failed\",\n            waitingForResponse: \"Processing...\",\n            paused: \"Paused\"\n        },\n\n        template: \"qq-template\",\n\n        classes: {\n            retrying: \"qq-upload-retrying\",\n            retryable: \"qq-upload-retryable\",\n            success: \"qq-upload-success\",\n            fail: \"qq-upload-fail\",\n            editable: \"qq-editable\",\n            hide: \"qq-hide\",\n            dropActive: \"qq-upload-drop-area-active\"\n        },\n\n        failedUploadTextDisplay: {\n            mode: \"default\", //default, custom, or none\n            responseProperty: \"error\",\n            enableTooltip: true\n        },\n\n        messages: {\n            tooManyFilesError: \"You may only drop one file\",\n            unsupportedBrowser: \"Unrecoverable error - this browser does not permit file uploading of any kind.\"\n        },\n\n        retry: {\n            showAutoRetryNote: true,\n            autoRetryNote: \"Retrying {retryNum}/{maxAuto}...\"\n        },\n\n        deleteFile: {\n            forceConfirm: false,\n            confirmMessage: \"Are you sure you want to delete {filename}?\",\n            deletingStatusText: \"Deleting...\",\n            deletingFailedText: \"Delete failed\"\n\n        },\n\n        display: {\n            fileSizeOnSubmit: false,\n            prependFiles: false\n        },\n\n        paste: {\n            promptForName: false,\n            namePromptMessage: \"Please name this image\"\n        },\n\n        thumbnails: {\n            customResizer: null,\n            maxCount: 0,\n            placeholders: {\n                waitUntilResponse: false,\n                notAvailablePath: null,\n                waitingPath: null\n            },\n            timeBetweenThumbs: 750\n        },\n\n        scaling: {\n            hideScaled: false\n        },\n\n        showMessage: function(message) {\n            if (self._templating.hasDialog(\"alert\")) {\n                return self._templating.showDialog(\"alert\", message);\n            }\n            else {\n                setTimeout(function() {\n                    window.alert(message);\n                }, 0);\n            }\n        },\n\n        showConfirm: function(message) {\n            if (self._templating.hasDialog(\"confirm\")) {\n                return self._templating.showDialog(\"confirm\", message);\n            }\n            else {\n                return window.confirm(message);\n            }\n        },\n\n        showPrompt: function(message, defaultValue) {\n            if (self._templating.hasDialog(\"prompt\")) {\n                return self._templating.showDialog(\"prompt\", message, defaultValue);\n            }\n            else {\n                return window.prompt(message, defaultValue);\n            }\n        }\n    }, true);\n\n    // Replace any default options with user defined ones\n    qq.extend(this._options, o, true);\n\n    this._templating = new qq.Templating({\n        log: qq.bind(this.log, this),\n        templateIdOrEl: this._options.template,\n        containerEl: this._options.element,\n        fileContainerEl: this._options.listElement,\n        button: this._options.button,\n        imageGenerator: this._imageGenerator,\n        classes: {\n            hide: this._options.classes.hide,\n            editable: this._options.classes.editable\n        },\n        limits: {\n            maxThumbs: this._options.thumbnails.maxCount,\n            timeBetweenThumbs: this._options.thumbnails.timeBetweenThumbs\n        },\n        placeholders: {\n            waitUntilUpdate: this._options.thumbnails.placeholders.waitUntilResponse,\n            thumbnailNotAvailable: this._options.thumbnails.placeholders.notAvailablePath,\n            waitingForThumbnail: this._options.thumbnails.placeholders.waitingPath\n        },\n        text: this._options.text\n    });\n\n    if (this._options.workarounds.ios8SafariUploads && qq.ios800() && qq.iosSafari()) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowserIos8Safari);\n    }\n    else if (!qq.supportedFeatures.uploading || (this._options.cors.expected && !qq.supportedFeatures.uploadCors)) {\n        this._templating.renderFailure(this._options.messages.unsupportedBrowser);\n    }\n    else {\n        this._wrapCallbacks();\n\n        this._templating.render();\n\n        this._classes = this._options.classes;\n\n        if (!this._options.button && this._templating.getButton()) {\n            this._defaultButtonId = this._createUploadButton({\n                element: this._templating.getButton(),\n                title: this._options.text.fileInputTitle\n            }).getButtonId();\n        }\n\n        this._setupClickAndEditEventHandlers();\n\n        if (qq.DragAndDrop && qq.supportedFeatures.fileDrop) {\n            this._dnd = this._setupDragAndDrop();\n        }\n\n        if (this._options.paste.targetElement && this._options.paste.promptForName) {\n            if (qq.PasteSupport) {\n                this._setupPastePrompt();\n            }\n            else {\n                this.log(\"Paste support module not found.\", \"error\");\n            }\n        }\n\n        this._totalFilesInBatch = 0;\n        this._filesInBatchAddedToUi = 0;\n    }\n};\n\n// Inherit the base public & private API methods\nqq.extend(qq.FineUploader.prototype, qq.basePublicApi);\nqq.extend(qq.FineUploader.prototype, qq.basePrivateApi);\n\n// Add the FineUploader/default UI public & private UI methods, which may override some base methods.\nqq.extend(qq.FineUploader.prototype, qq.uiPublicApi);\nqq.extend(qq.FineUploader.prototype, qq.uiPrivateApi);\n","/* globals qq */\n/* jshint -W065 */\n/**\n * Module responsible for rendering all Fine Uploader UI templates.  This module also asserts at least\n * a limited amount of control over the template elements after they are added to the DOM.\n * Wherever possible, this module asserts total control over template elements present in the DOM.\n *\n * @param spec Specification object used to control various templating behaviors\n * @constructor\n */\nqq.Templating = function(spec) {\n    \"use strict\";\n\n    var FILE_ID_ATTR = \"qq-file-id\",\n        FILE_CLASS_PREFIX = \"qq-file-id-\",\n        THUMBNAIL_MAX_SIZE_ATTR = \"qq-max-size\",\n        THUMBNAIL_SERVER_SCALE_ATTR = \"qq-server-scale\",\n        // This variable is duplicated in the DnD module since it can function as a standalone as well\n        HIDE_DROPZONE_ATTR = \"qq-hide-dropzone\",\n        DROPZPONE_TEXT_ATTR = \"qq-drop-area-text\",\n        IN_PROGRESS_CLASS = \"qq-in-progress\",\n        HIDDEN_FOREVER_CLASS = \"qq-hidden-forever\",\n        fileBatch = {\n            content: document.createDocumentFragment(),\n            map: {}\n        },\n        isCancelDisabled = false,\n        generatedThumbnails = 0,\n        thumbnailQueueMonitorRunning = false,\n        thumbGenerationQueue = [],\n        thumbnailMaxSize = -1,\n        options = {\n            log: null,\n            limits: {\n                maxThumbs: 0,\n                timeBetweenThumbs: 750\n            },\n            templateIdOrEl: \"qq-template\",\n            containerEl: null,\n            fileContainerEl: null,\n            button: null,\n            imageGenerator: null,\n            classes: {\n                hide: \"qq-hide\",\n                editable: \"qq-editable\"\n            },\n            placeholders: {\n                waitUntilUpdate: false,\n                thumbnailNotAvailable: null,\n                waitingForThumbnail: null\n            },\n            text: {\n                paused: \"Paused\"\n            }\n        },\n        selectorClasses = {\n            button: \"qq-upload-button-selector\",\n            alertDialog: \"qq-alert-dialog-selector\",\n            dialogCancelButton: \"qq-cancel-button-selector\",\n            confirmDialog: \"qq-confirm-dialog-selector\",\n            dialogMessage: \"qq-dialog-message-selector\",\n            dialogOkButton: \"qq-ok-button-selector\",\n            promptDialog: \"qq-prompt-dialog-selector\",\n            uploader: \"qq-uploader-selector\",\n            drop: \"qq-upload-drop-area-selector\",\n            list: \"qq-upload-list-selector\",\n            progressBarContainer: \"qq-progress-bar-container-selector\",\n            progressBar: \"qq-progress-bar-selector\",\n            totalProgressBarContainer: \"qq-total-progress-bar-container-selector\",\n            totalProgressBar: \"qq-total-progress-bar-selector\",\n            file: \"qq-upload-file-selector\",\n            spinner: \"qq-upload-spinner-selector\",\n            size: \"qq-upload-size-selector\",\n            cancel: \"qq-upload-cancel-selector\",\n            pause: \"qq-upload-pause-selector\",\n            continueButton: \"qq-upload-continue-selector\",\n            deleteButton: \"qq-upload-delete-selector\",\n            retry: \"qq-upload-retry-selector\",\n            statusText: \"qq-upload-status-text-selector\",\n            editFilenameInput: \"qq-edit-filename-selector\",\n            editNameIcon: \"qq-edit-filename-icon-selector\",\n            dropText: \"qq-upload-drop-area-text-selector\",\n            dropProcessing: \"qq-drop-processing-selector\",\n            dropProcessingSpinner: \"qq-drop-processing-spinner-selector\",\n            thumbnail: \"qq-thumbnail-selector\"\n        },\n        previewGeneration = {},\n        cachedThumbnailNotAvailableImg = new qq.Promise(),\n        cachedWaitingForThumbnailImg = new qq.Promise(),\n        log,\n        isEditElementsExist,\n        isRetryElementExist,\n        templateDom,\n        container,\n        fileList,\n        showThumbnails,\n        serverScale,\n\n        // During initialization of the templating module we should cache any\n        // placeholder images so we can quickly swap them into the file list on demand.\n        // Any placeholder images that cannot be loaded/found are simply ignored.\n        cacheThumbnailPlaceholders = function() {\n            var notAvailableUrl =  options.placeholders.thumbnailNotAvailable,\n                waitingUrl = options.placeholders.waitingForThumbnail,\n                spec = {\n                    maxSize: thumbnailMaxSize,\n                    scale: serverScale\n                };\n\n            if (showThumbnails) {\n                if (notAvailableUrl) {\n                    options.imageGenerator.generate(notAvailableUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedThumbnailNotAvailableImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedThumbnailNotAvailableImg.failure();\n                            log(\"Problem loading 'not available' placeholder image at \" + notAvailableUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedThumbnailNotAvailableImg.failure();\n                }\n\n                if (waitingUrl) {\n                    options.imageGenerator.generate(waitingUrl, new Image(), spec).then(\n                        function(updatedImg) {\n                            cachedWaitingForThumbnailImg.success(updatedImg);\n                        },\n                        function() {\n                            cachedWaitingForThumbnailImg.failure();\n                            log(\"Problem loading 'waiting for thumbnail' placeholder image at \" + waitingUrl, \"error\");\n                        }\n                    );\n                }\n                else {\n                    cachedWaitingForThumbnailImg.failure();\n                }\n            }\n        },\n\n        // Displays a \"waiting for thumbnail\" type placeholder image\n        // iff we were able to load it during initialization of the templating module.\n        displayWaitingImg = function(thumbnail) {\n            var waitingImgPlacement = new qq.Promise();\n\n            cachedWaitingForThumbnailImg.then(function(img) {\n                maybeScalePlaceholderViaCss(img, thumbnail);\n                /* jshint eqnull:true */\n                if (!thumbnail.src) {\n                    thumbnail.src = img.src;\n                    thumbnail.onload = function() {\n                        thumbnail.onload = null;\n                        show(thumbnail);\n                        waitingImgPlacement.success();\n                    };\n                }\n                else {\n                    waitingImgPlacement.success();\n                }\n            }, function() {\n                // In some browsers (such as IE9 and older) an img w/out a src attribute\n                // are displayed as \"broken\" images, so we should just hide the img tag\n                // if we aren't going to display the \"waiting\" placeholder.\n                hide(thumbnail);\n                waitingImgPlacement.success();\n            });\n\n            return waitingImgPlacement;\n        },\n\n        generateNewPreview = function(id, blob, spec) {\n            var thumbnail = getThumbnail(id);\n\n            log(\"Generating new thumbnail for \" + id);\n            blob.qqThumbnailId = id;\n\n            return options.imageGenerator.generate(blob, thumbnail, spec).then(\n                function() {\n                    generatedThumbnails++;\n                    show(thumbnail);\n                    previewGeneration[id].success();\n                },\n                function() {\n                    previewGeneration[id].failure();\n\n                    // Display the \"not available\" placeholder img only if we are\n                    // not expecting a thumbnail at a later point, such as in a server response.\n                    if (!options.placeholders.waitUntilUpdate) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    }\n                });\n        },\n\n        generateNextQueuedPreview = function() {\n            if (thumbGenerationQueue.length) {\n                thumbnailQueueMonitorRunning = true;\n\n                var queuedThumbRequest = thumbGenerationQueue.shift();\n\n                if (queuedThumbRequest.update) {\n                    processUpdateQueuedPreviewRequest(queuedThumbRequest);\n                }\n                else {\n                    processNewQueuedPreviewRequest(queuedThumbRequest);\n                }\n            }\n            else {\n                thumbnailQueueMonitorRunning = false;\n            }\n        },\n\n        getCancel = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.cancel);\n        },\n\n        getContinue = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.continueButton);\n        },\n\n        getDialog = function(type) {\n            return getTemplateEl(container, selectorClasses[type + \"Dialog\"]);\n        },\n\n        getDelete = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.deleteButton);\n        },\n\n        getDropProcessing = function() {\n            return getTemplateEl(container, selectorClasses.dropProcessing);\n        },\n\n        getEditIcon = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editNameIcon);\n        },\n\n        getFile = function(id) {\n            return fileBatch.map[id] || qq(fileList).getFirstByClass(FILE_CLASS_PREFIX + id);\n        },\n\n        getFilename = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.file);\n        },\n\n        getPause = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.pause);\n        },\n\n        getProgress = function(id) {\n            /* jshint eqnull:true */\n            // Total progress bar\n            if (id == null) {\n                return getTemplateEl(container, selectorClasses.totalProgressBarContainer) ||\n                    getTemplateEl(container, selectorClasses.totalProgressBar);\n            }\n\n            // Per-file progress bar\n            return getTemplateEl(getFile(id), selectorClasses.progressBarContainer) ||\n                getTemplateEl(getFile(id), selectorClasses.progressBar);\n        },\n\n        getRetry = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.retry);\n        },\n\n        getSize = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.size);\n        },\n\n        getSpinner = function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.spinner);\n        },\n\n        getTemplateEl = function(context, cssClass) {\n            return context && qq(context).getFirstByClass(cssClass);\n        },\n\n        getThumbnail = function(id) {\n            return showThumbnails && getTemplateEl(getFile(id), selectorClasses.thumbnail);\n        },\n\n        hide = function(el) {\n            el && qq(el).addClass(options.classes.hide);\n        },\n\n        // Ensures a placeholder image does not exceed any max size specified\n        // via `style` attribute properties iff <canvas> was not used to scale\n        // the placeholder AND the target <img> doesn't already have these `style` attribute properties set.\n        maybeScalePlaceholderViaCss = function(placeholder, thumbnail) {\n            var maxWidth = placeholder.style.maxWidth,\n                maxHeight = placeholder.style.maxHeight;\n\n            if (maxHeight && maxWidth && !thumbnail.style.maxWidth && !thumbnail.style.maxHeight) {\n                qq(thumbnail).css({\n                    maxWidth: maxWidth,\n                    maxHeight: maxHeight\n                });\n            }\n        },\n\n        // Displays a \"thumbnail not available\" type placeholder image\n        // iff we were able to load this placeholder during initialization\n        // of the templating module or after preview generation has failed.\n        maybeSetDisplayNotAvailableImg = function(id, thumbnail) {\n            var previewing = previewGeneration[id] || new qq.Promise().failure(),\n                notAvailableImgPlacement = new qq.Promise();\n\n            cachedThumbnailNotAvailableImg.then(function(img) {\n                previewing.then(\n                    function() {\n                        notAvailableImgPlacement.success();\n                    },\n                    function() {\n                        maybeScalePlaceholderViaCss(img, thumbnail);\n\n                        thumbnail.onload = function() {\n                            thumbnail.onload = null;\n                            notAvailableImgPlacement.success();\n                        };\n\n                        thumbnail.src = img.src;\n                        show(thumbnail);\n                    }\n                );\n            });\n\n            return notAvailableImgPlacement;\n        },\n\n        /**\n         * Grabs the HTML from the script tag holding the template markup.  This function will also adjust\n         * some internally-tracked state variables based on the contents of the template.\n         * The template is filtered so that irrelevant elements (such as the drop zone if DnD is not supported)\n         * are omitted from the DOM.  Useful errors will be thrown if the template cannot be parsed.\n         *\n         * @returns {{template: *, fileTemplate: *}} HTML for the top-level file items templates\n         */\n        parseAndGetTemplate = function() {\n            var scriptEl,\n                scriptHtml,\n                fileListNode,\n                tempTemplateEl,\n                fileListEl,\n                defaultButton,\n                dropArea,\n                thumbnail,\n                dropProcessing,\n                dropTextEl,\n                uploaderEl;\n\n            log(\"Parsing template\");\n\n            /*jshint -W116*/\n            if (options.templateIdOrEl == null) {\n                throw new Error(\"You MUST specify either a template element or ID!\");\n            }\n\n            // Grab the contents of the script tag holding the template.\n            if (qq.isString(options.templateIdOrEl)) {\n                scriptEl = document.getElementById(options.templateIdOrEl);\n\n                if (scriptEl === null) {\n                    throw new Error(qq.format(\"Cannot find template script at ID '{}'!\", options.templateIdOrEl));\n                }\n\n                scriptHtml = scriptEl.innerHTML;\n            }\n            else {\n                if (options.templateIdOrEl.innerHTML === undefined) {\n                    throw new Error(\"You have specified an invalid value for the template option!  \" +\n                        \"It must be an ID or an Element.\");\n                }\n\n                scriptHtml = options.templateIdOrEl.innerHTML;\n            }\n\n            scriptHtml = qq.trimStr(scriptHtml);\n            tempTemplateEl = document.createElement(\"div\");\n            tempTemplateEl.appendChild(qq.toElement(scriptHtml));\n            uploaderEl = qq(tempTemplateEl).getFirstByClass(selectorClasses.uploader);\n\n            // Don't include the default template button in the DOM\n            // if an alternate button container has been specified.\n            if (options.button) {\n                defaultButton = qq(tempTemplateEl).getFirstByClass(selectorClasses.button);\n                if (defaultButton) {\n                    qq(defaultButton).remove();\n                }\n            }\n\n            // Omit the drop processing element from the DOM if DnD is not supported by the UA,\n            // or the drag and drop module is not found.\n            // NOTE: We are consciously not removing the drop zone if the UA doesn't support DnD\n            // to support layouts where the drop zone is also a container for visible elements,\n            // such as the file list.\n            if (!qq.DragAndDrop || !qq.supportedFeatures.fileDrop) {\n                dropProcessing = qq(tempTemplateEl).getFirstByClass(selectorClasses.dropProcessing);\n                if (dropProcessing) {\n                    qq(dropProcessing).remove();\n                }\n            }\n\n            dropArea = qq(tempTemplateEl).getFirstByClass(selectorClasses.drop);\n\n            // If DnD is not available then remove\n            // it from the DOM as well.\n            if (dropArea && !qq.DragAndDrop) {\n                log(\"DnD module unavailable.\", \"info\");\n                qq(dropArea).remove();\n            }\n\n            if (!qq.supportedFeatures.fileDrop) {\n                // don't display any \"drop files to upload\" background text\n                uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n                if (dropArea && qq(dropArea).hasAttribute(HIDE_DROPZONE_ATTR)) {\n                    // If there is a drop area defined in the template, and the current UA doesn't support DnD,\n                    // and the drop area is marked as \"hide before enter\", ensure it is hidden as the DnD module\n                    // will not do this (since we will not be loading the DnD module)\n                    qq(dropArea).css({\n                        display: \"none\"\n                    });\n                }\n            }\n            else if (qq(uploaderEl).hasAttribute(DROPZPONE_TEXT_ATTR) && dropArea) {\n                dropTextEl = qq(dropArea).getFirstByClass(selectorClasses.dropText);\n                dropTextEl && qq(dropTextEl).remove();\n            }\n\n            // Ensure the `showThumbnails` flag is only set if the thumbnail element\n            // is present in the template AND the current UA is capable of generating client-side previews.\n            thumbnail = qq(tempTemplateEl).getFirstByClass(selectorClasses.thumbnail);\n            if (!showThumbnails) {\n                thumbnail && qq(thumbnail).remove();\n            }\n            else if (thumbnail) {\n                thumbnailMaxSize = parseInt(thumbnail.getAttribute(THUMBNAIL_MAX_SIZE_ATTR));\n                // Only enforce max size if the attr value is non-zero\n                thumbnailMaxSize = thumbnailMaxSize > 0 ? thumbnailMaxSize : null;\n\n                serverScale = qq(thumbnail).hasAttribute(THUMBNAIL_SERVER_SCALE_ATTR);\n            }\n            showThumbnails = showThumbnails && thumbnail;\n\n            isEditElementsExist = qq(tempTemplateEl).getByClass(selectorClasses.editFilenameInput).length > 0;\n            isRetryElementExist = qq(tempTemplateEl).getByClass(selectorClasses.retry).length > 0;\n\n            fileListNode = qq(tempTemplateEl).getFirstByClass(selectorClasses.list);\n            /*jshint -W116*/\n            if (fileListNode == null) {\n                throw new Error(\"Could not find the file list container in the template!\");\n            }\n\n            fileListEl = fileListNode.children[0].cloneNode(true);\n            fileListNode.innerHTML = \"\";\n\n            // We must call `createElement` in IE8 in order to target and hide any <dialog> via CSS\n            if (tempTemplateEl.getElementsByTagName(\"DIALOG\").length) {\n                document.createElement(\"dialog\");\n            }\n\n            log(\"Template parsing complete\");\n\n            return {\n                template: tempTemplateEl,\n                fileTemplate: fileListEl\n            };\n        },\n\n        prependFile = function(el, index, fileList) {\n            var parentEl = fileList,\n                beforeEl = parentEl.firstChild;\n\n            if (index > 0) {\n                beforeEl = qq(parentEl).children()[index].nextSibling;\n\n            }\n\n            parentEl.insertBefore(el, beforeEl);\n        },\n\n        processNewQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                optFileOrBlob = queuedThumbRequest.optFileOrBlob,\n                relatedThumbnailId = optFileOrBlob && optFileOrBlob.qqThumbnailId,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    maxSize: thumbnailMaxSize,\n                    orient: true,\n                    scale: true\n                };\n\n            if (qq.supportedFeatures.imagePreviews) {\n                if (thumbnail) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        displayWaitingImg(thumbnail).done(function() {\n                            previewGeneration[id] = new qq.Promise();\n\n                            previewGeneration[id].done(function() {\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            });\n\n                            /* jshint eqnull: true */\n                            // If we've already generated an <img> for this file, use the one that exists,\n                            // don't waste resources generating a new one.\n                            if (relatedThumbnailId != null) {\n                                useCachedPreview(id, relatedThumbnailId);\n                            }\n                            else {\n                                generateNewPreview(id, optFileOrBlob, spec);\n                            }\n                        });\n                    }\n                }\n                // File element in template may have been removed, so move on to next item in queue\n                else {\n                    generateNextQueuedPreview();\n                }\n            }\n            else if (thumbnail) {\n                displayWaitingImg(thumbnail);\n                generateNextQueuedPreview();\n            }\n        },\n\n        processUpdateQueuedPreviewRequest = function(queuedThumbRequest) {\n            var id = queuedThumbRequest.id,\n                thumbnailUrl = queuedThumbRequest.thumbnailUrl,\n                showWaitingImg = queuedThumbRequest.showWaitingImg,\n                thumbnail = getThumbnail(id),\n                spec = {\n                    customResizeFunction: queuedThumbRequest.customResizeFunction,\n                    scale: serverScale,\n                    maxSize: thumbnailMaxSize\n                };\n\n            if (thumbnail) {\n                if (thumbnailUrl) {\n                    if (options.limits.maxThumbs && options.limits.maxThumbs <= generatedThumbnails) {\n                        maybeSetDisplayNotAvailableImg(id, thumbnail);\n                        generateNextQueuedPreview();\n                    }\n                    else {\n                        if (showWaitingImg) {\n                            displayWaitingImg(thumbnail);\n                        }\n\n                        return options.imageGenerator.generate(thumbnailUrl, thumbnail, spec).then(\n                            function() {\n                                show(thumbnail);\n                                generatedThumbnails++;\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            },\n\n                            function() {\n                                maybeSetDisplayNotAvailableImg(id, thumbnail);\n                                setTimeout(generateNextQueuedPreview, options.limits.timeBetweenThumbs);\n                            }\n                        );\n                    }\n                }\n                else {\n                    maybeSetDisplayNotAvailableImg(id, thumbnail);\n                    generateNextQueuedPreview();\n                }\n            }\n        },\n\n        setProgressBarWidth = function(id, percent) {\n            var bar = getProgress(id),\n                /* jshint eqnull:true */\n                progressBarSelector = id == null ? selectorClasses.totalProgressBar : selectorClasses.progressBar;\n\n            if (bar && !qq(bar).hasClass(progressBarSelector)) {\n                bar = qq(bar).getFirstByClass(progressBarSelector);\n            }\n\n            if (bar) {\n                qq(bar).css({width: percent + \"%\"});\n                bar.setAttribute(\"aria-valuenow\", percent);\n            }\n        },\n\n        show = function(el) {\n            el && qq(el).removeClass(options.classes.hide);\n        },\n\n        useCachedPreview = function(targetThumbnailId, cachedThumbnailId) {\n            var targetThumbnail = getThumbnail(targetThumbnailId),\n                cachedThumbnail = getThumbnail(cachedThumbnailId);\n\n            log(qq.format(\"ID {} is the same file as ID {}.  Will use generated thumbnail from ID {} instead.\", targetThumbnailId, cachedThumbnailId, cachedThumbnailId));\n\n            // Generation of the related thumbnail may still be in progress, so, wait until it is done.\n            previewGeneration[cachedThumbnailId].then(function() {\n                generatedThumbnails++;\n                previewGeneration[targetThumbnailId].success();\n                log(qq.format(\"Now using previously generated thumbnail created for ID {} on ID {}.\", cachedThumbnailId, targetThumbnailId));\n                targetThumbnail.src = cachedThumbnail.src;\n                show(targetThumbnail);\n            },\n            function() {\n                previewGeneration[targetThumbnailId].failure();\n                if (!options.placeholders.waitUntilUpdate) {\n                    maybeSetDisplayNotAvailableImg(targetThumbnailId, targetThumbnail);\n                }\n            });\n        };\n\n    qq.extend(options, spec);\n    log = options.log;\n\n    // No need to worry about conserving CPU or memory on older browsers,\n    // since there is no ability to preview, and thumbnail display is primitive and quick.\n    if (!qq.supportedFeatures.imagePreviews) {\n        options.limits.timeBetweenThumbs = 0;\n        options.limits.maxThumbs = 0;\n    }\n\n    container = options.containerEl;\n    showThumbnails = options.imageGenerator !== undefined;\n    templateDom = parseAndGetTemplate();\n\n    cacheThumbnailPlaceholders();\n\n    qq.extend(this, {\n        render: function() {\n            log(\"Rendering template in DOM.\");\n\n            generatedThumbnails = 0;\n\n            container.appendChild(templateDom.template.cloneNode(true));\n            hide(getDropProcessing());\n            this.hideTotalProgress();\n            fileList = options.fileContainerEl || getTemplateEl(container, selectorClasses.list);\n\n            log(\"Template rendering complete\");\n        },\n\n        renderFailure: function(message) {\n            var cantRenderEl = qq.toElement(message);\n            container.innerHTML = \"\";\n            container.appendChild(cantRenderEl);\n        },\n\n        reset: function() {\n            container.innerHTML = \"\";\n            this.render();\n        },\n\n        clearFiles: function() {\n            fileList.innerHTML = \"\";\n        },\n\n        disableCancel: function() {\n            isCancelDisabled = true;\n        },\n\n        addFile: function(id, name, prependInfo, hideForever, batch) {\n            var fileEl = templateDom.fileTemplate.cloneNode(true),\n                fileNameEl = getTemplateEl(fileEl, selectorClasses.file),\n                uploaderEl = getTemplateEl(container, selectorClasses.uploader),\n                fileContainer = batch ? fileBatch.content : fileList,\n                thumb;\n\n            if (batch) {\n                fileBatch.map[id] = fileEl;\n            }\n\n            qq(fileEl).addClass(FILE_CLASS_PREFIX + id);\n            uploaderEl.removeAttribute(DROPZPONE_TEXT_ATTR);\n\n            if (fileNameEl) {\n                qq(fileNameEl).setText(name);\n                fileNameEl.setAttribute(\"title\", name);\n            }\n\n            fileEl.setAttribute(FILE_ID_ATTR, id);\n\n            if (prependInfo) {\n                prependFile(fileEl, prependInfo.index, fileContainer);\n            }\n            else {\n                fileContainer.appendChild(fileEl);\n            }\n\n            if (hideForever) {\n                fileEl.style.display = \"none\";\n                qq(fileEl).addClass(HIDDEN_FOREVER_CLASS);\n            }\n            else {\n                hide(getProgress(id));\n                hide(getSize(id));\n                hide(getDelete(id));\n                hide(getRetry(id));\n                hide(getPause(id));\n                hide(getContinue(id));\n\n                if (isCancelDisabled) {\n                    this.hideCancel(id);\n                }\n\n                thumb = getThumbnail(id);\n                if (thumb && !thumb.src) {\n                    cachedWaitingForThumbnailImg.then(function(waitingImg) {\n                        thumb.src = waitingImg.src;\n                        if (waitingImg.style.maxHeight && waitingImg.style.maxWidth) {\n                            qq(thumb).css({\n                                maxHeight: waitingImg.style.maxHeight,\n                                maxWidth: waitingImg.style.maxWidth\n                            });\n                        }\n\n                        show(thumb);\n                    });\n                }\n            }\n        },\n\n        addFileToCache: function(id, name, prependInfo, hideForever) {\n            this.addFile(id, name, prependInfo, hideForever, true);\n        },\n\n        addCacheToDom: function() {\n            fileList.appendChild(fileBatch.content);\n            fileBatch.content = document.createDocumentFragment();\n            fileBatch.map = {};\n        },\n\n        removeFile: function(id) {\n            qq(getFile(id)).remove();\n        },\n\n        getFileId: function(el) {\n            var currentNode = el;\n\n            if (currentNode) {\n                /*jshint -W116*/\n                while (currentNode.getAttribute(FILE_ID_ATTR) == null) {\n                    currentNode = currentNode.parentNode;\n                }\n\n                return parseInt(currentNode.getAttribute(FILE_ID_ATTR));\n            }\n        },\n\n        getFileList: function() {\n            return fileList;\n        },\n\n        markFilenameEditable: function(id) {\n            var filename = getFilename(id);\n\n            filename && qq(filename).addClass(options.classes.editable);\n        },\n\n        updateFilename: function(id, name) {\n            var filenameEl = getFilename(id);\n\n            if (filenameEl) {\n                qq(filenameEl).setText(name);\n                filenameEl.setAttribute(\"title\", name);\n            }\n        },\n\n        hideFilename: function(id) {\n            hide(getFilename(id));\n        },\n\n        showFilename: function(id) {\n            show(getFilename(id));\n        },\n\n        isFileName: function(el) {\n            return qq(el).hasClass(selectorClasses.file);\n        },\n\n        getButton: function() {\n            return options.button || getTemplateEl(container, selectorClasses.button);\n        },\n\n        hideDropProcessing: function() {\n            hide(getDropProcessing());\n        },\n\n        showDropProcessing: function() {\n            show(getDropProcessing());\n        },\n\n        getDropZone: function() {\n            return getTemplateEl(container, selectorClasses.drop);\n        },\n\n        isEditFilenamePossible: function() {\n            return isEditElementsExist;\n        },\n\n        hideRetry: function(id) {\n            hide(getRetry(id));\n        },\n\n        isRetryPossible: function() {\n            return isRetryElementExist;\n        },\n\n        showRetry: function(id) {\n            show(getRetry(id));\n        },\n\n        getFileContainer: function(id) {\n            return getFile(id);\n        },\n\n        showEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).addClass(options.classes.editable);\n        },\n\n        isHiddenForever: function(id) {\n            return qq(getFile(id)).hasClass(HIDDEN_FOREVER_CLASS);\n        },\n\n        hideEditIcon: function(id) {\n            var icon = getEditIcon(id);\n\n            icon && qq(icon).removeClass(options.classes.editable);\n        },\n\n        isEditIcon: function(el) {\n            return qq(el).hasClass(selectorClasses.editNameIcon, true);\n        },\n\n        getEditInput: function(id) {\n            return getTemplateEl(getFile(id), selectorClasses.editFilenameInput);\n        },\n\n        isEditInput: function(el) {\n            return qq(el).hasClass(selectorClasses.editFilenameInput, true);\n        },\n\n        updateProgress: function(id, loaded, total) {\n            var bar = getProgress(id),\n                percent;\n\n            if (bar && total > 0) {\n                percent = Math.round(loaded / total * 100);\n\n                if (percent === 100) {\n                    hide(bar);\n                }\n                else {\n                    show(bar);\n                }\n\n                setProgressBarWidth(id, percent);\n            }\n        },\n\n        updateTotalProgress: function(loaded, total) {\n            this.updateProgress(null, loaded, total);\n        },\n\n        hideProgress: function(id) {\n            var bar = getProgress(id);\n\n            bar && hide(bar);\n        },\n\n        hideTotalProgress: function() {\n            this.hideProgress();\n        },\n\n        resetProgress: function(id) {\n            setProgressBarWidth(id, 0);\n            this.hideTotalProgress(id);\n        },\n\n        resetTotalProgress: function() {\n            this.resetProgress();\n        },\n\n        showCancel: function(id) {\n            if (!isCancelDisabled) {\n                var cancel = getCancel(id);\n\n                cancel && qq(cancel).removeClass(options.classes.hide);\n            }\n        },\n\n        hideCancel: function(id) {\n            hide(getCancel(id));\n        },\n\n        isCancel: function(el)  {\n            return qq(el).hasClass(selectorClasses.cancel, true);\n        },\n\n        allowPause: function(id) {\n            show(getPause(id));\n            hide(getContinue(id));\n        },\n\n        uploadPaused: function(id) {\n            this.setStatusText(id, options.text.paused);\n            this.allowContinueButton(id);\n            hide(getSpinner(id));\n        },\n\n        hidePause: function(id) {\n            hide(getPause(id));\n        },\n\n        isPause: function(el) {\n            return qq(el).hasClass(selectorClasses.pause, true);\n        },\n\n        isContinueButton: function(el) {\n            return qq(el).hasClass(selectorClasses.continueButton, true);\n        },\n\n        allowContinueButton: function(id) {\n            show(getContinue(id));\n            hide(getPause(id));\n        },\n\n        uploadContinued: function(id) {\n            this.setStatusText(id, \"\");\n            this.allowPause(id);\n            show(getSpinner(id));\n        },\n\n        showDeleteButton: function(id) {\n            show(getDelete(id));\n        },\n\n        hideDeleteButton: function(id) {\n            hide(getDelete(id));\n        },\n\n        isDeleteButton: function(el) {\n            return qq(el).hasClass(selectorClasses.deleteButton, true);\n        },\n\n        isRetry: function(el) {\n            return qq(el).hasClass(selectorClasses.retry, true);\n        },\n\n        updateSize: function(id, text) {\n            var size = getSize(id);\n\n            if (size) {\n                show(size);\n                qq(size).setText(text);\n            }\n        },\n\n        setStatusText: function(id, text) {\n            var textEl = getTemplateEl(getFile(id), selectorClasses.statusText);\n\n            if (textEl) {\n                /*jshint -W116*/\n                if (text == null) {\n                    qq(textEl).clearText();\n                }\n                else {\n                    qq(textEl).setText(text);\n                }\n            }\n        },\n\n        hideSpinner: function(id) {\n            qq(getFile(id)).removeClass(IN_PROGRESS_CLASS);\n            hide(getSpinner(id));\n        },\n\n        showSpinner: function(id) {\n            qq(getFile(id)).addClass(IN_PROGRESS_CLASS);\n            show(getSpinner(id));\n        },\n\n        generatePreview: function(id, optFileOrBlob, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({id: id, customResizeFunction: customResizeFunction, optFileOrBlob: optFileOrBlob});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        updateThumbnail: function(id, thumbnailUrl, showWaitingImg, customResizeFunction) {\n            if (!this.isHiddenForever(id)) {\n                thumbGenerationQueue.push({customResizeFunction: customResizeFunction, update: true, id: id, thumbnailUrl: thumbnailUrl, showWaitingImg: showWaitingImg});\n                !thumbnailQueueMonitorRunning && generateNextQueuedPreview();\n            }\n        },\n\n        hasDialog: function(type) {\n            return qq.supportedFeatures.dialogElement && !!getDialog(type);\n        },\n\n        showDialog: function(type, message, defaultValue) {\n            var dialog = getDialog(type),\n                messageEl = getTemplateEl(dialog, selectorClasses.dialogMessage),\n                inputEl = dialog.getElementsByTagName(\"INPUT\")[0],\n                cancelBtn = getTemplateEl(dialog, selectorClasses.dialogCancelButton),\n                okBtn = getTemplateEl(dialog, selectorClasses.dialogOkButton),\n                promise = new qq.Promise(),\n\n                closeHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    okBtn && okBtn.removeEventListener(\"click\", okClickHandler);\n                    promise.failure();\n                },\n\n                cancelClickHandler = function() {\n                    cancelBtn.removeEventListener(\"click\", cancelClickHandler);\n                    dialog.close();\n                },\n\n                okClickHandler = function() {\n                    dialog.removeEventListener(\"close\", closeHandler);\n                    okBtn.removeEventListener(\"click\", okClickHandler);\n                    dialog.close();\n\n                    promise.success(inputEl && inputEl.value);\n                };\n\n            dialog.addEventListener(\"close\", closeHandler);\n            cancelBtn.addEventListener(\"click\", cancelClickHandler);\n            okBtn && okBtn.addEventListener(\"click\", okClickHandler);\n\n            if (inputEl) {\n                inputEl.value = defaultValue;\n            }\n            messageEl.textContent = message;\n\n            dialog.showModal();\n\n            return promise;\n        }\n    });\n};\n","/*globals qq */\n// Base handler for UI (FineUploader mode) events.\n// Some more specific handlers inherit from this one.\nqq.UiEventHandler = function(s, protectedApi) {\n    \"use strict\";\n\n    var disposer = new qq.DisposeSupport(),\n        spec = {\n            eventType: \"click\",\n            attachTo: null,\n            onHandled: function(target, event) {}\n        };\n\n    // This makes up the \"public\" API methods that will be accessible\n    // to instances constructing a base or child handler\n    qq.extend(this, {\n        addHandler: function(element) {\n            addHandler(element);\n        },\n\n        dispose: function() {\n            disposer.dispose();\n        }\n    });\n\n    function addHandler(element) {\n        disposer.attach(element, spec.eventType, function(event) {\n            // Only in IE: the `event` is a property of the `window`.\n            event = event || window.event;\n\n            // On older browsers, we must check the `srcElement` instead of the `target`.\n            var target = event.target || event.srcElement;\n\n            spec.onHandled(target, event);\n        });\n    }\n\n    // These make up the \"protected\" API methods that children of this base handler will utilize.\n    qq.extend(protectedApi, {\n        getFileIdFromItem: function(item) {\n            return item.qqFileId;\n        },\n\n        getDisposeSupport: function() {\n            return disposer;\n        }\n    });\n\n    qq.extend(spec, s);\n\n    if (spec.attachTo) {\n        addHandler(spec.attachTo);\n    }\n};\n","/* global qq */\nqq.FileButtonsClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onDeleteFile: function(fileId) {},\n            onCancel: function(fileId) {},\n            onRetry: function(fileId) {},\n            onPause: function(fileId) {},\n            onContinue: function(fileId) {},\n            onGetName: function(fileId) {}\n        },\n        buttonHandlers = {\n            cancel: function(id) { spec.onCancel(id); },\n            retry:  function(id) { spec.onRetry(id); },\n            deleteButton: function(id) { spec.onDeleteFile(id); },\n            pause: function(id) { spec.onPause(id); },\n            continueButton: function(id) { spec.onContinue(id); }\n        };\n\n    function examineEvent(target, event) {\n        qq.each(buttonHandlers, function(buttonType, handler) {\n            var firstLetterCapButtonType = buttonType.charAt(0).toUpperCase() + buttonType.slice(1),\n                fileId;\n\n            if (spec.templating[\"is\" + firstLetterCapButtonType](target)) {\n                fileId = spec.templating.getFileId(target);\n                qq.preventDefault(event);\n                spec.log(qq.format(\"Detected valid file button click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                handler(fileId);\n                return false;\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect click events on filename display elements.\nqq.FilenameClickHandler = function(s) {\n    \"use strict\";\n\n    var inheritedInternalApi = {},\n        spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            classes: {\n                file: \"qq-upload-file\",\n                editNameIcon: \"qq-edit-filename-icon\"\n            },\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {}\n        };\n\n    qq.extend(spec, s);\n\n    // This will be called by the parent handler when a `click` event is received on the list element.\n    function examineEvent(target, event) {\n        if (spec.templating.isFileName(target) || spec.templating.isEditIcon(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            // We only allow users to change filenames of files that have been submitted but not yet uploaded.\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename click event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                qq.preventDefault(event);\n\n                inheritedInternalApi.handleFilenameEdit(fileId, target, true);\n            }\n        }\n    }\n\n    spec.eventType = \"click\";\n    spec.onHandled = examineEvent;\n\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n// Child of FilenameEditHandler.  Used to detect focusin events on file edit input elements.\nqq.FilenameInputFocusInHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            onGetUploadStatus: function(fileId) {},\n            log: function(message, lvl) {}\n        };\n\n    if (!inheritedInternalApi) {\n        inheritedInternalApi = {};\n    }\n\n    // This will be called by the parent handler when a `focusin` event is received on the list element.\n    function handleInputFocus(target, event) {\n        if (spec.templating.isEditInput(target)) {\n            var fileId = spec.templating.getFileId(target),\n                status = spec.onGetUploadStatus(fileId);\n\n            if (status === qq.status.SUBMITTED) {\n                spec.log(qq.format(\"Detected valid filename input focus event on file '{}', ID: {}.\", spec.onGetName(fileId), fileId));\n                inheritedInternalApi.handleFilenameEdit(fileId, target);\n            }\n        }\n    }\n\n    spec.eventType = \"focusin\";\n    spec.onHandled = handleInputFocus;\n\n    qq.extend(spec, s);\n    qq.extend(this, new qq.FilenameEditHandler(spec, inheritedInternalApi));\n};\n","/*globals qq */\n/**\n * Child of FilenameInputFocusInHandler.  Used to detect focus events on file edit input elements.  This child module is only\n * needed for UAs that do not support the focusin event.  Currently, only Firefox lacks this event.\n *\n * @param spec Overrides for default specifications\n */\nqq.FilenameInputFocusHandler = function(spec) {\n    \"use strict\";\n\n    spec.eventType = \"focus\";\n    spec.attachTo = null;\n\n    qq.extend(this, new qq.FilenameInputFocusInHandler(spec, {}));\n};\n","/*globals qq */\n// Handles edit-related events on a file item (FineUploader mode).  This is meant to be a parent handler.\n// Children will delegate to this handler when specific edit-related actions are detected.\nqq.FilenameEditHandler = function(s, inheritedInternalApi) {\n    \"use strict\";\n\n    var spec = {\n            templating: null,\n            log: function(message, lvl) {},\n            onGetUploadStatus: function(fileId) {},\n            onGetName: function(fileId) {},\n            onSetName: function(fileId, newName) {},\n            onEditingStatusChange: function(fileId, isEditing) {}\n        };\n\n    function getFilenameSansExtension(fileId) {\n        var filenameSansExt = spec.onGetName(fileId),\n            extIdx = filenameSansExt.lastIndexOf(\".\");\n\n        if (extIdx > 0) {\n            filenameSansExt = filenameSansExt.substr(0, extIdx);\n        }\n\n        return filenameSansExt;\n    }\n\n    function getOriginalExtension(fileId) {\n        var origName = spec.onGetName(fileId);\n        return qq.getExtension(origName);\n    }\n\n    // Callback iff the name has been changed\n    function handleNameUpdate(newFilenameInputEl, fileId) {\n        var newName = newFilenameInputEl.value,\n            origExtension;\n\n        if (newName !== undefined && qq.trimStr(newName).length > 0) {\n            origExtension = getOriginalExtension(fileId);\n\n            if (origExtension !== undefined) {\n                newName = newName + \".\" + origExtension;\n            }\n\n            spec.onSetName(fileId, newName);\n        }\n\n        spec.onEditingStatusChange(fileId, false);\n    }\n\n    // The name has been updated if the filename edit input loses focus.\n    function registerInputBlurHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"blur\", function() {\n            handleNameUpdate(inputEl, fileId);\n        });\n    }\n\n    // The name has been updated if the user presses enter.\n    function registerInputEnterKeyHandler(inputEl, fileId) {\n        inheritedInternalApi.getDisposeSupport().attach(inputEl, \"keyup\", function(event) {\n\n            var code = event.keyCode || event.which;\n\n            if (code === 13) {\n                handleNameUpdate(inputEl, fileId);\n            }\n        });\n    }\n\n    qq.extend(spec, s);\n\n    spec.attachTo = spec.templating.getFileList();\n\n    qq.extend(this, new qq.UiEventHandler(spec, inheritedInternalApi));\n\n    qq.extend(inheritedInternalApi, {\n        handleFilenameEdit: function(id, target, focusInput) {\n            var newFilenameInputEl = spec.templating.getEditInput(id);\n\n            spec.onEditingStatusChange(id, true);\n\n            newFilenameInputEl.value = getFilenameSansExtension(id);\n\n            if (focusInput) {\n                newFilenameInputEl.focus();\n            }\n\n            registerInputBlurHandler(newFilenameInputEl, id);\n            registerInputEnterKeyHandler(newFilenameInputEl, id);\n        }\n    });\n};\n","/*globals qq */\n/**\n * This defines FineUploader mode w/ support for uploading to Azure, which provides all the basic\n * functionality of Fine Uploader as well as code to handle uploads directly to Azure.\n * This module inherits all logic from UI & core mode and adds some UI-related logic\n * specific to the upload-to-Azure workflow.  Some inherited options and API methods have a special meaning\n * in the context of the Azure uploader.\n */\n(function() {\n    \"use strict\";\n\n    qq.azure.FineUploader = function(o) {\n        var options = {\n            failedUploadTextDisplay: {\n                mode: \"custom\"\n            }\n        };\n\n        // Replace any default options with user defined ones\n        qq.extend(options, o, true);\n\n        // Inherit instance data from FineUploader, which should in turn inherit from azure.FineUploaderBasic.\n        qq.FineUploader.call(this, options, \"azure\");\n    };\n\n    // Inherit the API methods from FineUploaderBasicS3\n    qq.extend(qq.azure.FineUploader.prototype, qq.azure.FineUploaderBasic.prototype);\n\n    // Inherit public and private API methods related to UI\n    qq.extend(qq.azure.FineUploader.prototype, qq.uiPublicApi);\n    qq.extend(qq.azure.FineUploader.prototype, qq.uiPrivateApi);\n\n    // Define public & private API methods for this module.\n    qq.extend(qq.azure.FineUploader.prototype, {\n    });\n}());\n"]}